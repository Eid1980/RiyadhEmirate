// <auto-generated />
using System;
using Emirates.InfraStructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Emirates.InfraStructure.Migrations
{
    [DbContext(typeof(EmiratesContext))]
    [Migration("20221224175005_addNotification")]
    partial class addNotification
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence("RequestNumberSequence", "Request")
                .StartsAt(100000L);

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Auctions", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Audience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Audiences", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("fc4fabae-02bb-4dad-b856-db25449d8fa1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مواطنين",
                            NameEn = "Citizens"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("e7f77662-2fa0-44bb-bc96-2ec45e05d956"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مقيمين",
                            NameEn = "Residents"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("ccfe4ee1-470a-405b-9968-180593b3598c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زائرين",
                            NameEn = "Visitors"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.BuildingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("BuildingTypes", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("8c85c5b6-1b89-4ee2-8e62-569aed178e0c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شقة",
                            NameEn = "Apartment"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("b00b4e38-a8a2-4617-be35-dcd17a870bae"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "فيلا",
                            NameEn = "Villa"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("2ad3a240-2ad6-4df6-b2c4-8d941104191e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "عمارة سكنية",
                            NameEn = "Residential Building"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("9d53e3c6-04fd-4c96-a4d7-be4f24c498e6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مبنى تجاري",
                            NameEn = "Commercial Building"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("CaseTypes", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("3133c02b-80aa-4f24-b7c7-1fec358a6167"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "قضية جنائية",
                            NameEn = "Criminal Case"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CommentStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CanShowComment")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("CommentStages", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanShowComment = false,
                            ConcurrencyStamp = new Guid("e310e368-55af-496f-a328-5110a43ec797"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "جديد",
                            NameEn = "New"
                        },
                        new
                        {
                            Id = 2,
                            CanShowComment = false,
                            ConcurrencyStamp = new Guid("e7373ac7-89a4-4f2d-aa2c-cb7143b369a3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "معتمد",
                            NameEn = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            CanShowComment = false,
                            ConcurrencyStamp = new Guid("2dfb7b87-8097-4861-affe-751c7ac0b0d3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مرفوض",
                            NameEn = "Rejected"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ContactUsMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContactUsMessageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsReplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("ContactUsMessageTypeId");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("ContactUsMessages", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ContactUsMessageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ContactUsMessageTypes", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            NameAr = "سؤال",
                            NameEn = "Question"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            NameAr = "اقتراح",
                            NameEn = "Suggestion"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            NameAr = "طلب مساعدة",
                            NameEn = "Help"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.DefendantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("DefendantTypes", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("b0d1cb93-fdb8-45fc-8fc8-975794ff9455"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "فرد",
                            NameEn = "Individual"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("de29ad88-2d03-480b-9f3b-717c9301b868"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شركة",
                            NameEn = "Company"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("e2386acc-c6ba-462e-a281-b4fddea4d5bc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "جهة حكومية",
                            NameEn = "Governate"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.DesignEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Evaluate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DesignEvaluations", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.EmiratesPrince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BehalfToAr")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("BehalfToEn")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("EmiratesPrinces", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("720d09ac-6d22-4bf7-9987-5bb0b61a196e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1937, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceNasir.jpg",
                            IsActive = true,
                            NameAr = "الأمير ناصر بن عبد العزيز",
                            NameEn = "Prince Naser bin Abdul-Aziz",
                            ToDate = new DateTime(1947, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("8bc96f0e-e613-4ea8-befd-a159b1406bf2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1947, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceSultan.jpg",
                            IsActive = true,
                            NameAr = "الأمير سلطان  بن عبد العزيز",
                            NameEn = "Prince Sultan bin Abdul-Aziz",
                            ToDate = new DateTime(1952, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            BehalfToAr = "الأمير ​سلطان",
                            BehalfToEn = "prince Sultan bin Abdul-Aziz",
                            ConcurrencyStamp = new Guid("834faaef-bea0-4db8-bfdc-d67eb9f1f9e0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1952, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princenayef.jpg",
                            IsActive = true,
                            NameAr = "الأمير نايف بن عبد العزيز",
                            NameEn = "Prince Naif bin Abdul-Aziz",
                            ToDate = new DateTime(1952, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("ae06e261-2501-42a2-ada6-639b497e91cd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1952, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princenayef.jpg",
                            IsActive = true,
                            NameAr = "الأمير نايف بن عبد العزيز",
                            NameEn = "Prince Naif bin Abdul-Aziz",
                            ToDate = new DateTime(1955, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            BehalfToAr = "الأمير نايف",
                            BehalfToEn = "prince Naif",
                            ConcurrencyStamp = new Guid("10f6686d-6f6a-4dcf-8163-46ee766ca9b0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1954, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princesalman.jpg",
                            IsActive = true,
                            NameAr = "الملك سلمان بن عبد العزيز",
                            NameEn = "King Salman bin Abdul-Aziz",
                            ToDate = new DateTime(1955, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("6938fcea-0961-4906-aabb-5ac650803025"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1955, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princesalman.jpg",
                            IsActive = true,
                            NameAr = "الملك سلمان بن عبد العزيز",
                            NameEn = "King Salman bin Abdul-Aziz",
                            ToDate = new DateTime(1960, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            BehalfToAr = "الملك سلمان",
                            BehalfToEn = "king Salman",
                            ConcurrencyStamp = new Guid("a6d7a138-cd60-42d8-be8b-14a355e5d05d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1957, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceTurki.jpg",
                            IsActive = true,
                            NameAr = "الأمير تركي بن عبد العزيز",
                            NameEn = "Prince Turki bin Abdul-Aziz",
                            ToDate = new DateTime(1960, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("9fe1ad95-f3d5-444f-9f1e-66e48d7fa707"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1960, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceFawaz.jpg",
                            IsActive = true,
                            NameAr = "الأمير فواز بن عبد العزيز",
                            NameEn = "Prince Fawaz bin Abdul-Aziz",
                            ToDate = new DateTime(1961, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("c2b36bf6-6596-4d7e-ae5e-a2298663227c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1961, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princebadr.jpg",
                            IsActive = true,
                            NameAr = "الأمير بدر بن عبد العزيز",
                            NameEn = "Prince Badr bin Abdul-Aziz",
                            ToDate = new DateTime(1963, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = new Guid("3f055145-ad5a-4d6f-a80f-c4b3fbb7fa3c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1963, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princesalman.jpg",
                            IsActive = true,
                            NameAr = "الملك سلمان بن عبد العزيز",
                            NameEn = "King Salman bin Abdul-Aziz",
                            ToDate = new DateTime(2011, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = new Guid("2607025d-bcf8-4f4b-b104-1ce2f63c67ef"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(2011, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceSatam.jpg",
                            IsActive = true,
                            NameAr = "الأمير سطام بن عبد العزيز",
                            NameEn = "Prince Sattam bin Abdul-Aziz",
                            ToDate = new DateTime(2013, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = new Guid("ee4fb27a-5e9f-4a42-b1b1-5bf5427528f1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(2013, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceKhaledBandar.jpg",
                            IsActive = true,
                            NameAr = "الأمير خالد بن ​بندر بن عبد العزيز",
                            NameEn = "Prince khalid bin Bandar bin Abdul-Aziz",
                            ToDate = new DateTime(2014, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = new Guid("07427731-50c6-4853-a7f6-4db6ef734c3e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(2014, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceTurkiBinAbdullah.jpg",
                            IsActive = true,
                            NameAr = "الأمير تركي بن عبدالله بن عبد العزيز",
                            NameEn = "Prince ​Turki bin Abdullah bin Abdul-Aziz",
                            ToDate = new DateTime(2015, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = new Guid("b3af96ec-df9d-495a-aa80-c662acb34478"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(2015, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceFaisalBandar.jpg",
                            IsActive = true,
                            NameAr = "الأمير فيصل بن بندر بن عبد العزيز",
                            NameEn = "Prince Faisal bin Bandar bin Abdul-Aziz"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationLink")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PortalLink")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Governorates", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("8ae5ef3e-30e2-4cf6-b120-9bdf2c440a20"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "مدينة الرياض مقر الإمارة",
                            DescriptionEn = "Emirate of Riyadh City",
                            IsActive = true,
                            NameAr = "مدينة الرياض مقر الإمارة",
                            NameEn = "Emirate of Riyadh City"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("ea5f2156-84e1-44a0-8769-33e5add2adae"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "هي المحافظة الأولى في المملكة و يحدها من الشمال محافظة حريملاء و من الجنوب محافظة ضرما ومدينة الرياض و من الشرق مدينة الرياض و من الغرب حريملاء و محافظة ضرما وتبلغ مساحتها 2020 كلم2 و يبلغ عدد سكانها 73668 نسمة ( ثلاثة وسبعون ألفا و ستمائة وثمانية وستون ) نسمة و هي عاصمة الدولة السعودية الأولى و الثانية و يوجد بها بيوت أثرية للأسرة السعودية المالكة بنيت قديما على أنقاض مدينة حجر عاصمة اليمامة .",
                            DescriptionEn = "The first governorate in the kingdom. Al-Deri’yaa borders are Hraymlaa from the north, Derma governorate and Riyadh city from the south, Riyadh city from the east, and Hraymlaa and Derma from the west. Its area is 2020 square kilometers. Its population is 73668 people (seventy three thousand, six hundred, and sixty eight). It is the capital of the first and second Saudi state. It has archaeological houses of the Saudi governing family built on the ruins of Hajar city the capital of Al-Yamama.",
                            IsActive = true,
                            NameAr = "محافظةالدرعية",
                            NameEn = "Diriyah Governorate",
                            PhoneNumber = "0114861400",
                            PortalLink = "http://www.aldoriyah.gov.sa/"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("310c1eba-ddc7-4886-bec1-f23d47c148a9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "وتقع جنوب منطقة الرياض و يحدها من الشرق المنطقة الشرقية و من الغرب محافظة المزاحمية و محافظة الحريق و من الجنوب محافظة الأفلاج و من الشمال مدينة الرياض . و تبلغ مساحتها 19790كلم2 و يبلغ عدد سكانها 376325 نسمة و من الآثار و الأماكن التاريخية بمحافظة الخرج ـ قصر مشرف ـ بلدة اليمامة",
                            DescriptionEn = "It lies in the south of Riyadh region. Its borders are the eastern region from the east, Al-Mzahmya governorate and Al-Hareeq governorate from the west, Al-Aflaj from the south, and Riyadh from the north. Its area is 19790 square kilometers and its population is 376325 people. The historical monuments and places in it includes Musharraf palace and Al-Yamama town.",
                            IsActive = true,
                            NameAr = "محافظةالخرج",
                            NameEn = "Al-Kharj Governorate",
                            PhoneNumber = "0115483800",
                            PortalLink = "http://www.alkharj.gov.sa/"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("35f67588-d8f4-48ce-87f6-97c6914942c3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "ويحدها من الشمال منطقة القصيم و من الجنوب محافظة القويعية و من الغرب منطقة القصيم و محافظة عفيف ، ومن الشرق محافظة شقراء و محافظة مرات. و تبلغ مساحتها 30580كلم2 ـ و يبلغ عدد سكانها 217305 نسمة ، و من الآثار القديمة بمحافظة الدوادمى ـ قصر الملك عبد العزيز _ رحمه الله .",
                            DescriptionEn = "Its borders are Qaseem from the north, Al-Quwai’iyah governorate from the south, Qaseem and Afeef regionsfrom the west, and Shaqra governorate and Mrat village from the east. Its area is 30580 square kilometers and its population is 217305 people. It includes ancient monuments like king Abdul-Aziz palace – may Allah have mercy on him.",
                            IsActive = true,
                            NameAr = "محافظةالدوادمي",
                            NameEn = "Dawadmi Governorate",
                            PhoneNumber = "​0116421057",
                            PortalLink = "http://www.alduwadimi.gov.sa/"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("1341a60c-49a6-4275-9d35-ea5fc9c26214"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال المنطقة الشرقية و منطقة القصيم و من الجنوب محافظة ثادق ومحافظة شقراء و من الشرق محافظة رماح و من الغرب محافظة الزلفى و محافظة الغاط ، و تبلغ مساحتها 30000 كلم2 ـ و يبلغ عدد سكانها 133285 نسمة و من الأماكن التاريخية بمحافظة المجمعة قلعة قديمة تسمى _ المرقب .",
                            DescriptionEn = "Its borders are the eastern region and Qaseem from the north, Thadig and Shaqra governorates from the south, Rammah governorate from the east, and Zulfi and Al-Ghat governorates from the west. Its area is 30000 square kilometers and its population is 133285 people. It includes ancient places like an ancient castle called Al-Marqab",
                            IsActive = true,
                            NameAr = "محافظةالمجمعة",
                            NameEn = "Al Majma'ah Governorate",
                            PhoneNumber = "0164321000",
                            PortalLink = "http://www.almajmah.gov.sa/"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("deeb9d36-c751-4256-bfae-c4fbcc0b29e5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة الدوادمى و محافظة مرات و من الجنوب محافظة وادي الدواسر و من الشرق محافظة الحريق و محافظة المزاحمية و محافظة الأفلاج و من الغرب محافظة عفيف ، و تبلغ مساحتها 50580 كلم2 ـ و يبلغ عـدد سكانها 126161 نسمة .",
                            DescriptionEn = "It is borders are Al-Dawadmy governorate and Mrat village from the north, Wadi Al-Dawaser governorate from the south, Al-Hareeq, Al-Muzahmeya, and Al-Aflaj governorates from the east , and Affef governorate from the west. Its area is 50580 square kilometers and its population is 126161 people.",
                            IsActive = true,
                            NameAr = "محافظةالقويعية",
                            NameEn = "Al Quwaiiyah Governorate",
                            PhoneNumber = "0116520830",
                            PortalLink = "http://www.alquwayiyah.gov.sa/"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("fda8c0e8-9e55-4c63-832d-34132bcdc691"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة القويعية و من الجنوب منطقة نجران و من الشرق محافظة السليل و محافظة الأفلاج و من الغرب منطقة عسير ومنطقة مكة المكرمة ـ و تبلغ مساحتها 48900 كلم2 ـ و يبلغ عدد سكانها 106152 نسمة ، و من الآثار و الأماكن التاريخية في المحافظة ـ قصر الحكومة في الخماسين ـ و قصر باطوق و بهجة .",
                            DescriptionEn = "Its borders are Al-Quway’iah governorate from the north, Najran governorate from the south, Saleel and Al-Aflaj governorates from the east, and Aseer and Mecca from the west. Its area is 48900 square kilometers and its population is 106152 people. It includes historical monuments and places like Al-Khamaseen government palace and Batook and Bahga palace.",
                            IsActive = true,
                            NameAr = "محافظة وادي الدواسر",
                            NameEn = "Wadi ad-Dawasir Governorate",
                            PhoneNumber = "0117840292",
                            PortalLink = "http://www.wadiaddawasir.gov.sa/"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("d7acc9df-95d4-4a56-a579-cce7899a214a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة الخرج و محافظة حوطة بنى تميم ومن الجنوب محافظة السليل و من الشرق المنطقة الشرقية و من الغرب محافظة وادي الدواسر و محافظة القويعية و تبلغ مساحتها 54120كم2 و يبلغ عدد سكانها حسب تعداد 1431هـ ـ 68201 نسمة ، و من الآثار و الأماكن التاريخية بالمحافظة ـ جبل التوباد ـ و قصر سلمى .",
                            DescriptionEn = "Its borders are Al-Kharj and Hotat Bani Tameem governorates from the north, Al-Saleel governorate from the south, the eastern region from the east, and Wadi Al-Dawaser and Al-Quway’iyah governorate from the west. Its area is 54120 square kilometers and its population is 68201 people according to 1431 census. It includes historical monuments and places like Tupad mountain and Salma palace.",
                            IsActive = true,
                            NameAr = "محافظةالأفلاج",
                            NameEn = "Al-Aflaj Governorate",
                            PhoneNumber = "0116820144",
                            PortalLink = "http://www.alaflaj.gov.sa/"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("52b78ba3-9884-47c6-9d1c-f8b23e59d4d6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال و الغرب منطقة القصيم و من الجنوب محافظة الغاط ومن الشرق محافظة المجمعة و تبلغ مساحتها 5540 كلم 2 و يبلغ عدد سكانها 69294 نسمة .",
                            DescriptionEn = "borders are Qaseem region from the north and the west, Al-Ghat governorate from the south, and Al-Majma’ah governorate from the east. Its area is 5540 square kilometers and its population is 69294 people.",
                            IsActive = true,
                            NameAr = "محافظةالزلفي",
                            NameEn = "Az Zulfi Governorate",
                            PhoneNumber = "0164222222",
                            PortalLink = "http://www.alzulfi.gov.sa/"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = new Guid("8d5f24f8-8c78-4878-be21-fc30020e7951"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة الغاط و من الجنوب محافظة مرات و من الشرق محافظة المجمعة و محافظة ثادق ومن الغرب محافظة الدوادمى ـ و تبلغ مساحتها 4110 كلم2 ـ و يبلغ عدد سكانها 40541 نسمة .",
                            DescriptionEn = "Its borders are Al-Ghat governorate from the north, Mrat village from the south, Al-Majma’ah and Thadeq governorates from the east, and Al-Dawadmy governorate from the west. Its area is 4110 square kilometers and its population is 40541 people.",
                            IsActive = true,
                            NameAr = "محافظة شـقراء",
                            NameEn = "Shaqra Governorate",
                            PhoneNumber = "0116222225",
                            PortalLink = "http://www.shaqra.gov.sa/"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = new Guid("4287c553-52ce-4d78-9be5-5692d17c7281"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "ويحدها من الشمال محافظة الخرج و محافظة الحريق و من الجنوب محافظة الأفلاج و من الشرق محافظة الخرج و الأفلاج و من الغرب محافظة الحريق ، و تبلغ مساحتها 7350كلم2 ـ و يبلغ عدد سكانها 43300 نسمة ، و يوجد بمركز الحلوة التابع لمحافظة حوطة بنى تميم قلعة الإمام تركي .",
                            DescriptionEn = "Its borders are Al-Kharj and Al-Hareeq governorates from the north, Al-Aflaj governorate from the south, Al-Kharj and Al-Aflaj governorates from the east, and Al-Hareeq governorate from the west. Its area is 7350 square kilometers and its population is 43300 people. In Al-Helwa village following Hotat Bani Tameem governorate, there is Imam Turki castle.",
                            IsActive = true,
                            NameAr = "محافظة حوطة بني تميم",
                            NameEn = "Howtat Bani Tamim Governorate",
                            PhoneNumber = "0115550624",
                            PortalLink = "http://www.alhotah.gov.sa/"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = new Guid("64a573bc-0281-4e0e-a88f-53fbbccf3ccc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "ويحدها من الشمال منطقة القصيم و من الجنوب منطقة مكة المكرمة و من الشرق محافظة القويعية و محافظة الدوادمى و من الغرب منطقة المدينة المنورة ـ و تبلغ مساحتها 26810 كلم2 ويبلغ عدد سكانها 77978 نسمة .",
                            DescriptionEn = "Its borders are Al-Qaseem region from the north, Mecca region from the south, Al-Quway’iya  and Al-Dawadmygovernorates from the east, and Medina region from the west. Its area is 26810 square kilometers and its population is 77978 people.",
                            IsActive = true,
                            NameAr = "محافظة عفيـف",
                            NameEn = "Afif Governorate",
                            PhoneNumber = "0117221474",
                            PortalLink = "http://www.afif.gov.sa/"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = new Guid("f5f1c66c-30f5-43a5-8048-649399c062a6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة الأفلاج و من الجنوب منطقة نجران و من الشرق المنطقة الشرقية و من الغرب محافظة وادي الدواسر و تبلغ مساحتها 42420كلم2 ـ و يبلغ عدد سكانها 36383 نسمة .",
                            DescriptionEn = "Its borders are Al-Aflaj governorate from the north, Najran region from the south, the eastern region from the east, and Wadi Al-Dawaser governorate from the west. Its area is 42420 square kilometers and its population is 36383 people. It includes historical monuments like Al-Faw famous village.",
                            IsActive = true,
                            NameAr = "محافظةالسليل",
                            NameEn = "As Sulayyil Governorate",
                            PhoneNumber = "0117821965",
                            PortalLink = "http://www.alsulayyl.gov.sa/"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = new Guid("bbfbd1cf-1d23-4e9e-83f2-54b285004c4b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "يحدها من الشمال محافظة الدرعية و محافظة حريملاء ومن الجنوب محافظة المزاحمية و من الشرق مدينة الرياض و محافظة الدرعية ومن الغرب محافظة مرات ـ و تبلغ مساحتها 2060 كلم2 ـ و يبلغ عدد سكانها 24429 نسمة .",
                            DescriptionEn = "Its borders are Deri’yah and Hraymla governorates from the north, Al-Muzahmeya governorate from the south, Riyadh city and Deri’yah governorate from the east, and Mrat village from the west. Its area is 2060 square kilometers and its population is 24429 people.",
                            IsActive = true,
                            NameAr = "محافظة ضـرمـا",
                            NameEn = "Dhurma Governorate",
                            PhoneNumber = "0115221204",
                            PortalLink = "http://www.duruma.gov.sa/"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyStamp = new Guid("8e683d32-7c57-4a01-a217-eb7e50d89302"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة ضرما و من الجنوب محافظة الحريق و من الشرق مدينة الرياض و محافظة الخرج و من الغرب محافظة القويعية و وتبلغ مساحتها 3580 كلم2 ـ و يبلغ عدد سكانها 39865 نسمة .",
                            DescriptionEn = "Its borders are Dharma governorate from the north, Al-Hareeq governorate from the south, Riyadh city and Al-Kharj governorate from the east, and Al-Quway’iyah governorate from the west. Its area is 3580 square kilometers and its population is 39865 people.",
                            IsActive = true,
                            NameAr = "محافظةالمزاحمية",
                            NameEn = "Al-Muzahmiya Governorate",
                            PhoneNumber = "0115230485",
                            PortalLink = "http://www.almuzahmiyah.gov.sa/"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyStamp = new Guid("0d6910e3-555b-4f55-b4f2-073076763eb7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "يحـدها من الشمال المنطقة الشرقية و من الجنوب مدينة الرياض و من الشرق المنطقة الشرقية و من الغرب محافظة المجمعة و محافظة ثادق ومحافظة حريملاء ـ و تبلغ مساحتها 15900 كلم2 ـ و يبلغ عدد سكانها 28055 نسمة .",
                            DescriptionEn = "Its borders are the eastern region from the north, Riyadh city from the south, the eastern region from the east, and Majma’ah, Thadig, and Hraymla governorates from the west. Its area is 15900 square kilometers and its population is 28055 people.",
                            IsActive = true,
                            NameAr = "محافظة رمـاح",
                            NameEn = "Rumah Governorate",
                            PhoneNumber = "0115521166",
                            PortalLink = "http://www.rumah.gov.sa/"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyStamp = new Guid("d850636c-ba96-4a68-b0a3-2e1bf4c5f7da"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = " و يحدها من الشمال محافظة المجمعة و من الجنوب محافظة حريملاء و من الشرق محافظة حريملاء و من الغرب محافظة شقراء و محافظة مرات ـ و تبلغ مساحتها 5600 كلم2 ـ و يبلغ عدد سكانها 17165 نسمة .",
                            DescriptionEn = "Its borders are Al-Majma’ah governorate from the north, Hraymla governorate from the south, Hraymla governorate from the east, and Shaqra governorate and Mrat village from the west. Its area is 5600 square kilometers and its population is 17165 people.",
                            IsActive = true,
                            NameAr = "محافظة ثـادق",
                            NameEn = "Thadiq Governorate",
                            PhoneNumber = "0164439670",
                            PortalLink = "http://www.thadiq.gov.sa/"
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyStamp = new Guid("8f5d99db-a77f-4050-a9ec-4eb96c549e5c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة رماح و محافظة ثادق و من الجنوب محافظة الدرعية و محافظة ضرما و من الشرق مدينة الرياض و محافظة رماح و من الغرب محافظة ثادق ـ وتبلغ مساحتها 1480 كلم2 ـ و يبلغ عدد سكانها 15324 نسمة ، و من الآثار التاريخية بمحافظة حريملاء ـ منزل الإمام محمد بن عبد الوهاب ـ و جامع القراشة و جبل القطار .",
                            DescriptionEn = "Its borders are Rmah and Thadig governorates from the north, Diri’yah and Dharma governorates from the south, Riyadh city and Rmah governorate from the east, and Thadig governorate from the west. Its area is 1480 square kilometers and its population is 15324 people. It includes historical monuments like Imam Muhammad bin Abdul-Wahab house, Al-Quarasha mosque, and Al-Qetar mountain.",
                            IsActive = true,
                            NameAr = "محافظة حـريملاء",
                            NameEn = "Huraymila Governorate",
                            PhoneNumber = "0115260540",
                            PortalLink = "http://www.huraymila.gov.sa/"
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyStamp = new Guid("e072d602-d35e-436d-b2bb-7bfc30c8de07"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة المزاحمية و محافظة الخرج و من الجنوب محافظة حوطة بنى تميم و محافظة االأفلاج و من الشرق محافظة الخرج و محافظة حوطة بنى تميم و من الغرب محافظة القويعية و تبلغ مساحتها 6790كلم2 ـ و يبلغ عدد سكانها 14750 نسمة .",
                            DescriptionEn = "Its borders are Al-Muzahmeya and Al-Kharj governorates from the north, Hotat Bani Tammem and Al-Aflaj governorates from the south, Al-Kharj and Hotat Bani Tamaam governorates from the east, and Al-Quway’iyah governorate from the west. Its area is 6790 square kilometers and its population is 14750 people.",
                            IsActive = true,
                            NameAr = "محافظةالحريق",
                            NameEn = "Al Hariq Governorate",
                            PhoneNumber = "0115370449",
                            PortalLink = "http://www.alhariq.gov.sa/"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyStamp = new Guid("5ee09460-7a54-4bd3-b3af-626a34d96d18"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = " و يحدها من الشمال محافظة الزلفى و من الجنوب محافظة شقراء و من الشرق محافظة المجمعة و من الغرب منطقة القصيم ـ و تبلغ مساحتها 2690 كلم2 .",
                            DescriptionEn = "Its borders are Al-Zulfi governorate from the north, Shaqra governorate from the south, Al-Majma’ah governorate from the east, and Qaseem region from the west. Its area is 2690 square kilometers.",
                            IsActive = true,
                            NameAr = "محافظةالغـاط",
                            NameEn = "Al Ghat Governorate",
                            PhoneNumber = "0164421011",
                            PortalLink = "http://www.alghat.gov.sa/"
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyStamp = new Guid("127e278d-1272-4ca9-88a3-faff44b25bed"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "تقع في منطقة الرياض إلى الشمال الغربي من مدينة الرياض بين دائرة عرض 40 - 25 درجة شمالاً وبين خط طول 45 - 45 درجة شرقاً تبعد عن مدينة الرياض : 143 كم تقريباً ، مساحتها الجغرافية حسب النطاق الإداري ( 90×100 كم) .\r\n                                  يحد مرات من الجنوب محافظتا القويعية وضرما ، ومن الشمال محافظة شقراء ومن الشرق محافظتا ثادق وحريملاء ، ومن الغرب محافظة الدوادمي",
                            DescriptionEn = "It is located in the Riyadh region, to the northwest of the\r\n                                  city of Riyadh, between latitude 40-25 degrees north and longitude 45-45 degrees east. It is approximately 143 km away from the city of Riyadh. Its geographical area is according to the administrative range (90 x 100 km)\r\n                                  Murat is bordered on the south by the governorates of Al-Quway'iyah and Darma, on the north by Shaqra governorate, on the east by the governorates of Thadiq and Huraymila, and on the west by Al-Dawadmi governorate",
                            IsActive = true,
                            NameAr = "محافظة مرات",
                            NameEn = "Marat Governorate",
                            PhoneNumber = "0116231175"
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyStamp = new Guid("a9a005a4-de29-471d-8ea4-400fba88919b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = " يبلغ عدد سكان محافظة الدلم 80000 نسمة , ومن المعالم والاثار بمحافظة الدلم غار الامام تركي - موقعة الدلم عام 1320 هـ - سوق الدلم (المسحب) -جبل ابو ولد- غابة الضاحي - برج وسور الدلم - آثار وعيون خفس دغرة - منتزة وثيلان - آثار الفريع بزميقة .",
                            DescriptionEn = " The population of Ad Dilam Governorate is 80,000 people. Among the monuments and monuments in Ad Dilam Governorate are the Ghar of Imam Turki - the Battle of Ad Dilam in 1320 AH - the Ad Dilam Market (Al-Mashab) – Jabal Abu Walad – Al Dhahi Forest – Tower and Walls of Dulm – Ruins and Oyoun Khafs Dagra – Park and Thaylan – the ruins of Al-Fari’ Bzmika.",
                            IsActive = true,
                            NameAr = "محافظة الدلم",
                            NameEn = "Ad-Dilam Governorate",
                            PhoneNumber = "0115416115"
                        },
                        new
                        {
                            Id = 23,
                            ConcurrencyStamp = new Guid("c2bf0c7e-1959-42c5-949d-04cdd5b2a69c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = " تقع غرب مدينة الرياض ويحدها من الشمال محافظة المزاحمية ومن الجنوب محافظة وادي الدواسر ومن الشرق محافظة الحريق ومن الغرب محافظة القويعية ومن الجنوب الشرقي محافظة حوطة بني تميم ومحافظة الافلاج وتبلغ مساحتها 40 الف كلم2 تقريباً - ويبلغ عدد سكانها40 الف نسمة تقريباً ومن المعالم بمحافظة الرين (جبل دساس - جبال الحصاة - جبل بتران - جبال عريقية - وادي الرين - وادي الركا - وادي السرة - وادي العمق - هضبة الموزر)",
                            DescriptionEn = " It is located west of the city of Riyadh and is bordered to the north by Al-Muzahimiyah Governorate, to the south by Wadi Al-Dawasir Governorate, to the east by Al-Hariq Governorate, to the west by Al-Quway’iyah Governorate, to the southeast by Hotat Bani Tamim Governorate and Al-Aflaj Governorate, with an area of ​​approximately 40,000 km2 and a population of approximately 40,000 people. Dasas - Al-Hassa Mountains - Betran Mountain - Areqi Mountains - Wadi Al-Rain - Wadi Al-Raka - Wadi Al-Surra - Wadi Al-Amq - Al-Mozer Plateau)",
                            IsActive = true,
                            NameAr = "محافظة الرين",
                            NameEn = "Rayn Governorate",
                            PhoneNumber = "0116590355"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MainPagePoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PageContentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PageContentId");

                    b.ToTable("MainPagePoints", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("MaritalStatuses", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("a406988c-354f-4e95-ad5f-6a70ca016db4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أعزب",
                            NameEn = "Single"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("58b56b6a-b2a6-42ea-b26c-2d6dcea5c8ef"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "متزوج",
                            NameEn = "Married"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("f51383cd-65ea-4bb7-ba5e-0cf9c82d01d5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مطلق",
                            NameEn = "Divorced"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("8f8347cb-7f61-4ace-9acb-32c3ce1fc7e2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أرمل",
                            NameEn = "Widower"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("DialCode")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Iso2")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Nationalities", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "101",
                            ConcurrencyStamp = new Guid("985104e2-d587-42de-a4cf-35323e78bed2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "971",
                            IsActive = true,
                            Iso2 = "ae",
                            NameAr = "الامارات العربية",
                            NameEn = "Arab Emirates"
                        },
                        new
                        {
                            Id = 2,
                            Code = "102",
                            ConcurrencyStamp = new Guid("45aba0c6-7285-4b74-951d-dd96dec3b689"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "962",
                            IsActive = true,
                            Iso2 = "jo",
                            NameAr = "الاردن",
                            NameEn = "Jordan"
                        },
                        new
                        {
                            Id = 3,
                            Code = "103",
                            ConcurrencyStamp = new Guid("867c8351-dfef-4e56-af00-734df2ebb4af"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "973",
                            IsActive = true,
                            Iso2 = "bh",
                            NameAr = "البحرين",
                            NameEn = "Bahrain"
                        },
                        new
                        {
                            Id = 4,
                            Code = "104",
                            ConcurrencyStamp = new Guid("79f016e8-7793-4a8b-b20b-81510db62007"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "963",
                            IsActive = true,
                            Iso2 = "sy",
                            NameAr = "سوريا",
                            NameEn = "Syria"
                        },
                        new
                        {
                            Id = 5,
                            Code = "105",
                            ConcurrencyStamp = new Guid("5096d940-b442-49ba-8633-4cab5b6a215a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "964",
                            IsActive = true,
                            Iso2 = "iq",
                            NameAr = "العراق",
                            NameEn = "Iraq"
                        },
                        new
                        {
                            Id = 6,
                            Code = "106",
                            ConcurrencyStamp = new Guid("daf5f67f-1c26-4a55-ab99-ac24131578cb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "968",
                            IsActive = true,
                            Iso2 = "om",
                            NameAr = "عمان",
                            NameEn = "Oman"
                        },
                        new
                        {
                            Id = 7,
                            Code = "107",
                            ConcurrencyStamp = new Guid("1341c4c7-0384-42da-8647-746b9e854f7a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "970",
                            IsActive = true,
                            Iso2 = "ps",
                            NameAr = "فلسطين",
                            NameEn = "Palestine"
                        },
                        new
                        {
                            Id = 8,
                            Code = "108",
                            ConcurrencyStamp = new Guid("f15ff4cf-f85e-4e86-a9c0-ea7d473a296f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "974",
                            IsActive = true,
                            Iso2 = "qa",
                            NameAr = "قطر",
                            NameEn = "Qatar"
                        },
                        new
                        {
                            Id = 9,
                            Code = "109",
                            ConcurrencyStamp = new Guid("621ca3c4-22e6-4763-b011-39ebcdddb7b5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "965",
                            IsActive = true,
                            Iso2 = "kw",
                            NameAr = "الكويت",
                            NameEn = "Kuwait"
                        },
                        new
                        {
                            Id = 10,
                            Code = "110",
                            ConcurrencyStamp = new Guid("67146cf7-adf5-47e5-b151-0342a6a7f159"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "961",
                            IsActive = true,
                            Iso2 = "lb",
                            NameAr = "لبنان",
                            NameEn = "Lebanon"
                        },
                        new
                        {
                            Id = 11,
                            Code = "111",
                            ConcurrencyStamp = new Guid("2b6df4bd-8f1f-4dc8-9c52-dd5a4b4167ab"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "967",
                            IsActive = true,
                            Iso2 = "ye",
                            NameAr = "اليمن",
                            NameEn = "Yemen"
                        },
                        new
                        {
                            Id = 12,
                            Code = "113",
                            ConcurrencyStamp = new Guid("7c782798-215d-415f-bbae-39e64fe7c18b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "966",
                            IsActive = true,
                            Iso2 = "sa",
                            NameAr = "العربية السعودية",
                            NameEn = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 13,
                            Code = "201",
                            ConcurrencyStamp = new Guid("f076d2e9-8230-4612-b888-a3e2d457bd2d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "216",
                            IsActive = true,
                            Iso2 = "tn",
                            NameAr = "تونس",
                            NameEn = "Tunisia"
                        },
                        new
                        {
                            Id = 14,
                            Code = "202",
                            ConcurrencyStamp = new Guid("ad6ef42e-c760-422d-bc60-af4e10f36ed4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "213",
                            IsActive = true,
                            Iso2 = "dz",
                            NameAr = "الجزائر",
                            NameEn = "Algeria"
                        },
                        new
                        {
                            Id = 15,
                            Code = "203",
                            ConcurrencyStamp = new Guid("e64070bc-45b9-433f-a39e-5ae941908304"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "253",
                            IsActive = true,
                            Iso2 = "dj",
                            NameAr = "جيبوتى",
                            NameEn = "Djibouti"
                        },
                        new
                        {
                            Id = 16,
                            Code = "204",
                            ConcurrencyStamp = new Guid("7a932ff9-5e78-4cbf-9337-244d234c4a9d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "249",
                            IsActive = true,
                            Iso2 = "sd",
                            NameAr = "السودان",
                            NameEn = "Sudan"
                        },
                        new
                        {
                            Id = 17,
                            Code = "205",
                            ConcurrencyStamp = new Guid("ede24163-3e07-455a-aa51-59a6aad209dd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "252",
                            IsActive = true,
                            Iso2 = "so",
                            NameAr = "الصومال",
                            NameEn = "Somalia"
                        },
                        new
                        {
                            Id = 18,
                            Code = "206",
                            ConcurrencyStamp = new Guid("12d8a2d8-2698-4977-9106-db2e8f974f08"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "218",
                            IsActive = true,
                            Iso2 = "ly",
                            NameAr = "ليبيا",
                            NameEn = "Libya"
                        },
                        new
                        {
                            Id = 19,
                            Code = "207",
                            ConcurrencyStamp = new Guid("dcb7a7ad-4985-4f6a-bbdb-ea1fac6b4ab2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "20",
                            IsActive = true,
                            Iso2 = "eg",
                            NameAr = "مصر",
                            NameEn = "Egypt"
                        },
                        new
                        {
                            Id = 20,
                            Code = "208",
                            ConcurrencyStamp = new Guid("91dc9485-6a2a-42a0-859e-00bd890b540e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "212",
                            IsActive = true,
                            Iso2 = "ma",
                            NameAr = "المغرب",
                            NameEn = "Morocco"
                        },
                        new
                        {
                            Id = 21,
                            Code = "209",
                            ConcurrencyStamp = new Guid("0ed44ae1-2a10-4627-a7b0-d9c1ad87b890"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "222",
                            IsActive = true,
                            Iso2 = "mr",
                            NameAr = "موريتانيا",
                            NameEn = "Mauritania"
                        },
                        new
                        {
                            Id = 22,
                            Code = "301",
                            ConcurrencyStamp = new Guid("168d5513-2eaf-4780-87be-3ed5bb669d74"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "93",
                            IsActive = true,
                            Iso2 = "af",
                            NameAr = "افغانستان",
                            NameEn = "Afghanistan"
                        },
                        new
                        {
                            Id = 23,
                            Code = "302",
                            ConcurrencyStamp = new Guid("14184b4b-bc5e-436d-b26f-b650c83b7dca"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "62",
                            IsActive = true,
                            Iso2 = "id",
                            NameAr = "اندونيسيا",
                            NameEn = "Indonesia"
                        },
                        new
                        {
                            Id = 24,
                            Code = "303",
                            ConcurrencyStamp = new Guid("f1ef3c22-38b2-4764-afc2-172575da1f5c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "98",
                            IsActive = true,
                            Iso2 = "ir",
                            NameAr = "ايران",
                            NameEn = "Iran"
                        },
                        new
                        {
                            Id = 25,
                            Code = "304",
                            ConcurrencyStamp = new Guid("f81ce62e-96ac-4684-b943-eb937e6ba793"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "92",
                            IsActive = true,
                            Iso2 = "pk",
                            NameAr = "باكستان",
                            NameEn = "Pakistan"
                        },
                        new
                        {
                            Id = 26,
                            Code = "305",
                            ConcurrencyStamp = new Guid("18761507-2ed9-4702-a206-be71218424e0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "880",
                            IsActive = true,
                            Iso2 = "bd",
                            NameAr = "بنجلاديش",
                            NameEn = "Bangladesh"
                        },
                        new
                        {
                            Id = 27,
                            Code = "306",
                            ConcurrencyStamp = new Guid("5ca41c30-2afe-4075-8363-1a3dc1a0bab7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "673",
                            IsActive = true,
                            Iso2 = "bn",
                            NameAr = "بروني",
                            NameEn = "Brunei"
                        },
                        new
                        {
                            Id = 28,
                            Code = "307",
                            ConcurrencyStamp = new Guid("47cd1264-5a9e-47a0-9f08-84487c12e913"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "95",
                            IsActive = true,
                            Iso2 = "mm",
                            NameAr = "جمهورية ميانمار",
                            NameEn = "Myanmar"
                        },
                        new
                        {
                            Id = 29,
                            Code = "308",
                            ConcurrencyStamp = new Guid("e00efc61-01df-4a3f-bd14-effca1e0e746"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "66",
                            IsActive = true,
                            Iso2 = "th",
                            NameAr = "تايلند",
                            NameEn = "Thailand"
                        },
                        new
                        {
                            Id = 30,
                            Code = "309",
                            ConcurrencyStamp = new Guid("921cfd58-afe0-4bc1-acda-c2a33f3d4d22"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "90",
                            IsActive = true,
                            Iso2 = "tr",
                            NameAr = "تركيا",
                            NameEn = "Turkey"
                        },
                        new
                        {
                            Id = 31,
                            Code = "310",
                            ConcurrencyStamp = new Guid("8b534e05-1331-484c-a9ec-379b13746d82"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "960",
                            IsActive = true,
                            Iso2 = "mv",
                            NameAr = "جزر مالديف",
                            NameEn = "Maldives"
                        },
                        new
                        {
                            Id = 32,
                            Code = "311",
                            ConcurrencyStamp = new Guid("722ab8e5-b1f1-4248-a0bf-418256d4aa0c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "7",
                            IsActive = true,
                            Iso2 = "ru",
                            NameAr = "روسيا الاتحادية",
                            NameEn = "Russia"
                        },
                        new
                        {
                            Id = 33,
                            Code = "312",
                            ConcurrencyStamp = new Guid("2f36838c-d473-4135-803e-acde268b0805"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "65",
                            IsActive = true,
                            Iso2 = "sg",
                            NameAr = "سنغافورة",
                            NameEn = "Singapore"
                        },
                        new
                        {
                            Id = 34,
                            Code = "313",
                            ConcurrencyStamp = new Guid("f90fdeb5-631e-4812-a7ae-99b993c8dc5a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "94",
                            IsActive = true,
                            Iso2 = "lk",
                            NameAr = "سري لنكا",
                            NameEn = "Sri Lanka"
                        },
                        new
                        {
                            Id = 35,
                            Code = "315",
                            ConcurrencyStamp = new Guid("7a1ad2f1-979c-417a-a810-56fff883cc6b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "63",
                            IsActive = true,
                            Iso2 = "ph",
                            NameAr = "الفلبين",
                            NameEn = "Philippines"
                        },
                        new
                        {
                            Id = 36,
                            Code = "316",
                            ConcurrencyStamp = new Guid("1ebb818e-33fb-4c5a-8a04-380c41c2c8c7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "84",
                            IsActive = true,
                            Iso2 = "vn",
                            NameAr = "فيتنام",
                            NameEn = "Vietnam"
                        },
                        new
                        {
                            Id = 37,
                            Code = "317",
                            ConcurrencyStamp = new Guid("b17e6732-6410-4917-94b5-707cd2ae7b37"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "855",
                            IsActive = true,
                            Iso2 = "kh",
                            NameAr = "كمبوديا",
                            NameEn = "Cambodia"
                        },
                        new
                        {
                            Id = 38,
                            Code = "318",
                            ConcurrencyStamp = new Guid("85ecb429-e9ed-4fd6-b696-3a151e37314d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "82",
                            IsActive = true,
                            Iso2 = "kr",
                            NameAr = "كوريا الجنوبية",
                            NameEn = "South Korea"
                        },
                        new
                        {
                            Id = 39,
                            Code = "319",
                            ConcurrencyStamp = new Guid("066d4159-902c-45a7-a7a9-53f7fdc96df4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "60",
                            IsActive = true,
                            Iso2 = "my",
                            NameAr = "ماليزيا",
                            NameEn = "Malaysia"
                        },
                        new
                        {
                            Id = 40,
                            Code = "320",
                            ConcurrencyStamp = new Guid("08948cb6-e626-47c2-806d-f2d96e4553d6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "977",
                            IsActive = true,
                            Iso2 = "np",
                            NameAr = "نيبال",
                            NameEn = "Nepal"
                        },
                        new
                        {
                            Id = 41,
                            Code = "321",
                            ConcurrencyStamp = new Guid("24faf0c5-7a00-4fa3-b624-f0ba93b14d9c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "91",
                            IsActive = true,
                            Iso2 = "in",
                            NameAr = "الهند",
                            NameEn = "India"
                        },
                        new
                        {
                            Id = 42,
                            Code = "322",
                            ConcurrencyStamp = new Guid("fe79daa7-858f-40e8-899b-b56c6087ece4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "852",
                            IsActive = true,
                            Iso2 = "hk",
                            NameAr = "هونج كونج",
                            NameEn = "Hong Kong"
                        },
                        new
                        {
                            Id = 43,
                            Code = "323",
                            ConcurrencyStamp = new Guid("b8340d82-9b89-4206-ac8c-3669e62e1d27"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "81",
                            IsActive = true,
                            Iso2 = "jp",
                            NameAr = "اليابان",
                            NameEn = "Japan"
                        },
                        new
                        {
                            Id = 44,
                            Code = "324",
                            ConcurrencyStamp = new Guid("33273d98-76cf-4b7d-84b6-950b81d30043"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "975",
                            IsActive = true,
                            Iso2 = "bt",
                            NameAr = "بهوتان",
                            NameEn = "Bhutan"
                        },
                        new
                        {
                            Id = 45,
                            Code = "325",
                            ConcurrencyStamp = new Guid("bb8f2ba6-e428-4f66-9fa0-2c77a1009687"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "86",
                            IsActive = true,
                            Iso2 = "cn",
                            NameAr = "الصين الشعبية",
                            NameEn = "China"
                        },
                        new
                        {
                            Id = 46,
                            Code = "326",
                            ConcurrencyStamp = new Guid("2a1cac48-e52e-444f-b0aa-7e51a8c98d7c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "357",
                            IsActive = true,
                            Iso2 = "cy",
                            NameAr = "قبرص",
                            NameEn = "Cyprus"
                        },
                        new
                        {
                            Id = 47,
                            Code = "328",
                            ConcurrencyStamp = new Guid("d8adfde0-c4a7-445e-b5a9-7bc2b07e776a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "850",
                            IsActive = true,
                            Iso2 = "kp",
                            NameAr = "كوريا الشمالية",
                            NameEn = "North Korea"
                        },
                        new
                        {
                            Id = 48,
                            Code = "329",
                            ConcurrencyStamp = new Guid("858ec90b-907a-40e3-9381-8e44396ab078"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "856",
                            IsActive = true,
                            Iso2 = "la",
                            NameAr = "لاوس",
                            NameEn = "Laos"
                        },
                        new
                        {
                            Id = 49,
                            Code = "330",
                            ConcurrencyStamp = new Guid("f4d06e52-368c-4451-8bdd-7da1c771a262"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "976",
                            IsActive = true,
                            Iso2 = "mn",
                            NameAr = "منغوليا",
                            NameEn = "Mongolia"
                        },
                        new
                        {
                            Id = 50,
                            Code = "331",
                            ConcurrencyStamp = new Guid("de2889ee-efea-47a0-97db-187ea982ceb5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "853",
                            IsActive = true,
                            Iso2 = "mo",
                            NameAr = "ماكاو",
                            NameEn = "Macao"
                        },
                        new
                        {
                            Id = 51,
                            Code = "332",
                            ConcurrencyStamp = new Guid("5a62b981-a9e4-40e7-ab32-b50f94162e85"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "تركستان",
                            NameEn = "Turkistan"
                        },
                        new
                        {
                            Id = 52,
                            Code = "335",
                            ConcurrencyStamp = new Guid("5840dc9f-2227-45d8-8662-e3ddabc03d50"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "القبائل النازحة",
                            NameEn = "Tribes Emigrated"
                        },
                        new
                        {
                            Id = 53,
                            Code = "336",
                            ConcurrencyStamp = new Guid("439b9e9f-b5ae-4c81-a3b8-41d7ae6f51ab"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "7",
                            IsActive = true,
                            Iso2 = "kz",
                            NameAr = "كازاخستان",
                            NameEn = "Kazakhstan"
                        },
                        new
                        {
                            Id = 54,
                            Code = "337",
                            ConcurrencyStamp = new Guid("64c2067d-0906-4d21-890f-64c12c93746a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "998",
                            IsActive = true,
                            Iso2 = "uz",
                            NameAr = "ازبكستان",
                            NameEn = "Uzbekistan"
                        },
                        new
                        {
                            Id = 55,
                            Code = "338",
                            ConcurrencyStamp = new Guid("ce870030-1e08-460c-8af1-39380314d361"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "993",
                            IsActive = true,
                            Iso2 = "tm",
                            NameAr = "تركمانستان",
                            NameEn = "Turkmenistan"
                        },
                        new
                        {
                            Id = 56,
                            Code = "339",
                            ConcurrencyStamp = new Guid("d461760c-a05d-4364-b2fd-34b1317b0788"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "992",
                            IsActive = true,
                            Iso2 = "tj",
                            NameAr = "طاجكستان",
                            NameEn = "Tajikistan"
                        },
                        new
                        {
                            Id = 57,
                            Code = "340",
                            ConcurrencyStamp = new Guid("42b0c7e2-9465-4ce1-a312-2514b211e3e8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "996",
                            IsActive = false,
                            Iso2 = "kg",
                            NameAr = "قرغيزستان",
                            NameEn = "kyrgyzstan"
                        },
                        new
                        {
                            Id = 58,
                            Code = "343",
                            ConcurrencyStamp = new Guid("9cfebfef-fae3-4a00-9018-05563444583b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "994",
                            IsActive = true,
                            Iso2 = "az",
                            NameAr = "اذربيجان",
                            NameEn = "Azerbaijan"
                        },
                        new
                        {
                            Id = 59,
                            Code = "344",
                            ConcurrencyStamp = new Guid("68c32209-8d10-4371-9fc2-bfb22c6689dc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "الشاشان",
                            NameEn = "Chechnya"
                        },
                        new
                        {
                            Id = 60,
                            Code = "345",
                            ConcurrencyStamp = new Guid("c35af0a8-fe6e-4221-b6e4-9b9f5ab259f0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "872",
                            IsActive = false,
                            Iso2 = "da",
                            NameAr = "داغستان",
                            NameEn = "Dagestan"
                        },
                        new
                        {
                            Id = 61,
                            Code = "346",
                            ConcurrencyStamp = new Guid("9ddb2d20-34ad-406e-a6c2-777458a68f3f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "انقوش",
                            NameEn = "Anquosh"
                        },
                        new
                        {
                            Id = 62,
                            Code = "347",
                            ConcurrencyStamp = new Guid("a6fb68e1-b23c-4053-9d58-e00ff1b20b08"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "7",
                            IsActive = false,
                            Iso2 = "ta",
                            NameAr = "تتارستان",
                            NameEn = "Tatarstan"
                        },
                        new
                        {
                            Id = 63,
                            Code = "349",
                            ConcurrencyStamp = new Guid("1d1c9775-96bc-4610-ab8a-2b5f9559b9f7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "670",
                            IsActive = false,
                            Iso2 = "tp",
                            NameAr = "تيمور الشرقية",
                            NameEn = "East Timor"
                        },
                        new
                        {
                            Id = 64,
                            Code = "401",
                            ConcurrencyStamp = new Guid("0beb8186-35cd-4124-bd57-b89be478cc78"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "251",
                            IsActive = true,
                            Iso2 = "et",
                            NameAr = "اثيوبيا",
                            NameEn = "Ethiopia"
                        },
                        new
                        {
                            Id = 65,
                            Code = "402",
                            ConcurrencyStamp = new Guid("387fc9d2-fbf8-4c3a-b2f0-2e4fe13cff0c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "256",
                            IsActive = true,
                            Iso2 = "ug",
                            NameAr = "اوغندة",
                            NameEn = "Uganda"
                        },
                        new
                        {
                            Id = 66,
                            Code = "403",
                            ConcurrencyStamp = new Guid("080a6da7-966b-45da-9eb7-9614c019bc2c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "267",
                            IsActive = true,
                            Iso2 = "bw",
                            NameAr = "بوتسوانا",
                            NameEn = "Botswana"
                        },
                        new
                        {
                            Id = 67,
                            Code = "404",
                            ConcurrencyStamp = new Guid("3635a99c-fd85-48fc-84bb-e567f9cdbef2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "257",
                            IsActive = true,
                            Iso2 = "bi",
                            NameAr = "بورندي",
                            NameEn = "Burundi"
                        },
                        new
                        {
                            Id = 68,
                            Code = "405",
                            ConcurrencyStamp = new Guid("06d96851-c491-480d-b3c6-20e677b4ade5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "235",
                            IsActive = true,
                            Iso2 = "td",
                            NameAr = "تشاد",
                            NameEn = "Chad"
                        },
                        new
                        {
                            Id = 69,
                            Code = "406",
                            ConcurrencyStamp = new Guid("5a48cc2d-97a1-4e76-a3fa-79f92acdff99"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "255",
                            IsActive = true,
                            Iso2 = "tz",
                            NameAr = "تنزانيا",
                            NameEn = "Tanzania"
                        },
                        new
                        {
                            Id = 70,
                            Code = "407",
                            ConcurrencyStamp = new Guid("f6f1c483-af7f-4974-bdd6-08a176c11639"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "228",
                            IsActive = true,
                            Iso2 = "tg",
                            NameAr = "توجو",
                            NameEn = "Togo"
                        },
                        new
                        {
                            Id = 71,
                            Code = "408",
                            ConcurrencyStamp = new Guid("188667f0-b4be-4c8a-b811-dd43a60f6b5f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "241",
                            IsActive = true,
                            Iso2 = "ga",
                            NameAr = "جابون",
                            NameEn = "Answer"
                        },
                        new
                        {
                            Id = 72,
                            Code = "409",
                            ConcurrencyStamp = new Guid("9bb82cf0-3e69-479b-9844-99e5f603a8cb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "220",
                            IsActive = true,
                            Iso2 = "gm",
                            NameAr = "غامبيا",
                            NameEn = "Gambia"
                        },
                        new
                        {
                            Id = 73,
                            Code = "410",
                            ConcurrencyStamp = new Guid("ccee91d5-0d6e-4534-963e-72fffe1d2e61"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "269",
                            IsActive = true,
                            Iso2 = "km",
                            NameAr = "جزر القمر",
                            NameEn = "Comoros"
                        },
                        new
                        {
                            Id = 74,
                            Code = "411",
                            ConcurrencyStamp = new Guid("3637e470-564d-4a2c-a7af-c77e790b5a6c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "27",
                            IsActive = true,
                            Iso2 = "za",
                            NameAr = "جنوب افريقيا",
                            NameEn = "South Africa"
                        },
                        new
                        {
                            Id = 75,
                            Code = "412",
                            ConcurrencyStamp = new Guid("954af459-70c6-45cd-ad67-1085bed310ba"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "264",
                            IsActive = true,
                            Iso2 = "na",
                            NameAr = "ناميبيا",
                            NameEn = "Namibia"
                        },
                        new
                        {
                            Id = 76,
                            Code = "413",
                            ConcurrencyStamp = new Guid("3f704a9f-9511-4133-9dbe-f46fbf15eb27"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "229",
                            IsActive = true,
                            Iso2 = "bj",
                            NameAr = "بنين",
                            NameEn = "Benin"
                        },
                        new
                        {
                            Id = 77,
                            Code = "414",
                            ConcurrencyStamp = new Guid("b6f9654c-306f-45e7-8e8c-8710e4f2e537"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "250",
                            IsActive = true,
                            Iso2 = "rw",
                            NameAr = "رواندا",
                            NameEn = "Rwanda"
                        },
                        new
                        {
                            Id = 78,
                            Code = "415",
                            ConcurrencyStamp = new Guid("2a7ad777-a1f4-43fa-9a1f-3e37e3a96da0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "263",
                            IsActive = true,
                            Iso2 = "zw",
                            NameAr = "زمبابوي",
                            NameEn = "Zimbabwe"
                        },
                        new
                        {
                            Id = 79,
                            Code = "416",
                            ConcurrencyStamp = new Guid("74290190-a4d1-454d-945c-01e476093911"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "243",
                            IsActive = false,
                            Iso2 = "zr",
                            NameAr = "زائير",
                            NameEn = "Zaire"
                        },
                        new
                        {
                            Id = 80,
                            Code = "417",
                            ConcurrencyStamp = new Guid("a5c60c0c-3e15-49a4-a59e-d99ceffd401f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "260",
                            IsActive = true,
                            Iso2 = "zm",
                            NameAr = "زامبيا",
                            NameEn = "Zambia"
                        },
                        new
                        {
                            Id = 81,
                            Code = "418",
                            ConcurrencyStamp = new Guid("a71ec653-721f-4a1e-bac1-0cefc455d0cd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "225",
                            IsActive = false,
                            Iso2 = "ci",
                            NameAr = "ساحل العاج",
                            NameEn = "Ivory Coast"
                        },
                        new
                        {
                            Id = 82,
                            Code = "419",
                            ConcurrencyStamp = new Guid("85ed1abe-313f-4bad-93df-9767379a3878"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Iso2 = "sn  221",
                            NameAr = "السنغال",
                            NameEn = "Senegal"
                        },
                        new
                        {
                            Id = 83,
                            Code = "420",
                            ConcurrencyStamp = new Guid("1c6816bc-5820-40d9-8f94-47aaf0428044"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "232",
                            IsActive = true,
                            Iso2 = "sl",
                            NameAr = "سيراليون",
                            NameEn = "Sierra Leone"
                        },
                        new
                        {
                            Id = 84,
                            Code = "421",
                            ConcurrencyStamp = new Guid("73de9b16-f947-463b-baff-046ade84fe6a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "233",
                            IsActive = true,
                            Iso2 = "gh",
                            NameAr = "غانا",
                            NameEn = "Ghana"
                        },
                        new
                        {
                            Id = 85,
                            Code = "422",
                            ConcurrencyStamp = new Guid("60f52e29-d315-4160-b085-e632f5057af3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "224",
                            IsActive = true,
                            Iso2 = "gn",
                            NameAr = "غينيا",
                            NameEn = "Guinea"
                        },
                        new
                        {
                            Id = 86,
                            Code = "423",
                            ConcurrencyStamp = new Guid("41eed0cf-a1e2-4a73-a6e3-319273a59f97"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "245",
                            IsActive = true,
                            Iso2 = "gw",
                            NameAr = "غينيابيساو",
                            NameEn = "Guinea Bissau"
                        },
                        new
                        {
                            Id = 87,
                            Code = "424",
                            ConcurrencyStamp = new Guid("be22a14f-5645-44de-95c2-be56357f3d20"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "226",
                            IsActive = true,
                            Iso2 = "bf",
                            NameAr = "بوركينافاسو",
                            NameEn = "Burkina Faso"
                        },
                        new
                        {
                            Id = 88,
                            Code = "425",
                            ConcurrencyStamp = new Guid("e4afd09c-667f-4222-921e-6ef497c17d04"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "237",
                            IsActive = true,
                            Iso2 = "cm",
                            NameAr = "الكاميرون",
                            NameEn = "Cameroon"
                        },
                        new
                        {
                            Id = 89,
                            Code = "426",
                            ConcurrencyStamp = new Guid("3f86ddad-04a1-4cf0-86da-09c37b5c0aae"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "243",
                            IsActive = true,
                            Iso2 = "cd",
                            NameAr = "جمهورية الكونغو الديمقراطية",
                            NameEn = "Congo(DRC)"
                        },
                        new
                        {
                            Id = 90,
                            Code = "427",
                            ConcurrencyStamp = new Guid("5c2626de-1b22-47ce-9b69-d76f1a5bb486"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "254",
                            IsActive = true,
                            Iso2 = "ke",
                            NameAr = "كينيا",
                            NameEn = "Kenya"
                        },
                        new
                        {
                            Id = 91,
                            Code = "428",
                            ConcurrencyStamp = new Guid("2b6f59cf-bf3e-436a-b31b-c00d6056ee4e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "266",
                            IsActive = true,
                            Iso2 = "ls",
                            NameAr = "ليسوتو",
                            NameEn = "Lesotho"
                        },
                        new
                        {
                            Id = 92,
                            Code = "429",
                            ConcurrencyStamp = new Guid("d95e137a-301d-4f5a-9568-7b3030cddcbd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "231",
                            IsActive = true,
                            Iso2 = "lr",
                            NameAr = "ليبيريا",
                            NameEn = "Liberia"
                        },
                        new
                        {
                            Id = 93,
                            Code = "430",
                            ConcurrencyStamp = new Guid("64cfa7bc-06fa-4930-acfe-7dd7e66a5a03"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "223",
                            IsActive = true,
                            Iso2 = "ml",
                            NameAr = "مالي",
                            NameEn = "Mali"
                        },
                        new
                        {
                            Id = 94,
                            Code = "432",
                            ConcurrencyStamp = new Guid("e6454d28-cdac-4f04-9c86-d4ba986d6d92"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "265",
                            IsActive = true,
                            Iso2 = "mw",
                            NameAr = "ملاوي",
                            NameEn = "Malawi"
                        },
                        new
                        {
                            Id = 95,
                            Code = "433",
                            ConcurrencyStamp = new Guid("6980d8e5-2b02-446b-8f51-5ee669c1bd68"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "230",
                            IsActive = true,
                            Iso2 = "mu",
                            NameAr = "موريشيوس",
                            NameEn = "Mauritius"
                        },
                        new
                        {
                            Id = 96,
                            Code = "434",
                            ConcurrencyStamp = new Guid("0312768d-9bd5-4df7-b961-f840b5db3f0d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "258",
                            IsActive = true,
                            Iso2 = "mz",
                            NameAr = "موزمبيق",
                            NameEn = "Mozambique"
                        },
                        new
                        {
                            Id = 97,
                            Code = "435",
                            ConcurrencyStamp = new Guid("babba58a-dc53-48d1-bd95-c43c52c7eaee"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "234",
                            IsActive = true,
                            Iso2 = "ng",
                            NameAr = "نيجيريا",
                            NameEn = "Nigeria"
                        },
                        new
                        {
                            Id = 98,
                            Code = "436",
                            ConcurrencyStamp = new Guid("ad2180d6-c775-4289-92a3-6663e5bbb695"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "227",
                            IsActive = true,
                            Iso2 = "ne",
                            NameAr = "النيجر",
                            NameEn = "Niger"
                        },
                        new
                        {
                            Id = 99,
                            Code = "437",
                            ConcurrencyStamp = new Guid("dee81beb-3a4d-4ed2-90aa-14e6515f2e6d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "236",
                            IsActive = true,
                            Iso2 = "cf",
                            NameAr = "افريقيا الوسطى",
                            NameEn = "Central Africa"
                        },
                        new
                        {
                            Id = 100,
                            Code = "438",
                            ConcurrencyStamp = new Guid("615df553-2ffb-41eb-9692-24df0b268d7c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "244",
                            IsActive = true,
                            Iso2 = "ao",
                            NameAr = "انجولا",
                            NameEn = "Angola"
                        },
                        new
                        {
                            Id = 101,
                            Code = "439",
                            ConcurrencyStamp = new Guid("2efcf298-f8eb-4ed5-98d1-d6135d0bf1bc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "599",
                            IsActive = true,
                            Iso2 = "bq",
                            NameAr = "الجزر الكاريبية الهولندية",
                            NameEn = "Caribbean Netherlands"
                        },
                        new
                        {
                            Id = 102,
                            Code = "440",
                            ConcurrencyStamp = new Guid("2dff7098-7939-47c6-ab4c-350d366771d6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "240",
                            IsActive = true,
                            Iso2 = "gq",
                            NameAr = "غينيا الاستوائية",
                            NameEn = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 103,
                            Code = "441",
                            ConcurrencyStamp = new Guid("b252dbbe-d86b-436f-ad37-e8ed6cdb95ab"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "ملاجاسي",
                            NameEn = "Mlajasi"
                        },
                        new
                        {
                            Id = 104,
                            Code = "442",
                            ConcurrencyStamp = new Guid("4a0f0b96-b3c7-4d1e-99cf-0994180f232f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "239",
                            IsActive = true,
                            Iso2 = "st",
                            NameAr = "ساوتومي/برنسبى",
                            NameEn = "S? o Tomé and Pr? ncipe"
                        },
                        new
                        {
                            Id = 105,
                            Code = "443",
                            ConcurrencyStamp = new Guid("2f2ae34e-4fbb-4bd6-853e-9eea9bfc07a7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "248",
                            IsActive = true,
                            Iso2 = "sc",
                            NameAr = "جزر سيشل",
                            NameEn = "Seychelles Islands"
                        },
                        new
                        {
                            Id = 106,
                            Code = "444",
                            ConcurrencyStamp = new Guid("7bd73e7f-d04a-4042-84f4-20e226f32117"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "268",
                            IsActive = false,
                            Iso2 = "sz",
                            NameAr = "سوزيلاند",
                            NameEn = "Swaziland"
                        },
                        new
                        {
                            Id = 107,
                            Code = "449",
                            ConcurrencyStamp = new Guid("cf8685c5-408b-40e6-87c5-6d8515303f26"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "291",
                            IsActive = true,
                            Iso2 = "er",
                            NameAr = "ارتيريا",
                            NameEn = "Eritrea"
                        },
                        new
                        {
                            Id = 108,
                            Code = "453",
                            ConcurrencyStamp = new Guid("1b6df1a1-8a86-479e-810f-b1265a3431e3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "211",
                            IsActive = false,
                            Iso2 = "ss",
                            NameAr = "جمهورية جنوب السودان",
                            NameEn = "Republic of South Sudan"
                        },
                        new
                        {
                            Id = 109,
                            Code = "454",
                            ConcurrencyStamp = new Guid("660cef7f-993f-49bf-979b-e31a40898630"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "238",
                            IsActive = true,
                            Iso2 = "cv",
                            NameAr = "كاب فيرد(الراس الاخضر)",
                            NameEn = "Cape Verde"
                        },
                        new
                        {
                            Id = 110,
                            Code = "501",
                            ConcurrencyStamp = new Guid("774683f3-0764-43ca-88d0-0abc2255a94a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "34",
                            IsActive = true,
                            Iso2 = "es",
                            NameAr = "اسبانيا",
                            NameEn = "Spain"
                        },
                        new
                        {
                            Id = 111,
                            Code = "502",
                            ConcurrencyStamp = new Guid("466aa350-947b-4191-a7e1-db0c9090fd9f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "355",
                            IsActive = true,
                            Iso2 = "al",
                            NameAr = "البانيا",
                            NameEn = "Albania"
                        },
                        new
                        {
                            Id = 112,
                            Code = "503",
                            ConcurrencyStamp = new Guid("342e92f7-95bd-4bf5-b072-fad765964319"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "49",
                            IsActive = true,
                            Iso2 = "de",
                            NameAr = "المانيا",
                            NameEn = "Germany"
                        },
                        new
                        {
                            Id = 113,
                            Code = "504",
                            ConcurrencyStamp = new Guid("3f47ba54-f0e4-41f5-95e2-ccefce01ecf2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "353",
                            IsActive = true,
                            Iso2 = "ie",
                            NameAr = "ايرلندا",
                            NameEn = "Ireland"
                        },
                        new
                        {
                            Id = 114,
                            Code = "505",
                            ConcurrencyStamp = new Guid("5f20b650-3390-4c05-b707-70bcdae4ce43"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "39",
                            IsActive = true,
                            Iso2 = "it",
                            NameAr = "ايطاليا",
                            NameEn = "Italy"
                        },
                        new
                        {
                            Id = 115,
                            Code = "506",
                            ConcurrencyStamp = new Guid("ab418429-dd26-458a-84be-6b39f5d626f7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "44",
                            IsActive = true,
                            Iso2 = "gb",
                            NameAr = "المملكة المتحدة",
                            NameEn = "United Kingdom"
                        },
                        new
                        {
                            Id = 116,
                            Code = "507",
                            ConcurrencyStamp = new Guid("c8c8c110-4edf-4017-9e1c-64842bbfcceb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "351",
                            IsActive = true,
                            Iso2 = "pt",
                            NameAr = "البرتغال",
                            NameEn = "Portugal"
                        },
                        new
                        {
                            Id = 117,
                            Code = "508",
                            ConcurrencyStamp = new Guid("ff1478de-c875-4641-aa82-7b5244728a56"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "359",
                            IsActive = true,
                            Iso2 = "bg",
                            NameAr = "بلغاريا",
                            NameEn = "Bulgaria"
                        },
                        new
                        {
                            Id = 118,
                            Code = "509",
                            ConcurrencyStamp = new Guid("6218bcaf-8138-4524-a47a-80c2403ec451"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "32",
                            IsActive = true,
                            Iso2 = "be",
                            NameAr = "بلجيكا",
                            NameEn = "Belgium"
                        },
                        new
                        {
                            Id = 119,
                            Code = "510",
                            ConcurrencyStamp = new Guid("63c80026-7182-424e-a9df-a01a60abe728"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "48",
                            IsActive = true,
                            Iso2 = "pl",
                            NameAr = "بولندا",
                            NameEn = "Poland"
                        },
                        new
                        {
                            Id = 120,
                            Code = "512",
                            ConcurrencyStamp = new Guid("cd18c136-cbfd-4a52-838b-4162c77b5cf2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "45",
                            IsActive = true,
                            Iso2 = "dk",
                            NameAr = "الدانمارك",
                            NameEn = "Denmark"
                        },
                        new
                        {
                            Id = 121,
                            Code = "513",
                            ConcurrencyStamp = new Guid("7dbfe521-8864-49cb-91aa-a02849d87a39"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "40",
                            IsActive = true,
                            Iso2 = "ro",
                            NameAr = "رومانيا",
                            NameEn = "Romania"
                        },
                        new
                        {
                            Id = 122,
                            Code = "514",
                            ConcurrencyStamp = new Guid("8780d8dc-3928-4dfb-a470-8b89e5ecfc47"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "46",
                            IsActive = true,
                            Iso2 = "se",
                            NameAr = "السويد",
                            NameEn = "Sweden"
                        },
                        new
                        {
                            Id = 123,
                            Code = "515",
                            ConcurrencyStamp = new Guid("472dc984-ae6b-46a0-b1d6-6496b3a1efc7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "41",
                            IsActive = true,
                            Iso2 = "ch",
                            NameAr = "سويسرا",
                            NameEn = "Switzerland"
                        },
                        new
                        {
                            Id = 124,
                            Code = "516",
                            ConcurrencyStamp = new Guid("a8a903f1-5efa-4fe5-9f70-0e5f87004a8f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "33",
                            IsActive = true,
                            Iso2 = "fr",
                            NameAr = "فرنسا",
                            NameEn = "France"
                        },
                        new
                        {
                            Id = 125,
                            Code = "517",
                            ConcurrencyStamp = new Guid("1c6b3c5e-66f4-47a2-af06-efb4539a2ed0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "358",
                            IsActive = true,
                            Iso2 = "fi",
                            NameAr = "فنلندا",
                            NameEn = "Finland"
                        },
                        new
                        {
                            Id = 126,
                            Code = "518",
                            ConcurrencyStamp = new Guid("c652d02b-7845-4f4a-9adb-82f609aedce2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "381",
                            IsActive = true,
                            Iso2 = "rs",
                            NameAr = "صربيا",
                            NameEn = "Serbia"
                        },
                        new
                        {
                            Id = 127,
                            Code = "519",
                            ConcurrencyStamp = new Guid("1ad29801-d89c-41d3-be03-6dbef3b8ac44"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "31",
                            IsActive = true,
                            Iso2 = "nl",
                            NameAr = "هولندا",
                            NameEn = "Netherlands"
                        },
                        new
                        {
                            Id = 128,
                            Code = "521",
                            ConcurrencyStamp = new Guid("b44ceb23-323b-4e2b-8539-423aafa2d1fb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "30",
                            IsActive = true,
                            Iso2 = "gr",
                            NameAr = "اليونان",
                            NameEn = "Greece"
                        },
                        new
                        {
                            Id = 129,
                            Code = "522",
                            ConcurrencyStamp = new Guid("353abe58-fb89-4d82-99a8-02d32768150d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "376",
                            IsActive = true,
                            Iso2 = "ad",
                            NameAr = "اندورا",
                            NameEn = "Andorra"
                        },
                        new
                        {
                            Id = 130,
                            Code = "523",
                            ConcurrencyStamp = new Guid("5c26e680-8959-4ce9-958b-13e851fdb10b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "43",
                            IsActive = true,
                            Iso2 = "at",
                            NameAr = "النمسا",
                            NameEn = "Austria"
                        },
                        new
                        {
                            Id = 131,
                            Code = "524",
                            ConcurrencyStamp = new Guid("6d48a247-b831-4af7-bdb0-20dd5fc5c5d1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "382",
                            IsActive = true,
                            Iso2 = "me",
                            NameAr = "الجبل الأ سود",
                            NameEn = "Montenegro"
                        },
                        new
                        {
                            Id = 132,
                            Code = "525",
                            ConcurrencyStamp = new Guid("adc27b37-3947-4662-9852-7afc99fa312f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "36",
                            IsActive = true,
                            Iso2 = "hu",
                            NameAr = "هنغاريا",
                            NameEn = "Hungary"
                        },
                        new
                        {
                            Id = 133,
                            Code = "526",
                            ConcurrencyStamp = new Guid("35a19b24-8d88-44c8-acfe-5f8262543b60"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "354",
                            IsActive = true,
                            Iso2 = "is",
                            NameAr = "ايسلندا",
                            NameEn = "Iceland"
                        },
                        new
                        {
                            Id = 134,
                            Code = "527",
                            ConcurrencyStamp = new Guid("839db9cb-d30a-403f-8d9e-1d1d808a1adf"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "423",
                            IsActive = true,
                            Iso2 = "li",
                            NameAr = "ليختنشتين",
                            NameEn = "Liechtenstein"
                        },
                        new
                        {
                            Id = 135,
                            Code = "528",
                            ConcurrencyStamp = new Guid("0dadb402-cd2e-4f90-9a19-42b93361330f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "352",
                            IsActive = true,
                            Iso2 = "lu",
                            NameAr = "لوكسمبورغ",
                            NameEn = "Luxembourg"
                        },
                        new
                        {
                            Id = 136,
                            Code = "529",
                            ConcurrencyStamp = new Guid("0b0e46be-fe97-462d-8df7-b75b2de19004"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "356",
                            IsActive = true,
                            Iso2 = "mt",
                            NameAr = "مالطا",
                            NameEn = "Malta"
                        },
                        new
                        {
                            Id = 137,
                            Code = "530",
                            ConcurrencyStamp = new Guid("4ee25163-41f0-4b0f-942d-3f59811a01c3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "377",
                            IsActive = true,
                            Iso2 = "mc",
                            NameAr = "موناكو",
                            NameEn = "Monaco"
                        },
                        new
                        {
                            Id = 138,
                            Code = "531",
                            ConcurrencyStamp = new Guid("8b7eaf80-7023-4ecb-b59b-ffb645846347"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "47",
                            IsActive = true,
                            Iso2 = "no",
                            NameAr = "النرويج",
                            NameEn = "Norway"
                        },
                        new
                        {
                            Id = 139,
                            Code = "532",
                            ConcurrencyStamp = new Guid("8133dd6c-4a01-4602-acb2-35f2207f1bb2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "378",
                            IsActive = true,
                            Iso2 = "sm",
                            NameAr = "سان مارينو",
                            NameEn = "San Marino"
                        },
                        new
                        {
                            Id = 140,
                            Code = "533",
                            ConcurrencyStamp = new Guid("fd65abf3-23ce-47d1-b18b-478cbfaa7fd9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "39",
                            IsActive = true,
                            Iso2 = "va",
                            NameAr = "مدينة الفاتيكان",
                            NameEn = "Vatican City"
                        },
                        new
                        {
                            Id = 141,
                            Code = "534",
                            ConcurrencyStamp = new Guid("866c44a8-6ad8-45fb-9a29-07cda869d26c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "350",
                            IsActive = true,
                            Iso2 = "gi",
                            NameAr = "جبل طارق",
                            NameEn = "Gibraltar"
                        },
                        new
                        {
                            Id = 142,
                            Code = "536",
                            ConcurrencyStamp = new Guid("beebbad4-0939-4ef1-ad12-d29dfe8b4376"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "380",
                            IsActive = true,
                            Iso2 = "ua",
                            NameAr = "اوكرانيا",
                            NameEn = "Ukraine"
                        },
                        new
                        {
                            Id = 143,
                            Code = "537",
                            ConcurrencyStamp = new Guid("25a6cb43-4f66-4dde-9702-e00b56820ec6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "روسيا البيضاء",
                            NameEn = "Byelorussia"
                        },
                        new
                        {
                            Id = 144,
                            Code = "539",
                            ConcurrencyStamp = new Guid("7679ac87-d909-46db-8e1c-8a80fee8db10"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "374",
                            IsActive = true,
                            Iso2 = "am",
                            NameAr = "ارمينيا",
                            NameEn = "Armenia"
                        },
                        new
                        {
                            Id = 145,
                            Code = "540",
                            ConcurrencyStamp = new Guid("85282402-4b5f-4863-ae13-7d08b5591b07"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "373",
                            IsActive = true,
                            Iso2 = "md",
                            NameAr = "مولدافيا",
                            NameEn = "Moldova"
                        },
                        new
                        {
                            Id = 146,
                            Code = "541",
                            ConcurrencyStamp = new Guid("3e7cb8dd-d007-450c-a1b7-5e44dc3f006a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "995",
                            IsActive = true,
                            Iso2 = "ge",
                            NameAr = "جورجيا",
                            NameEn = "Georgia"
                        },
                        new
                        {
                            Id = 147,
                            Code = "542",
                            ConcurrencyStamp = new Guid("eacabd15-a421-4651-85b3-b9e63138be1b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "370",
                            IsActive = true,
                            Iso2 = "lt",
                            NameAr = "ليتوانيا",
                            NameEn = "Lithuania"
                        },
                        new
                        {
                            Id = 148,
                            Code = "543",
                            ConcurrencyStamp = new Guid("d3d1d5d6-efb4-4af1-a1ec-0ddada50392b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "372",
                            IsActive = true,
                            Iso2 = "ee",
                            NameAr = "استونيا",
                            NameEn = "Estonia"
                        },
                        new
                        {
                            Id = 149,
                            Code = "544",
                            ConcurrencyStamp = new Guid("56c32343-3047-44cc-9015-2d258aa7eb92"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "371",
                            IsActive = true,
                            Iso2 = "lv",
                            NameAr = "لاتفيا",
                            NameEn = "Latvia"
                        },
                        new
                        {
                            Id = 150,
                            Code = "545",
                            ConcurrencyStamp = new Guid("e00c9b6b-112b-470d-943d-b861b6fe0064"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "387",
                            IsActive = true,
                            Iso2 = "ba",
                            NameAr = "البوسنة والهرسك",
                            NameEn = "Bosnia / Herzegovina"
                        },
                        new
                        {
                            Id = 151,
                            Code = "546",
                            ConcurrencyStamp = new Guid("6bd2476f-55ba-4808-bfca-7833af179a5a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "385",
                            IsActive = true,
                            Iso2 = "hr",
                            NameAr = "كرواتيا",
                            NameEn = "Croatia"
                        },
                        new
                        {
                            Id = 152,
                            Code = "547",
                            ConcurrencyStamp = new Guid("2e7eb1cf-64c4-456b-b2cc-1301829c0806"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "386",
                            IsActive = true,
                            Iso2 = "si",
                            NameAr = "سلوفينيا",
                            NameEn = "Slovenia"
                        },
                        new
                        {
                            Id = 153,
                            Code = "549",
                            ConcurrencyStamp = new Guid("df082a9f-9000-4bf1-8901-41d8680cd3d7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "389",
                            IsActive = true,
                            Iso2 = "mk",
                            NameAr = "مقدونيا",
                            NameEn = "Macedonia"
                        },
                        new
                        {
                            Id = 154,
                            Code = "552",
                            ConcurrencyStamp = new Guid("40f08e42-0c11-476e-91e5-0ab522b4a225"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "420",
                            IsActive = true,
                            Iso2 = "cz",
                            NameAr = "تشيك",
                            NameEn = "Czech Republic"
                        },
                        new
                        {
                            Id = 155,
                            Code = "553",
                            ConcurrencyStamp = new Guid("857c5d6c-3240-4171-9a5f-257225a965ef"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "421",
                            IsActive = true,
                            Iso2 = "sk",
                            NameAr = "سلوفاكيا",
                            NameEn = "Slovakia"
                        },
                        new
                        {
                            Id = 156,
                            Code = "554",
                            ConcurrencyStamp = new Guid("d92f710f-6a2b-4ce1-a0b7-fe1ec4adbc1e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "298",
                            IsActive = true,
                            Iso2 = "fo",
                            NameAr = "جزر فيرو",
                            NameEn = "Faroe Islands"
                        },
                        new
                        {
                            Id = 157,
                            Code = "555",
                            ConcurrencyStamp = new Guid("0dcb6eed-f2b8-40dc-9e53-56b8300b63ff"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "33",
                            IsActive = false,
                            Iso2 = "fx",
                            NameAr = "ميتروبوليتان فرنسية",
                            NameEn = "France Metropolitan"
                        },
                        new
                        {
                            Id = 158,
                            Code = "601",
                            ConcurrencyStamp = new Guid("5a4afd94-162f-4ccc-824a-69a075c84f86"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "us",
                            NameAr = "الولايات المتحدة",
                            NameEn = "United States"
                        },
                        new
                        {
                            Id = 159,
                            Code = "602",
                            ConcurrencyStamp = new Guid("681a2af7-73ec-42fe-95f6-831bd9f8f19d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "54",
                            IsActive = true,
                            Iso2 = "ar",
                            NameAr = "الارجنتين",
                            NameEn = "Argentina"
                        },
                        new
                        {
                            Id = 160,
                            Code = "603",
                            ConcurrencyStamp = new Guid("258e931b-d723-41d3-8e6a-0ebfd71e427a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "bb",
                            NameAr = "بربادوس",
                            NameEn = "Barbados"
                        },
                        new
                        {
                            Id = 161,
                            Code = "604",
                            ConcurrencyStamp = new Guid("056569e4-6608-4644-b56d-7f8738c794a7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "55",
                            IsActive = true,
                            Iso2 = "br",
                            NameAr = "البرازيل",
                            NameEn = "Brazil"
                        },
                        new
                        {
                            Id = 162,
                            Code = "605",
                            ConcurrencyStamp = new Guid("ed588ca5-1c7a-4946-8456-dc3dda959d3b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "507",
                            IsActive = true,
                            Iso2 = "pa",
                            NameAr = "بنما",
                            NameEn = "Panama"
                        },
                        new
                        {
                            Id = 163,
                            Code = "606",
                            ConcurrencyStamp = new Guid("bd6b480f-ea50-4c6c-ae47-b661588726bd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "tt",
                            NameAr = "ترينداد وتوباجو",
                            NameEn = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 164,
                            Code = "607",
                            ConcurrencyStamp = new Guid("c2565149-2601-47fe-9a8d-6882d662c048"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "jm",
                            NameAr = "جامايكا",
                            NameEn = "Jamaica"
                        },
                        new
                        {
                            Id = 165,
                            Code = "608",
                            ConcurrencyStamp = new Guid("9f2b1552-b3c4-407f-afb1-931bafd7444f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "جوانا",
                            NameEn = "Joanna"
                        },
                        new
                        {
                            Id = 166,
                            Code = "609",
                            ConcurrencyStamp = new Guid("1f4c6bc3-a201-4e39-9ff8-0c53801c2fc2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "58",
                            IsActive = true,
                            Iso2 = "ve",
                            NameAr = "فنزويلا",
                            NameEn = "Venezuela"
                        },
                        new
                        {
                            Id = 167,
                            Code = "610",
                            ConcurrencyStamp = new Guid("10cadb04-8498-45b6-b88c-0485219c711a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "ca",
                            NameAr = "كندا",
                            NameEn = "Canada"
                        },
                        new
                        {
                            Id = 168,
                            Code = "611",
                            ConcurrencyStamp = new Guid("75780880-34dc-4523-aa6d-6ebb4d248781"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "57",
                            IsActive = true,
                            Iso2 = "co",
                            NameAr = "كولمبيا",
                            NameEn = "Columbia"
                        },
                        new
                        {
                            Id = 169,
                            Code = "612",
                            ConcurrencyStamp = new Guid("2d6ac80b-86f9-4c6b-87fc-9302eb0ea19a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "bs",
                            NameAr = "جزر البهاما",
                            NameEn = "Bahamas"
                        },
                        new
                        {
                            Id = 170,
                            Code = "613",
                            ConcurrencyStamp = new Guid("bd0a0515-9922-4b2c-b744-88ae4f82c691"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "506",
                            IsActive = true,
                            Iso2 = "cr",
                            NameAr = "كوستاريكا",
                            NameEn = "Costa Rica"
                        },
                        new
                        {
                            Id = 171,
                            Code = "614",
                            ConcurrencyStamp = new Guid("a550b36a-9820-4734-9f18-24fc572dfaeb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "53",
                            IsActive = true,
                            Iso2 = "cu",
                            NameAr = "كوبا",
                            NameEn = "Cuba"
                        },
                        new
                        {
                            Id = 172,
                            Code = "615",
                            ConcurrencyStamp = new Guid("8ba62c0c-c42b-4171-a61d-628a8c9789f3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "dm",
                            NameAr = "دومينيكا",
                            NameEn = "Dominica"
                        },
                        new
                        {
                            Id = 173,
                            Code = "616",
                            ConcurrencyStamp = new Guid("4c0f093d-c9e9-4231-99e1-5591ecaa2b83"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "do",
                            NameAr = "جمهورية دمينكان",
                            NameEn = "Republic Dominica"
                        },
                        new
                        {
                            Id = 174,
                            Code = "617",
                            ConcurrencyStamp = new Guid("ba0b9c57-f5d7-41a3-8eaf-f1276cc915c3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "503",
                            IsActive = true,
                            Iso2 = "sv",
                            NameAr = "السلفادور",
                            NameEn = "El Salvador"
                        },
                        new
                        {
                            Id = 175,
                            Code = "618",
                            ConcurrencyStamp = new Guid("c91d53d5-9faf-4b11-be00-b9976ed3ac9a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "gd",
                            NameAr = "جرانادا",
                            NameEn = "Granada"
                        },
                        new
                        {
                            Id = 176,
                            Code = "619",
                            ConcurrencyStamp = new Guid("1d3d17b2-1903-4154-8d5b-cadf3010a723"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "502",
                            IsActive = true,
                            Iso2 = "gt",
                            NameAr = "جواتيمالا",
                            NameEn = "Guatemala"
                        },
                        new
                        {
                            Id = 177,
                            Code = "620",
                            ConcurrencyStamp = new Guid("aca43199-b445-4d0e-bc3f-9967a38abb30"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "509",
                            IsActive = true,
                            Iso2 = "ht",
                            NameAr = "هايتي",
                            NameEn = "Haiti"
                        },
                        new
                        {
                            Id = 178,
                            Code = "621",
                            ConcurrencyStamp = new Guid("af67bc86-a28e-4217-ab6b-633bb2e0769f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "504",
                            IsActive = true,
                            Iso2 = "hn",
                            NameAr = "هوندوراس",
                            NameEn = "Honduras"
                        },
                        new
                        {
                            Id = 179,
                            Code = "622",
                            ConcurrencyStamp = new Guid("09097fdd-ad34-40ae-9a87-bd6af93a049e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "52",
                            IsActive = true,
                            Iso2 = "mx",
                            NameAr = "المكسيك",
                            NameEn = "Mexico"
                        },
                        new
                        {
                            Id = 180,
                            Code = "623",
                            ConcurrencyStamp = new Guid("60a05732-fbf6-4bc1-a133-6208bcd86ae2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "505",
                            IsActive = true,
                            Iso2 = "ni",
                            NameAr = "نيكاراجوا",
                            NameEn = "Nicaragua"
                        },
                        new
                        {
                            Id = 181,
                            Code = "624",
                            ConcurrencyStamp = new Guid("11d9f40a-5aa3-47ce-97ea-579b63873f41"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "lc",
                            NameAr = "سانت لوسيا",
                            NameEn = "Saint Lucia"
                        },
                        new
                        {
                            Id = 182,
                            Code = "625",
                            ConcurrencyStamp = new Guid("94e065bb-4432-4824-9919-94695fcd6f19"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "vc",
                            NameAr = "سان فينسنت",
                            NameEn = "Saint Vincent"
                        },
                        new
                        {
                            Id = 183,
                            Code = "626",
                            ConcurrencyStamp = new Guid("09d2ff74-4f54-438c-8389-f0c894a32a84"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "591",
                            IsActive = true,
                            Iso2 = "bo",
                            NameAr = "بوليفيا",
                            NameEn = "Bolivia"
                        },
                        new
                        {
                            Id = 184,
                            Code = "627",
                            ConcurrencyStamp = new Guid("5aa8f474-5f27-4f21-a6d0-47a5c54de5c5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "56",
                            IsActive = true,
                            Iso2 = "cl",
                            NameAr = "شيلي",
                            NameEn = "Chile"
                        },
                        new
                        {
                            Id = 185,
                            Code = "628",
                            ConcurrencyStamp = new Guid("15449b5b-1479-467b-9819-305226aea0eb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "593",
                            IsActive = true,
                            Iso2 = "ec",
                            NameAr = "اكوادور",
                            NameEn = "Ecuador"
                        },
                        new
                        {
                            Id = 186,
                            Code = "629",
                            ConcurrencyStamp = new Guid("dec8c576-f742-4018-b699-68d259dd6e51"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "595",
                            IsActive = true,
                            Iso2 = "py",
                            NameAr = "باراجواي",
                            NameEn = "Paraguay"
                        },
                        new
                        {
                            Id = 187,
                            Code = "630",
                            ConcurrencyStamp = new Guid("fa228d38-2efa-4dc9-a88b-29340f7fd268"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "51",
                            IsActive = true,
                            Iso2 = "pe",
                            NameAr = "بيرو",
                            NameEn = "Peru"
                        },
                        new
                        {
                            Id = 188,
                            Code = "701",
                            ConcurrencyStamp = new Guid("e0fa4131-ebc5-4b75-b0df-8bb836065e40"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "61",
                            IsActive = true,
                            Iso2 = "au",
                            NameAr = "استراليا",
                            NameEn = "Australia"
                        },
                        new
                        {
                            Id = 189,
                            Code = "702",
                            ConcurrencyStamp = new Guid("81d8d8b5-db86-45cd-8cbd-6d3c8db21d7d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "64",
                            IsActive = true,
                            Iso2 = "nz",
                            NameAr = "نيوزيلندا",
                            NameEn = "New Zealand"
                        },
                        new
                        {
                            Id = 190,
                            Code = "703",
                            ConcurrencyStamp = new Guid("682bf539-a5a6-40e2-8860-2d58de60f760"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "598",
                            IsActive = true,
                            Iso2 = "yu",
                            NameAr = "أوروغواي",
                            NameEn = "Uruguay"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArabic")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NewsCategueryId")
                        .HasColumnType("int");

                    b.Property<string>("NewsOrigin")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("NewsTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("OpenComments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("NewsCategueryId");

                    b.ToTable("News", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsCateguery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("NewsCategueries", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("f413c925-8ae1-45ab-8088-ce911b11e1c1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "غير مصنف",
                            NameEn = "Not Categuerized"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("0baa03ad-6add-4679-99c6-dc0effc69eab"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أخبار الأمير",
                            NameEn = "Prince News"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("56f0d2a0-b8c4-4ceb-9821-50f507d5cb6c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أخبار النائب",
                            NameEn = "Deputy News"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("68fdfd4a-378c-47fc-9d91-520c534bc774"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أخبار الإمارة",
                            NameEn = "Emirate News"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("CommentStageId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentStageId");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsComments", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataCateguery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OpenDataSubCategueryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("OpenDataSubCategueryId");

                    b.ToTable("OpenDataCategueries", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("b34a59aa-5e9c-47c5-8857-ada33ef61fa1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تقارير الخدمات الإلكترونية",
                            NameEn = "E-Services Reports",
                            OpenDataSubCategueryId = 2
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("c80185c4-a765-41c6-b77d-43f835a02433"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تقارير المعاملات",
                            NameEn = "Transaction Reports",
                            OpenDataSubCategueryId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("816bd0c5-baaa-4c91-8360-ac4a5e0a27ff"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "المعاملات لصفة صاحب المعاملة",
                            NameEn = "Transactions for the owner of the transaction",
                            OpenDataSubCategueryId = 2
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("b788d088-6155-4465-8fb3-397f88aaee96"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "الحصر",
                            NameEn = "Limitation",
                            OpenDataSubCategueryId = 1
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OpenDataCategueryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("OpenDataCategueryId");

                    b.ToTable("OpenDataReports", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsReplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("OpenDataRequests", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataSubCateguery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("OpenDataSubCategueries", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("b92b36d6-a3f7-4787-a332-56f4e01550d2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سنوي",
                            NameEn = "Annual"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("3a1f84d5-9cad-439a-b19f-f35880cfcbd2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "نصف سنوي",
                            NameEn = "Semi-annual"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("4956d8ff-3886-4890-816c-73a0ef976552"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "ربع سنوي",
                            NameEn = "Quarterly"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("9bfa90da-8399-4934-9525-9fe2a753deaa"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شهري",
                            NameEn = "Monthly"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.PageContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PageContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PageContent", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("0888289e-13a9-4c96-9707-300148c36705"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "عن الاماره",
                            DescriptionEn = "About us",
                            PageContentType = "AboutUs"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("4a5472df-6766-40f3-863c-c2783c6d78ad"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "القسم النسوي",
                            DescriptionEn = "Woman sections",
                            PageContentType = "WomanSection"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Poster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Posters", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("d77ba1c3-baa5-4b53-8278-d8d5330436ec"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "slider.png",
                            IsActive = true,
                            Order = 1,
                            TitleAr = "يوم بدينا",
                            TitleEn = "Day We Start"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Prison", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Prisons", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("fce7ad91-4cbd-4839-95eb-b85bab8f0487"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن الحاير",
                            NameEn = "Al-Ha'ir Prison"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("28bb2748-bb2b-4ed5-a39e-64d8368d6b86"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن الملز",
                            NameEn = "Al-Malaz Prison"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("19b5e320-ddfd-4c2d-bd0f-cf2551d4af78"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن النساء",
                            NameEn = "Women Prison"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("4271b050-4f46-4b2e-9306-738f6a48f3b9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة المجمعة",
                            NameEn = "Majma'ah Governorate Prison"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("33ffe56a-b16a-45bf-8f14-a039fb393cdb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة الزلفي",
                            NameEn = "Az Zulfi Governorate Prison"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("b86843d5-ac89-4e4b-8a14-5d88967de426"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة الدوادمي",
                            NameEn = "Dawadmi Governorate Prison"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("8d4d8224-cb59-4e64-af80-0ac940d8c0f4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة عفيف",
                            NameEn = "Afif Governorate Prison"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("ed6d6c0a-607d-40c4-be95-fbc05030cde2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة القويعية",
                            NameEn = "Al Quwaiiyah Governorate Prison"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("f1df9aa8-7ae8-48fc-be92-c9364aa4748e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة الخرج",
                            NameEn = "Al-Kharj Governorate Prison"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = new Guid("643ad67c-f156-4912-8a0c-efe7b67521a3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة حوطة بني تميم",
                            NameEn = "Howtat Bani Tamim Governorate Prison"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = new Guid("2730e0cd-5d7a-452e-bcc8-4d3e0a653ff7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة الأفلاج",
                            NameEn = "Al-Aflaj Governorate Prison"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = new Guid("3e90689b-0997-4d96-b8ca-384458373bd6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة وادي الدواسر",
                            NameEn = "Wadi ad-Dawasir Governorate Prison"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = new Guid("209bfd30-4201-46ee-a909-b8a46c30a20e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة شقراء",
                            NameEn = "Shaqra Governorate Prison"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = new Guid("ac3b9c9a-0052-4b3f-9063-4896b28c74c4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة الوافدين",
                            NameEn = "Al Wafedien Governorate Prison"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyStamp = new Guid("02531798-3eb4-4f72-966d-0ec4b62e073d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "اصلاحية الرياض",
                            NameEn = "Riyadh Reformatory"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Religions", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("7446c054-3c74-46f8-835f-09e045b9751b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مسلم",
                            NameEn = "Muslem"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StageId");

                    b.ToTable("Requests", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestAttachmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtentionAllowed")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxFileSize")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("RequestAttachmentTypes", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestElectronicBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestContent")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RequestTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestElectronicBoards", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestElectronicSummon", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestContent")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RequestTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestElectronicSummons", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestForeignersRealtyOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("BuildingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingTypeId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("ReligionId");

                    b.ToTable("RequestForeignersRealtyOwners", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestJudgmentExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DefendantTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LawsuitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LawsuitNumber")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RequesterName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RequesterNationalId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("RequesterType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefendantTypeId");

                    b.ToTable("RequestJudgmentExecutions", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestLandsInfringement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("EstimatedSpace")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("InfringerDescription")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("InfringerName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestLandsInfringements", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestMarriageCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChildrenCount")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeSide")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("JobOccupation")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestMarriageCertificates", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestNumberSequence", b =>
                {
                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.ToSqlQuery("SELECT NEXT VALUE FOR Request.RequestNumberSequence AS [Value]");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestPrisonersService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PrisonId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("PrisonId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestPrisonersServices", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestPrisonerTempRelease", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PrisonId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("PrisonId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestPrisonerTempReleases", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestStageLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("RequestId");

                    b.HasIndex("StageId");

                    b.ToTable("RequestStageLogs", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestTreatmentRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PatientNationalId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("PatientType")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestTreatmentRecommendations", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("RequestTypes", "Request");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("848fcf8d-7484-42e9-8aa0-8344c99ccd83"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "حضور زواج",
                            NameEn = "حضور زواج",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("68956b27-be6e-4ac3-9060-76816c247d92"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زيارة الوالدين والأهل",
                            NameEn = "زيارة الوالدين والأهل",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("ef993c01-d8ab-4cd3-9778-13d5d483f130"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زيارة مريض",
                            NameEn = "زيارة مريض",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("1137a38c-4ff1-4fb4-96de-8b78da055761"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تسجيل في الجامعة",
                            NameEn = "تسجيل في الجامعة",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("448d8fbb-1fea-480e-9e7d-ef40d12d3b36"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "عزاء",
                            NameEn = "عزاء",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("7f78cb01-bcde-4e80-ab13-758e3b40373b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "العلاج والتنويم",
                            NameEn = "العلاج والتنويم",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("9f21e795-4356-4076-8bf8-d565e4f91133"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إبعاد سجين لبلادة",
                            NameEn = "إبعاد سجين لبلادة",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("0b658a45-63e5-491b-ab57-7dc459695af3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إعفاء من الإبعاد",
                            NameEn = "إعفاء من الإبعاد",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("3f4f5ad4-7bc7-4c67-b231-ad933fa86e37"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إعفاء من باقي المحكومية لسجين",
                            NameEn = "إعفاء من باقي المحكومية لسجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = new Guid("7138e223-1945-4c65-bb67-c14b1b66f214"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إفراج صحي لسجين",
                            NameEn = "إفراج صحي لسجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = new Guid("d82f699c-60d6-4cb2-81c0-8cab75ff5839"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إنهاء قضايا الأحداث الاجانب",
                            NameEn = "إنهاء قضايا الأحداث الاجانب",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = new Guid("eaefc3bf-b35f-49f1-beea-d0d9eeedc29c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تثبيت سجين في سجنه",
                            NameEn = "تثبيت سجين في سجنه",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = new Guid("a4dccff2-70f6-4f58-b044-2e04baaab8e8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "ترحيل سجين",
                            NameEn = "ترحيل سجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = new Guid("16b5f856-2140-4632-bd2f-745826076b4e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زيارة خاصة لسجين",
                            NameEn = "زيارة خاصة لسجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyStamp = new Guid("4665b981-3666-490f-9450-abdf270289f8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زيارة خاصة مكتبية لسجين",
                            NameEn = "زيارة خاصة مكتبية لسجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyStamp = new Guid("77b2915c-5617-4367-b7e2-46409cacb32e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "طلب نقل سجين",
                            NameEn = "طلب نقل سجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyStamp = new Guid("bd6ad6d5-9bd1-47e2-b0ff-2bbe82717353"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "اقتراح",
                            NameEn = "اقتراح",
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyStamp = new Guid("7c460ef0-2859-42a5-8705-57e146dc7749"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شكوى",
                            NameEn = "شكوى",
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyStamp = new Guid("2c8fc6dd-78a7-486b-9a9a-ebb7d519673e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "طلب",
                            NameEn = "طلب",
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyStamp = new Guid("874bb8bb-9b14-4147-aba7-e758ccb8127c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زراعي",
                            NameEn = "زراعي",
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyStamp = new Guid("e48f6fc4-bc78-4c60-b8ed-9a3f7059008a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سكني",
                            NameEn = "سكني",
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyStamp = new Guid("8a7e7429-4904-4a70-a13b-94652ef9cebe"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تجاري",
                            NameEn = "تجاري",
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 23,
                            ConcurrencyStamp = new Guid("146ca587-b5a1-442b-878f-c13601badeb0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أملاك عامة",
                            NameEn = "أملاك عامة",
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 24,
                            ConcurrencyStamp = new Guid("e1102424-a8ff-493b-a2ef-1aabe152e0a8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "اقتراح",
                            NameEn = "اقتراح",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 25,
                            ConcurrencyStamp = new Guid("be1d5aff-f908-4e5d-8726-8a82b945020d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شكوى",
                            NameEn = "شكوى",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 26,
                            ConcurrencyStamp = new Guid("8f605c8f-d9d6-4169-869f-273b68c49342"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "طلب",
                            NameEn = "طلب",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 27,
                            ConcurrencyStamp = new Guid("094c5449-3403-4c75-8e69-c461341cedff"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودية من أجنبي",
                            NameEn = "زواج السعودية من أجنبي",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 28,
                            ConcurrencyStamp = new Guid("94de565c-95c5-44fb-a5ef-35e5ecc18996"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودي من دولة المغرب",
                            NameEn = "زواج السعودي من دولة المغرب",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 29,
                            ConcurrencyStamp = new Guid("0ac1da82-4184-49b1-a394-429f9c802b07"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودي من غير سعودية مقيمة بالمملكة",
                            NameEn = "زواج السعودي من غير سعودية مقيمة بالمملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 30,
                            ConcurrencyStamp = new Guid("b8e3b56a-d4e7-45d3-a12c-ef4083553a5e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودي من غير سعودية مولودة بالمملكة",
                            NameEn = "زواج السعودي من غير سعودية مولودة بالمملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 31,
                            ConcurrencyStamp = new Guid("f0ab5118-bf51-4339-98e7-5906d6c7b8ea"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودية من غير سعودي مقيم بالمملكة",
                            NameEn = "زواج السعودية من غير سعودي مقيم بالمملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 32,
                            ConcurrencyStamp = new Guid("18f10187-ebc6-43dd-a483-b9e1a7d545a9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودية من غير سعودي مولود بالمملكة",
                            NameEn = "زواج السعودية من غير سعودي مولود بالمملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 33,
                            ConcurrencyStamp = new Guid("9c4f2431-042b-4eea-8716-632f6ccc4dc5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودي من غير سعودية من خارج المملكة",
                            NameEn = "زواج السعودي من غير سعودية من خارج المملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 34,
                            ConcurrencyStamp = new Guid("4cbc2769-6652-4c8f-918f-9c3ef7779e63"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "العلاج النفسي",
                            NameEn = "العلاج النفسي",
                            ServiceId = 9
                        },
                        new
                        {
                            Id = 35,
                            ConcurrencyStamp = new Guid("4d51ae8b-62e0-4287-80f3-878a27d31f42"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "علاج الإدمان",
                            NameEn = "علاج الإدمان",
                            ServiceId = 9
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Roles", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("c2339621-2348-489d-aa21-caeb4af0a290"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "مدير عام النظام",
                            NameEn = "Super System Admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("e5098ba9-2fc4-4e4b-946e-49d0dd93f804"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مدير النظام",
                            NameEn = "System Admin"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("91f6d33e-dcce-4e7d-9e97-00235cc52e18"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "صلاحيات الأخبار",
                            NameEn = "News Permission"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("eeea20ed-40a1-46cd-9062-8fd309f87667"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "صلاحيات الاعدادات",
                            NameEn = "Setting Permission"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("2dd62b0e-c958-4c26-8895-62fb203b9ec6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "صلاحيات المستخدمين",
                            NameEn = "Users Permission"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("f90635c1-7a68-4766-b2ae-752adc721d3d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مراجعة الطلبات",
                            NameEn = "Request Review"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("4e788df3-6156-4484-897c-e6a0e1da1a7d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مراجعة طلبات شامل",
                            NameEn = "Shamel Request Review"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RequestLink")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SectorAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SectorEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WorkDays")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Services", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("f9662053-8c4c-4b75-9383-b9f65f1648fb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "المجلس الالكتروني",
                            DescriptionEn = "المجلس الالكتروني",
                            ImageName = "e-council.png",
                            IsActive = true,
                            IsExternal = true,
                            NameAr = "المجلس الالكتروني",
                            NameEn = "Electronic Board",
                            RequestLink = "/home/grm",
                            SectorAr = "المجلس الالكتروني",
                            SectorEn = "المجلس الالكتروني",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("a92bbf4a-4a68-45f9-83e8-6d188fb012dd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "الخروج المؤقت لسجين",
                            DescriptionEn = "الخروج المؤقت لسجين",
                            ImageName = "prisoner.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "الخروج المؤقت لسجين",
                            NameEn = "Prisoner Temp Release",
                            RequestLink = "/eservice/prisoner-temp-release",
                            SectorAr = "الخروج المؤقت لسجين",
                            SectorEn = "الخروج المؤقت لسجين",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("e582cd50-0b30-4f91-89c8-f276207972c1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "خدمات السجناء",
                            DescriptionEn = "خدمات السجناء",
                            ImageName = "prisoner.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "خدمات السجناء",
                            NameEn = "Prisoners Services",
                            RequestLink = "/eservice/prisoners-services",
                            SectorAr = "خدمات السجناء",
                            SectorEn = "خدمات السجناء",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("8e1c1a2e-1f24-4ea0-8efe-edf5043ad9d0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "الاستدعاء الإلكتروني",
                            DescriptionEn = "الاستدعاء الإلكتروني",
                            ImageName = "contract.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "الاستدعاء الإلكتروني",
                            NameEn = "Electronic Summon",
                            RequestLink = "/eservice/electronic-summon",
                            SectorAr = "الاستدعاء الإلكتروني",
                            SectorEn = "الاستدعاء الإلكتروني",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("7dab6f76-31e0-431e-aff6-08f8e3b95c4f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "التعديات على الأراضي الحكومية",
                            DescriptionEn = "التعديات على الأراضي الحكومية",
                            ImageName = "contract.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "التعديات على الأراضي الحكومية",
                            NameEn = "Infringements On Government Land",
                            RequestLink = "/eservice/lands-infringement",
                            SectorAr = "التعديات على الأراضي الحكومية",
                            SectorEn = "التعديات على الأراضي الحكومية",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("91e7a3b4-03b0-4e20-a903-b3c47f71b8be"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "انفاذ الحكم الشرعي",
                            DescriptionEn = "انفاذ الحكم الشرعي",
                            ImageName = "magnifying-glass.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "انفاذ الحكم الشرعي",
                            NameEn = "Judgment Execution",
                            RequestLink = "/eservice/judgment-execution",
                            SectorAr = "انفاذ الحكم الشرعي",
                            SectorEn = "انفاذ الحكم الشرعي",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("57b0aa22-a8e2-4191-a844-33de556d1bb8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "توثيق زواج",
                            DescriptionEn = "توثيق زواج",
                            ImageName = "couple.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "توثيق زواج",
                            NameEn = "Marriage Certificate",
                            RequestLink = "/eservice/marriage-certificate",
                            SectorAr = "توثيق زواج",
                            SectorEn = "توثيق زواج",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("eda07d0c-2250-432e-9e75-c8c1c1ca68ab"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "تملك عقار للأجانب",
                            DescriptionEn = "تملك عقار للأجانب",
                            ImageName = "magnifying-glass.svg",
                            IsActive = false,
                            IsExternal = false,
                            NameAr = "تملك عقار للأجانب",
                            NameEn = "Realty Ownership For Foreigners",
                            RequestLink = "/eservice/foreigners-realty-owner",
                            SectorAr = "تملك عقار للأجانب",
                            SectorEn = "تملك عقار للأجانب",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("6d15adc6-16e7-4fff-ba2a-61a3cbdbaab0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "طلب علاج",
                            DescriptionEn = "طلب علاج",
                            ImageName = "magnifying-glass.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "طلب علاج",
                            NameEn = "Treatment Recommendation",
                            RequestLink = "/eservice/treatment-recommendation",
                            SectorAr = "طلب علاج",
                            SectorEn = "طلب علاج",
                            WorkDays = "10"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceAudience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AudienceId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AudienceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceAudiences", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsBenefit")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceBenefits", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceConditions", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StarsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("ServiceRates", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdminUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequesterUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StageId");

                    b.ToTable("ServiceStages", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("b52c4d8c-5b27-4f71-bdb4-0522e4ab432e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release",
                            ServiceId = 2,
                            StageId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-preview-step",
                            ConcurrencyStamp = new Guid("b8a99889-a140-4c36-a96b-35ea9caeffcb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 2
                        },
                        new
                        {
                            Id = 3,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("40d50002-d3bb-4758-a9ce-e5ec1e001fa8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release",
                            ServiceId = 2,
                            StageId = 3
                        },
                        new
                        {
                            Id = 4,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("066dc2be-f4a5-42ea-878c-3299a261b35d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 4
                        },
                        new
                        {
                            Id = 5,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("b1ba4386-6e2d-4019-81ef-1ec28ca92d5b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 5
                        },
                        new
                        {
                            Id = 6,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("2ea321c5-32c2-4c74-9d5a-98e0f2b28b8e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 6
                        },
                        new
                        {
                            Id = 7,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("c455f1aa-97fa-4836-9c01-a87531e69962"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 7
                        },
                        new
                        {
                            Id = 8,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("f41e5a5c-3b21-4b78-99d0-353e9e1480fc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services",
                            ServiceId = 3,
                            StageId = 1
                        },
                        new
                        {
                            Id = 9,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-preview-step",
                            ConcurrencyStamp = new Guid("861379eb-d9a8-4b3e-8aae-154669b3c287"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 2
                        },
                        new
                        {
                            Id = 10,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("1cd32c71-0021-4519-b321-da92c3b317bb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services",
                            ServiceId = 3,
                            StageId = 3
                        },
                        new
                        {
                            Id = 11,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("99271320-3af5-4fe6-9488-60efeb59e5d2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 4
                        },
                        new
                        {
                            Id = 12,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("cfc528af-3e26-40c5-b36e-6c397ce5e144"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 5
                        },
                        new
                        {
                            Id = 13,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("f702b7c7-543c-4f8e-8f72-807ff720dcb8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 6
                        },
                        new
                        {
                            Id = 14,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("99ac751a-d38a-465a-8650-0d5b7e9d7a50"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 7
                        },
                        new
                        {
                            Id = 15,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("b4661d99-30f7-40ec-90b5-27f25b77ef37"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning",
                            ServiceId = 3,
                            StageId = 1
                        },
                        new
                        {
                            Id = 16,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-preview-step",
                            ConcurrencyStamp = new Guid("15b13057-fec8-4e86-8e60-cad306aabf3f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 2
                        },
                        new
                        {
                            Id = 17,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("62e719d4-2713-4206-90cd-3fb6fa5ac670"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning",
                            ServiceId = 3,
                            StageId = 3
                        },
                        new
                        {
                            Id = 18,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("b880072b-26fa-49a8-a5dc-207d179653b7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 4
                        },
                        new
                        {
                            Id = 19,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("cb16ed0a-5177-4a2a-9a9d-3809b96da6a7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 5
                        },
                        new
                        {
                            Id = 20,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("2416a1d6-b107-48d9-9421-b3c028664bc5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 6
                        },
                        new
                        {
                            Id = 21,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("f3c72c21-a582-461f-8571-45d912a54621"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 7
                        },
                        new
                        {
                            Id = 22,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("6f269a57-e201-4db4-afb6-8040ddc6cd92"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon",
                            ServiceId = 4,
                            StageId = 1
                        },
                        new
                        {
                            Id = 23,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-preview-step",
                            ConcurrencyStamp = new Guid("cd4a4bf5-6eb6-40bc-91d5-f1e9305ca067"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 2
                        },
                        new
                        {
                            Id = 24,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("ba5311cf-b670-4cb9-8baf-089b9eaef0ca"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon",
                            ServiceId = 4,
                            StageId = 3
                        },
                        new
                        {
                            Id = 25,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("f6551084-ba7d-4f7b-a71b-ffc2c34ca3d5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 4
                        },
                        new
                        {
                            Id = 26,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("f9111479-5738-4e35-922a-d296af0da5d2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 5
                        },
                        new
                        {
                            Id = 27,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("1e7f2348-5aef-4ae1-83ab-422699d0e3f8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 6
                        },
                        new
                        {
                            Id = 28,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("68546c0b-1c14-4c6a-aa53-92ca48897529"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 7
                        },
                        new
                        {
                            Id = 29,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("bc585f02-20fc-4718-a278-6adfdda5852c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement",
                            ServiceId = 5,
                            StageId = 1
                        },
                        new
                        {
                            Id = 30,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-preview-step",
                            ConcurrencyStamp = new Guid("f068dd81-1705-4628-97df-188c3a0f2571"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 2
                        },
                        new
                        {
                            Id = 31,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("98431d4e-fece-463f-ac76-c7385caf1dc3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement",
                            ServiceId = 5,
                            StageId = 3
                        },
                        new
                        {
                            Id = 32,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("868a8764-4eb9-45f0-8d3f-b8e96743ac9e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 4
                        },
                        new
                        {
                            Id = 33,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("8f58bd72-51d2-4bf2-9af9-1b28238ddb95"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 5
                        },
                        new
                        {
                            Id = 34,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("705bbd97-7c27-4654-817e-1c9f1a90022f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 6
                        },
                        new
                        {
                            Id = 35,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("023e1311-b0c8-4088-b0c6-33202d11c017"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 7
                        },
                        new
                        {
                            Id = 36,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("41636904-935e-4823-b448-0035c945dd90"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution",
                            ServiceId = 6,
                            StageId = 1
                        },
                        new
                        {
                            Id = 37,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-preview-step",
                            ConcurrencyStamp = new Guid("ebba7136-1a6f-493a-9168-be9d7c37f94d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 2
                        },
                        new
                        {
                            Id = 38,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("0dce775f-8333-47a5-a337-c7ddcce90675"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution",
                            ServiceId = 6,
                            StageId = 3
                        },
                        new
                        {
                            Id = 39,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("7b1c98a5-5cb8-467d-8824-ef0b35ed0e18"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 4
                        },
                        new
                        {
                            Id = 40,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("848b4e3f-d8d0-486b-af3f-17d62b372818"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 5
                        },
                        new
                        {
                            Id = 41,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("3465889d-053c-422b-bb09-11458dfb28ed"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 6
                        },
                        new
                        {
                            Id = 42,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("00dc5002-ca7d-4f87-ae2d-6dbbb3d5b868"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 7
                        },
                        new
                        {
                            Id = 43,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("4553b4a2-f60e-4fa7-a430-549ba49e433f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate",
                            ServiceId = 7,
                            StageId = 1
                        },
                        new
                        {
                            Id = 44,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-preview-step",
                            ConcurrencyStamp = new Guid("1eae34e3-eefa-4141-a492-1548fb27cb33"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 2
                        },
                        new
                        {
                            Id = 45,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("c5ade10d-41f4-4dbd-916f-d9a147db081a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate",
                            ServiceId = 7,
                            StageId = 3
                        },
                        new
                        {
                            Id = 46,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("fe00b385-7dc3-4096-a7ff-961cffc394ea"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 4
                        },
                        new
                        {
                            Id = 47,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("0f89b8d2-f247-4a73-9da7-489ede3691c4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 5
                        },
                        new
                        {
                            Id = 48,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("5120c41e-a8eb-492f-84f3-68ebc871156c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 6
                        },
                        new
                        {
                            Id = 49,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("725b65da-99e2-490a-8def-34ce5d9364da"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 7
                        },
                        new
                        {
                            Id = 50,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("f147e2e8-fad0-47eb-ba6c-af929174e35c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner",
                            ServiceId = 8,
                            StageId = 1
                        },
                        new
                        {
                            Id = 51,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-preview-step",
                            ConcurrencyStamp = new Guid("88704dbe-ab9a-4344-b769-ec64ac3d592b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 2
                        },
                        new
                        {
                            Id = 52,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("12ee985f-05fd-4e82-8e3f-e2ff9af3190a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner",
                            ServiceId = 8,
                            StageId = 3
                        },
                        new
                        {
                            Id = 53,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("e750f8b1-d4f8-4c26-a271-01412bbdc368"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 4
                        },
                        new
                        {
                            Id = 54,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("263a7d51-69b1-454a-9995-7197e7461da6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 5
                        },
                        new
                        {
                            Id = 55,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("45dd18ca-0647-43f4-87be-3ac8f70a40a5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 6
                        },
                        new
                        {
                            Id = 56,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("9e1a357e-d846-4a16-94bb-347848bc63b3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 7
                        },
                        new
                        {
                            Id = 57,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("11ab5181-75c5-4f4b-9b4a-01148a8d4fe4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation",
                            ServiceId = 9,
                            StageId = 1
                        },
                        new
                        {
                            Id = 58,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-preview-step",
                            ConcurrencyStamp = new Guid("c97d1eff-c61a-4592-842c-7c972f88dbb6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 2
                        },
                        new
                        {
                            Id = 59,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("8fd7acc2-1a44-481e-82e6-f7e73629c4c8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation",
                            ServiceId = 9,
                            StageId = 3
                        },
                        new
                        {
                            Id = 60,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("d472f1f3-0147-43ab-a4db-4df1222e0fb2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 4
                        },
                        new
                        {
                            Id = 61,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("48b90599-380d-4a52-a3b7-d4b4c949864a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 5
                        },
                        new
                        {
                            Id = 62,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("7b0844fb-1014-4c6f-ac5a-0d839c6c9aa8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 6
                        },
                        new
                        {
                            Id = 63,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("67a69c14-a5cb-4573-86e6-4c2e602f2c89"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 7
                        },
                        new
                        {
                            Id = 64,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("af17c2e6-6002-42ff-9dac-a3b9dfbd12d9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-council",
                            ServiceId = 1,
                            StageId = 1
                        },
                        new
                        {
                            Id = 65,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-preview-step",
                            ConcurrencyStamp = new Guid("0c1d9d3b-daa8-449d-b9fb-c1e4b865b277"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-council-view",
                            ServiceId = 1,
                            StageId = 2
                        },
                        new
                        {
                            Id = 66,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("41d4cb92-c8e1-4eb7-83e9-3f1a089218e2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-council",
                            ServiceId = 1,
                            StageId = 3
                        },
                        new
                        {
                            Id = 67,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("b644dd38-a884-4c52-b6e7-816b31ed951f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-council-view",
                            ServiceId = 1,
                            StageId = 4
                        },
                        new
                        {
                            Id = 68,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("9d4616ce-2c12-4bb0-a57d-6e38d6b6ae1e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-council-view",
                            ServiceId = 1,
                            StageId = 5
                        },
                        new
                        {
                            Id = 69,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("0e2da85a-187c-425c-b139-485be1ac21df"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-council-view",
                            ServiceId = 1,
                            StageId = 6
                        },
                        new
                        {
                            Id = 70,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("de0e5ada-2a7e-4303-bafa-3ad207c22f71"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-council-view",
                            ServiceId = 1,
                            StageId = 7
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServieNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSMS")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StageId");

                    b.ToTable("ServieNotifications", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("d71e5e32-45ac-49ed-8144-7f81a74d38fc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = false,
                            IsSMS = true,
                            StageId = 2
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("eed0e725-2ad0-4e58-bf45-6ee8d4393533"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = false,
                            IsSMS = true,
                            StageId = 3
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("859cb9ed-2c14-441f-8474-1e29281846c8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = false,
                            IsSMS = true,
                            StageId = 4
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("08da944d-6b18-48be-a743-0210f9c378af"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = false,
                            IsSMS = true,
                            StageId = 5
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("53a09909-8b5e-49d6-a40e-572d5d743298"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = false,
                            IsSMS = true,
                            StageId = 6
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("6afb149f-93bf-47b8-a091-5667ef73d33a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = false,
                            IsSMS = true,
                            StageId = 7
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("41593421-f3ad-4f69-8c13-666dd6732ffc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = true,
                            IsSMS = false,
                            StageId = 2
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("d1ad9ee7-f307-447a-8274-5123d6116002"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = true,
                            IsSMS = false,
                            StageId = 3
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("d7f30cac-007f-4561-a7c0-40af0f1948b6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = true,
                            IsSMS = false,
                            StageId = 4
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = new Guid("682d09ff-5c57-42b9-b26f-b3daf1d2db0b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = true,
                            IsSMS = false,
                            StageId = 5
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = new Guid("206be137-b3a8-4fed-abb2-a619ab983e44"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = true,
                            IsSMS = false,
                            StageId = 6
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = new Guid("199b2462-ef87-4de5-b4fd-b148dd6dc2b9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = true,
                            IsSMS = false,
                            StageId = 7
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServieNotificationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServieNotificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServieNotificationId");

                    b.ToTable("ServieNotificationLogs", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("81b607d9-dc10-4e1a-a3c2-4765c6e0988c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بتقديم طلبكم رقم(رقم الطلب) بنجاح وسيتم اشعاركم في حالة الرد على الطلب.",
                            ServieNotificationId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("5d2a7c6d-2fd1-4582-91e2-d1089f2a16a3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بارجاع طلبكم رقم (رقم الطلب) فضلا مراجعة الملاحظات واعادة ارسال الطلب.",
                            ServieNotificationId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("fff629c9-7e31-4d6a-9877-1fa7e05ac730"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بأن طلبكم رقم (رقم الطلب) قيد المراجعة.",
                            ServieNotificationId = 3
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("23ac8b65-7836-40bf-9bf1-c62b65e27498"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بأنه تم رفض طلبكم رقم (رقم الطلب) ويمكنكم الاطلاع على سبب الرفض من شاشة طلباتي.",
                            ServieNotificationId = 4
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("c492524d-10c4-4217-81d2-a1692de7269c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بأنه تم رفض طلبكم رقم (رقم الطلب) ويمكنكم الاطلاع على سبب الرفض من شاشة طلباتي.",
                            ServieNotificationId = 5
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("71969366-7787-4e6d-ae50-942f3ba8ee2f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بأنه تمت  الموافقة على طلبكم رقم (رقم الطلب).",
                            ServieNotificationId = 6
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("de593eb1-dd64-4955-8732-b0e98f771645"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بتقديم طلبكم رقم(رقم الطلب) بنجاح وسيتم اشعاركم في حالة الرد على الطلب.",
                            ServieNotificationId = 7
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("677c6589-bbac-4e58-8066-198403ac6777"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بارجاع طلبكم رقم (رقم الطلب) فضلا مراجعة الملاحظات واعادة ارسال الطلب.",
                            ServieNotificationId = 8
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("7e5e4e85-3627-4a8d-869b-f2cdea0c4c80"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بأن طلبكم رقم (رقم الطلب) قيد المراجعة.",
                            ServieNotificationId = 9
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = new Guid("1687be14-ec25-4020-beca-1744c7aaf0ff"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بأنه تم رفض طلبكم رقم (رقم الطلب) ويمكنكم الاطلاع على سبب الرفض من شاشة طلباتي.",
                            ServieNotificationId = 10
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = new Guid("218f4b2a-626c-415a-abc1-c7a2b9359631"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بأنه تم رفض طلبكم رقم (رقم الطلب) ويمكنكم الاطلاع على سبب الرفض من شاشة طلباتي.",
                            ServieNotificationId = 11
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = new Guid("992b76e5-feee-4c5b-aaee-e6efd9534431"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بأنه تمت  الموافقة على طلبكم رقم (رقم الطلب).",
                            ServieNotificationId = 12
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Stages", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanEdit = true,
                            ConcurrencyStamp = new Guid("554db3f3-8205-4b06-8804-8ae5e85f40e2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مسودة",
                            NameEn = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("562917bd-b751-4e9d-af86-b3433aa48b9b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "طلب جديد",
                            NameEn = "New Request"
                        },
                        new
                        {
                            Id = 3,
                            CanEdit = true,
                            ConcurrencyStamp = new Guid("22700531-cf0e-4fbd-a32e-1b69cafbedd3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "استكمال البيانات من مقدم الطلب",
                            NameEn = "Complete Data From Requester"
                        },
                        new
                        {
                            Id = 4,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("dc8f8fd0-65b5-4c73-acf7-54f844827846"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تحت الإجراء",
                            NameEn = "Under Processing"
                        },
                        new
                        {
                            Id = 5,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("fe17d651-1fbc-4f0b-baf2-df8830361c4b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "الطلب مرفوض من مدير النظام",
                            NameEn = "Request Rejected From Admin"
                        },
                        new
                        {
                            Id = 6,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("12b357d2-4640-41ef-91ad-27a731f38215"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "الطلب مرفوض",
                            NameEn = "Request Rejected"
                        },
                        new
                        {
                            Id = 7,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("b7b0f367-9522-49e6-80a4-607ac67283f8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "الطلب معتمد",
                            NameEn = "Request Approved"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.UploadedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("EntityName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Extention")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SubEntityName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("UploadedFiles", "FileManager");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FirstNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FirstNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime?>("IdentityExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<string>("Last2Factor")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LastNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("PassportId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SecondNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SecondNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ThirdNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ThirdNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("NationalityId");

                    b.ToTable("Users", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "superadmin@gmail.com",
                            FirstNameAr = "مدير",
                            FirstNameEn = "Super",
                            IsActive = true,
                            IsEmployee = true,
                            IsMale = true,
                            LastNameAr = "النظام",
                            LastNameEn = "Admin",
                            PasswordHash = new byte[] { 197, 42, 11, 95, 185, 13, 122, 39, 135, 213, 151, 3, 100, 165, 178, 91, 178, 152, 201, 42, 45, 57, 47, 2, 106, 127, 111, 104, 206, 35, 213, 106, 73, 248, 69, 207, 149, 29, 93, 191, 157, 43, 30, 233, 170, 112, 151, 2, 105, 33, 180, 0, 130, 160, 222, 49, 64, 132, 208, 13, 167, 42, 178, 150 },
                            PasswordSalt = new byte[] { 140, 73, 250, 153, 158, 171, 12, 219, 224, 128, 195, 251, 58, 57, 200, 34, 217, 176, 234, 218, 147, 67, 180, 160, 43, 183, 172, 183, 61, 44, 240, 110, 3, 167, 135, 32, 177, 187, 162, 90, 194, 124, 77, 65, 122, 135, 13, 176, 120, 14, 150, 198, 91, 19, 135, 240, 80, 112, 31, 254, 71, 12, 100, 95, 255, 154, 153, 238, 34, 13, 167, 229, 132, 237, 201, 36, 175, 227, 191, 112, 196, 100, 149, 201, 15, 107, 182, 153, 4, 245, 134, 238, 36, 39, 8, 174, 127, 39, 180, 236, 165, 247, 62, 169, 235, 1, 12, 28, 175, 204, 205, 225, 116, 99, 99, 235, 56, 233, 80, 248, 21, 9, 66, 11, 206, 254, 87, 8 },
                            PhoneNumber = "0500000000",
                            SecondNameAr = "عام",
                            SecondNameEn = "System",
                            ThirdNameAr = "النظام",
                            ThirdNameEn = "Admin",
                            TwoFactorEnabled = true,
                            UserName = "superadmin"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1989, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@yahoo.com",
                            FirstNameAr = "مدير",
                            FirstNameEn = "System",
                            IsActive = true,
                            IsEmployee = false,
                            IsMale = true,
                            LastNameAr = "النظام",
                            LastNameEn = "Admin",
                            PasswordHash = new byte[] { 197, 42, 11, 95, 185, 13, 122, 39, 135, 213, 151, 3, 100, 165, 178, 91, 178, 152, 201, 42, 45, 57, 47, 2, 106, 127, 111, 104, 206, 35, 213, 106, 73, 248, 69, 207, 149, 29, 93, 191, 157, 43, 30, 233, 170, 112, 151, 2, 105, 33, 180, 0, 130, 160, 222, 49, 64, 132, 208, 13, 167, 42, 178, 150 },
                            PasswordSalt = new byte[] { 140, 73, 250, 153, 158, 171, 12, 219, 224, 128, 195, 251, 58, 57, 200, 34, 217, 176, 234, 218, 147, 67, 180, 160, 43, 183, 172, 183, 61, 44, 240, 110, 3, 167, 135, 32, 177, 187, 162, 90, 194, 124, 77, 65, 122, 135, 13, 176, 120, 14, 150, 198, 91, 19, 135, 240, 80, 112, 31, 254, 71, 12, 100, 95, 255, 154, 153, 238, 34, 13, 167, 229, 132, 237, 201, 36, 175, 227, 191, 112, 196, 100, 149, 201, 15, 107, 182, 153, 4, 245, 134, 238, 36, 39, 8, 174, 127, 39, 180, 236, 165, 247, 62, 169, 235, 1, 12, 28, 175, 204, 205, 225, 116, 99, 99, 235, 56, 233, 80, 248, 21, 9, 66, 11, 206, 254, 87, 8 },
                            PhoneNumber = "0500000001",
                            SecondNameAr = "النظام",
                            SecondNameEn = "Admin",
                            ThirdNameAr = "النظام",
                            ThirdNameEn = "Admin",
                            TwoFactorEnabled = true,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("fc130e04-4e6f-4daa-a0ac-28789f326f24"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("7c61ab24-c02a-4a89-a24f-642ef06de14b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Auction", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedAuctions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedAuctions")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Audience", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedAudiences")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedAudiences")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.BuildingType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedBuildingTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedBuildingTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CaseType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedCaseTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedCaseTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CommentStage", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedCommentStages")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedCommentStages")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ContactUsMessage", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.ContactUsMessageType", "ContactUsMessageType")
                        .WithMany("ContactUsMessages")
                        .HasForeignKey("ContactUsMessageTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedContactUsMessages")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ContactUsMessageType");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.DefendantType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedDefendantTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedDefendantTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.EmiratesPrince", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedEmiratesPrinces")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedEmiratesPrinces")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Governorate", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedGovernorates")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedGovernorates")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MainPagePoints", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.PageContent", "PageContent")
                        .WithMany("MainPagePoints")
                        .HasForeignKey("PageContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PageContent");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MaritalStatus", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedMaritalStatuses")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedMaritalStatuses")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Nationality", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedNationalities")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedNationalities")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.News", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedNews")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedNews")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.NewsCateguery", "NewsCateguery")
                        .WithMany("News")
                        .HasForeignKey("NewsCategueryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("NewsCateguery");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsCateguery", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedNewsCategueries")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedNewsCategueries")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsComment", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.CommentStage", "CommentStage")
                        .WithMany("NewsComments")
                        .HasForeignKey("CommentStageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedNewsComments")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.News", "News")
                        .WithMany("NewsComments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CommentStage");

                    b.Navigation("ModifiedUser");

                    b.Navigation("News");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataCateguery", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedOpenDataCategueries")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedOpenDataCategueries")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.OpenDataSubCateguery", "OpenDataSubCateguery")
                        .WithMany("OpenDataCategueries")
                        .HasForeignKey("OpenDataSubCategueryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("OpenDataSubCateguery");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataReport", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedOpenDataReports")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedOpenDataReports")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.OpenDataCateguery", "OpenDataCateguery")
                        .WithMany("OpenDataReports")
                        .HasForeignKey("OpenDataCategueryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("OpenDataCateguery");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataRequest", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedOpenDataRequests")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataSubCateguery", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedOpenDataSubCategueries")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedOpenDataSubCategueries")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Poster", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedPosters")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedPosters")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Prison", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedPrisons")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedPrisons")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Religion", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedReligions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedReligions")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Request", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRequests")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRequests")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Stage", "Stage")
                        .WithMany("Requests")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestAttachmentType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRequestAttachmentTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRequestAttachmentTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("RequestAttachmentTypes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestElectronicBoard", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestElectronicBoard")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestElectronicBoard", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestElectronicBoards")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestElectronicSummon", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestElectronicSummon")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestElectronicSummon", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestElectronicSummons")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestForeignersRealtyOwner", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.BuildingType", "BuildingType")
                        .WithMany("RequestForeignersRealtyOwners")
                        .HasForeignKey("BuildingTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Governorate", "Governorate")
                        .WithMany("RequestForeignersRealtyOwners")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestForeignersRealtyOwner")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestForeignersRealtyOwner", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Religion", "Religion")
                        .WithMany("RequestForeignersRealtyOwners")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BuildingType");

                    b.Navigation("Governorate");

                    b.Navigation("Religion");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestJudgmentExecution", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.DefendantType", "DefendantType")
                        .WithMany("RequestJudgmentExecutions")
                        .HasForeignKey("DefendantTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestJudgmentExecution")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestJudgmentExecution", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DefendantType");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestLandsInfringement", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Governorate", "Governorate")
                        .WithMany("RequestLandsInfringements")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestLandsInfringement")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestLandsInfringement", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestLandsInfringements")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestMarriageCertificate", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestMarriageCertificate")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestMarriageCertificate", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.MaritalStatus", "MaritalStatus")
                        .WithMany("RequestMarriageCertificates")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestMarriageCertificates")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MaritalStatus");

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestPrisonersService", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.CaseType", "CaseType")
                        .WithMany("RequestPrisonersServices")
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestPrisonersService")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestPrisonersService", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Prison", "Prison")
                        .WithMany("RequestPrisonersServices")
                        .HasForeignKey("PrisonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestPrisonersServices")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CaseType");

                    b.Navigation("Prison");

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestPrisonerTempRelease", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.CaseType", "CaseType")
                        .WithMany("RequestPrisonerTempReleases")
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestPrisonerTempRelease")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestPrisonerTempRelease", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Prison", "Prison")
                        .WithMany("RequestPrisonerTempReleases")
                        .HasForeignKey("PrisonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestPrisonerTempReleases")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CaseType");

                    b.Navigation("Prison");

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestStageLog", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRequestStageLogs")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRequestStageLogs")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithMany("RequestStageLogs")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Stage", "Stage")
                        .WithMany("RequestStageLogs")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Request");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestTreatmentRecommendation", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestTreatmentRecommendation")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestTreatmentRecommendation", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestTreatmentRecommendations")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRequestTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRequestTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("RequestTypes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Role", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRoles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRoles")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Service", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServices")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedServices")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceAudience", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Audience", "Audience")
                        .WithMany("ServiceAudiences")
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServiceAudiences")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServiceAudiences")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("CreatedUser");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceBenefit", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServiceBenefits")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceCondition", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServiceConditions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedServiceConditions")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServiceConditions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceRate", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServiceRates")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceStage", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServiceStages")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedServiceStages")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServiceStages")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Stage", "Stage")
                        .WithMany("ServiceStages")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServieNotification", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServieNotifications")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedServieNotifications")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServieNotifications")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Stage", "Stage")
                        .WithMany("ServieNotifications")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServieNotificationLog", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServieNotificationLogs")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedServieNotificationLogs")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.ServieNotification", "ServieNotification")
                        .WithMany("ServieNotificationLogs")
                        .HasForeignKey("ServieNotificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("ServieNotification");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Stage", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedStages")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedStages")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.UploadedFile", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedUploadedFiles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedUploadedFiles")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.User", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Nationality", "Nationality")
                        .WithMany("Users")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedUserRoles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedUserRoles")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Audience", b =>
                {
                    b.Navigation("ServiceAudiences");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.BuildingType", b =>
                {
                    b.Navigation("RequestForeignersRealtyOwners");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CaseType", b =>
                {
                    b.Navigation("RequestPrisonerTempReleases");

                    b.Navigation("RequestPrisonersServices");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CommentStage", b =>
                {
                    b.Navigation("NewsComments");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ContactUsMessageType", b =>
                {
                    b.Navigation("ContactUsMessages");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.DefendantType", b =>
                {
                    b.Navigation("RequestJudgmentExecutions");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Governorate", b =>
                {
                    b.Navigation("RequestForeignersRealtyOwners");

                    b.Navigation("RequestLandsInfringements");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MaritalStatus", b =>
                {
                    b.Navigation("RequestMarriageCertificates");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Nationality", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsComments");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsCateguery", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataCateguery", b =>
                {
                    b.Navigation("OpenDataReports");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataSubCateguery", b =>
                {
                    b.Navigation("OpenDataCategueries");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.PageContent", b =>
                {
                    b.Navigation("MainPagePoints");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Prison", b =>
                {
                    b.Navigation("RequestPrisonerTempReleases");

                    b.Navigation("RequestPrisonersServices");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Religion", b =>
                {
                    b.Navigation("RequestForeignersRealtyOwners");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Request", b =>
                {
                    b.Navigation("RequestElectronicBoard");

                    b.Navigation("RequestElectronicSummon");

                    b.Navigation("RequestForeignersRealtyOwner");

                    b.Navigation("RequestJudgmentExecution");

                    b.Navigation("RequestLandsInfringement");

                    b.Navigation("RequestMarriageCertificate");

                    b.Navigation("RequestPrisonerTempRelease");

                    b.Navigation("RequestPrisonersService");

                    b.Navigation("RequestStageLogs");

                    b.Navigation("RequestTreatmentRecommendation");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestType", b =>
                {
                    b.Navigation("RequestElectronicBoards");

                    b.Navigation("RequestElectronicSummons");

                    b.Navigation("RequestLandsInfringements");

                    b.Navigation("RequestMarriageCertificates");

                    b.Navigation("RequestPrisonerTempReleases");

                    b.Navigation("RequestPrisonersServices");

                    b.Navigation("RequestTreatmentRecommendations");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Service", b =>
                {
                    b.Navigation("RequestAttachmentTypes");

                    b.Navigation("RequestTypes");

                    b.Navigation("Requests");

                    b.Navigation("ServiceAudiences");

                    b.Navigation("ServiceBenefits");

                    b.Navigation("ServiceConditions");

                    b.Navigation("ServiceStages");

                    b.Navigation("ServieNotifications");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServieNotification", b =>
                {
                    b.Navigation("ServieNotificationLogs");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Stage", b =>
                {
                    b.Navigation("RequestStageLogs");

                    b.Navigation("Requests");

                    b.Navigation("ServiceStages");

                    b.Navigation("ServieNotifications");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedAuctions");

                    b.Navigation("CreatedAudiences");

                    b.Navigation("CreatedBuildingTypes");

                    b.Navigation("CreatedCaseTypes");

                    b.Navigation("CreatedCommentStages");

                    b.Navigation("CreatedDefendantTypes");

                    b.Navigation("CreatedEmiratesPrinces");

                    b.Navigation("CreatedGovernorates");

                    b.Navigation("CreatedMaritalStatuses");

                    b.Navigation("CreatedNationalities");

                    b.Navigation("CreatedNews");

                    b.Navigation("CreatedNewsCategueries");

                    b.Navigation("CreatedOpenDataCategueries");

                    b.Navigation("CreatedOpenDataReports");

                    b.Navigation("CreatedOpenDataSubCategueries");

                    b.Navigation("CreatedPosters");

                    b.Navigation("CreatedPrisons");

                    b.Navigation("CreatedReligions");

                    b.Navigation("CreatedRequestAttachmentTypes");

                    b.Navigation("CreatedRequestStageLogs");

                    b.Navigation("CreatedRequestTypes");

                    b.Navigation("CreatedRequests");

                    b.Navigation("CreatedRoles");

                    b.Navigation("CreatedServiceAudiences");

                    b.Navigation("CreatedServiceConditions");

                    b.Navigation("CreatedServiceRates");

                    b.Navigation("CreatedServiceStages");

                    b.Navigation("CreatedServices");

                    b.Navigation("CreatedServieNotificationLogs");

                    b.Navigation("CreatedServieNotifications");

                    b.Navigation("CreatedStages");

                    b.Navigation("CreatedUploadedFiles");

                    b.Navigation("CreatedUserRoles");

                    b.Navigation("ModifiedAuctions");

                    b.Navigation("ModifiedAudiences");

                    b.Navigation("ModifiedBuildingTypes");

                    b.Navigation("ModifiedCaseTypes");

                    b.Navigation("ModifiedCommentStages");

                    b.Navigation("ModifiedContactUsMessages");

                    b.Navigation("ModifiedDefendantTypes");

                    b.Navigation("ModifiedEmiratesPrinces");

                    b.Navigation("ModifiedGovernorates");

                    b.Navigation("ModifiedMaritalStatuses");

                    b.Navigation("ModifiedNationalities");

                    b.Navigation("ModifiedNews");

                    b.Navigation("ModifiedNewsCategueries");

                    b.Navigation("ModifiedNewsComments");

                    b.Navigation("ModifiedOpenDataCategueries");

                    b.Navigation("ModifiedOpenDataReports");

                    b.Navigation("ModifiedOpenDataRequests");

                    b.Navigation("ModifiedOpenDataSubCategueries");

                    b.Navigation("ModifiedPosters");

                    b.Navigation("ModifiedPrisons");

                    b.Navigation("ModifiedReligions");

                    b.Navigation("ModifiedRequestAttachmentTypes");

                    b.Navigation("ModifiedRequestStageLogs");

                    b.Navigation("ModifiedRequestTypes");

                    b.Navigation("ModifiedRequests");

                    b.Navigation("ModifiedRoles");

                    b.Navigation("ModifiedServiceConditions");

                    b.Navigation("ModifiedServiceStages");

                    b.Navigation("ModifiedServices");

                    b.Navigation("ModifiedServieNotificationLogs");

                    b.Navigation("ModifiedServieNotifications");

                    b.Navigation("ModifiedStages");

                    b.Navigation("ModifiedUploadedFiles");

                    b.Navigation("ModifiedUserRoles");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
