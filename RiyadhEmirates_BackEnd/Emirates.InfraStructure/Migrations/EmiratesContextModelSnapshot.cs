// <auto-generated />
using System;
using Emirates.InfraStructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Emirates.InfraStructure.Migrations
{
    [DbContext(typeof(EmiratesContext))]
    partial class EmiratesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence("RequestNumberSequence", "Request")
                .StartsAt(100000L);

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Auctions", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Audience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Audiences", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("7eb31b5b-c9c2-4bc2-b014-7bbbacaf390c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مواطنين",
                            NameEn = "Citizens"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("a4dfc6bb-eb94-4033-8b9d-c3f0bfc86f57"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مقيمين",
                            NameEn = "Residents"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("91cbc88d-5d28-4628-aec4-47e93ea977cc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زائرين",
                            NameEn = "Visitors"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.BuildingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("BuildingTypes", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("c63c4c95-c70c-4a06-b10c-53994e45894f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شقة",
                            NameEn = "Apartment"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("68d65b0e-6ee4-4432-b385-1f8eafcc6426"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "فيلا",
                            NameEn = "Villa"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("3ef33436-0225-4466-804f-c98e73a4d233"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "عمارة سكنية",
                            NameEn = "Residential Building"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("e7185bb6-1e56-459a-a8a2-5f3377ac653e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مبنى تجاري",
                            NameEn = "Commercial Building"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("CaseTypes", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("94a9617f-fd44-493a-aea6-d90d3118f381"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "قضية جنائية",
                            NameEn = "Criminal Case"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CommentStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CanShowComment")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("CommentStages", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanShowComment = false,
                            ConcurrencyStamp = new Guid("d59d6709-15cb-4fc1-98dc-57b21e19a82f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "جديد",
                            NameEn = "New"
                        },
                        new
                        {
                            Id = 2,
                            CanShowComment = false,
                            ConcurrencyStamp = new Guid("f4f35013-d3e5-4306-9f5a-62f1e3617912"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "معتمد",
                            NameEn = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            CanShowComment = false,
                            ConcurrencyStamp = new Guid("5f3daece-d584-4ec8-8705-37ea6ef621c7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مرفوض",
                            NameEn = "Rejected"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ContactUsMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContactUsMessageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsReplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("ContactUsMessageTypeId");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("ContactUsMessages", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ContactUsMessageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ContactUsMessageTypes", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            NameAr = "سؤال",
                            NameEn = "Question"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            NameAr = "اقتراح",
                            NameEn = "Suggestion"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            NameAr = "طلب مساعدة",
                            NameEn = "Help"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.DefendantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("DefendantTypes", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("63e2802f-4bbe-41e8-b95d-71258d573056"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "فرد",
                            NameEn = "Individual"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("ee8ff341-9779-4e61-bd93-8e5d6f01a50f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شركة",
                            NameEn = "Company"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("a3611ee8-d3ad-4b6d-8c3d-424b7c63201b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "جهة حكومية",
                            NameEn = "Governate"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.DesignEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Evaluate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DesignEvaluations", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.EmiratesPrince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BehalfToAr")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("BehalfToEn")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("EmiratesPrinces", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("ee61e4c7-896b-4c9b-bcb7-0b9a3f390f17"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1937, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceNasir.jpg",
                            IsActive = true,
                            NameAr = "الأمير ناصر بن عبد العزيز",
                            NameEn = "Prince Naser bin Abdul-Aziz",
                            ToDate = new DateTime(1947, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("351a02d1-db33-4e64-8776-296f5dcd9ede"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1947, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceSultan.jpg",
                            IsActive = true,
                            NameAr = "الأمير سلطان  بن عبد العزيز",
                            NameEn = "Prince Sultan bin Abdul-Aziz",
                            ToDate = new DateTime(1952, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            BehalfToAr = "الأمير ​سلطان",
                            BehalfToEn = "prince Sultan bin Abdul-Aziz",
                            ConcurrencyStamp = new Guid("42e7fa4a-430a-4c39-8fa0-f358e5e24ae7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1952, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princenayef.jpg",
                            IsActive = true,
                            NameAr = "الأمير نايف بن عبد العزيز",
                            NameEn = "Prince Naif bin Abdul-Aziz",
                            ToDate = new DateTime(1952, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("77fd29ac-50ec-4965-8221-854732f4b574"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1952, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princenayef.jpg",
                            IsActive = true,
                            NameAr = "الأمير نايف بن عبد العزيز",
                            NameEn = "Prince Naif bin Abdul-Aziz",
                            ToDate = new DateTime(1955, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            BehalfToAr = "الأمير نايف",
                            BehalfToEn = "prince Naif",
                            ConcurrencyStamp = new Guid("0c57869b-b172-4575-9e87-a74aede98e92"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1954, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princesalman.jpg",
                            IsActive = true,
                            NameAr = "الملك سلمان بن عبد العزيز",
                            NameEn = "King Salman bin Abdul-Aziz",
                            ToDate = new DateTime(1955, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("005fe37f-fb2a-47e0-9bd7-ea7872c63f11"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1955, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princesalman.jpg",
                            IsActive = true,
                            NameAr = "الملك سلمان بن عبد العزيز",
                            NameEn = "King Salman bin Abdul-Aziz",
                            ToDate = new DateTime(1960, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            BehalfToAr = "الملك سلمان",
                            BehalfToEn = "king Salman",
                            ConcurrencyStamp = new Guid("fb7a91a7-f7c8-44e2-a112-e4b54a813ec4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1957, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceTurki.jpg",
                            IsActive = true,
                            NameAr = "الأمير تركي بن عبد العزيز",
                            NameEn = "Prince Turki bin Abdul-Aziz",
                            ToDate = new DateTime(1960, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("90c0766a-1d8d-4f38-bc00-8f4751371917"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1960, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceFawaz.jpg",
                            IsActive = true,
                            NameAr = "الأمير فواز بن عبد العزيز",
                            NameEn = "Prince Fawaz bin Abdul-Aziz",
                            ToDate = new DateTime(1961, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("373f6b84-5c74-430b-afb2-6f078089386c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1961, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princebadr.jpg",
                            IsActive = true,
                            NameAr = "الأمير بدر بن عبد العزيز",
                            NameEn = "Prince Badr bin Abdul-Aziz",
                            ToDate = new DateTime(1963, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = new Guid("3c0b9902-fef4-4a79-9db3-3264345a95f2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1963, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princesalman.jpg",
                            IsActive = true,
                            NameAr = "الملك سلمان بن عبد العزيز",
                            NameEn = "King Salman bin Abdul-Aziz",
                            ToDate = new DateTime(2011, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = new Guid("37d2a9ba-5e93-43cd-a98a-ece8812ae3b8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(2011, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceSatam.jpg",
                            IsActive = true,
                            NameAr = "الأمير سطام بن عبد العزيز",
                            NameEn = "Prince Sattam bin Abdul-Aziz",
                            ToDate = new DateTime(2013, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = new Guid("e65f283c-9496-4e64-85bc-d7abaec2659e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(2013, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceKhaledBandar.jpg",
                            IsActive = true,
                            NameAr = "الأمير خالد بن ​بندر بن عبد العزيز",
                            NameEn = "Prince khalid bin Bandar bin Abdul-Aziz",
                            ToDate = new DateTime(2014, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = new Guid("cc08f79a-abba-4763-a6d1-2f67be04d30a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(2014, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceTurkiBinAbdullah.jpg",
                            IsActive = true,
                            NameAr = "الأمير تركي بن عبدالله بن عبد العزيز",
                            NameEn = "Prince ​Turki bin Abdullah bin Abdul-Aziz",
                            ToDate = new DateTime(2015, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = new Guid("38badb92-3492-4b77-965f-5962b4314c05"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(2015, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceFaisalBandar.jpg",
                            IsActive = true,
                            NameAr = "الأمير فيصل بن بندر بن عبد العزيز",
                            NameEn = "Prince Faisal bin Bandar bin Abdul-Aziz"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationLink")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PortalLink")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Governorates", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("f6dfbc88-4956-4a4f-8cd4-fde3967538dd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "مدينة الرياض مقر الإمارة",
                            DescriptionEn = "Emirate of Riyadh City",
                            IsActive = true,
                            NameAr = "مدينة الرياض مقر الإمارة",
                            NameEn = "Emirate of Riyadh City"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("b4772787-ca4f-4b13-bb00-d1beb254c276"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "هي المحافظة الأولى في المملكة و يحدها من الشمال محافظة حريملاء و من الجنوب محافظة ضرما ومدينة الرياض و من الشرق مدينة الرياض و من الغرب حريملاء و محافظة ضرما وتبلغ مساحتها 2020 كلم2 و يبلغ عدد سكانها 73668 نسمة ( ثلاثة وسبعون ألفا و ستمائة وثمانية وستون ) نسمة و هي عاصمة الدولة السعودية الأولى و الثانية و يوجد بها بيوت أثرية للأسرة السعودية المالكة بنيت قديما على أنقاض مدينة حجر عاصمة اليمامة .",
                            DescriptionEn = "The first governorate in the kingdom. Al-Deri’yaa borders are Hraymlaa from the north, Derma governorate and Riyadh city from the south, Riyadh city from the east, and Hraymlaa and Derma from the west. Its area is 2020 square kilometers. Its population is 73668 people (seventy three thousand, six hundred, and sixty eight). It is the capital of the first and second Saudi state. It has archaeological houses of the Saudi governing family built on the ruins of Hajar city the capital of Al-Yamama.",
                            IsActive = true,
                            NameAr = "محافظةالدرعية",
                            NameEn = "Diriyah Governorate",
                            PhoneNumber = "0114861400",
                            PortalLink = "http://www.aldoriyah.gov.sa/"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("8d5e125d-ce51-456d-bd0e-b6868766d170"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "وتقع جنوب منطقة الرياض و يحدها من الشرق المنطقة الشرقية و من الغرب محافظة المزاحمية و محافظة الحريق و من الجنوب محافظة الأفلاج و من الشمال مدينة الرياض . و تبلغ مساحتها 19790كلم2 و يبلغ عدد سكانها 376325 نسمة و من الآثار و الأماكن التاريخية بمحافظة الخرج ـ قصر مشرف ـ بلدة اليمامة",
                            DescriptionEn = "It lies in the south of Riyadh region. Its borders are the eastern region from the east, Al-Mzahmya governorate and Al-Hareeq governorate from the west, Al-Aflaj from the south, and Riyadh from the north. Its area is 19790 square kilometers and its population is 376325 people. The historical monuments and places in it includes Musharraf palace and Al-Yamama town.",
                            IsActive = true,
                            NameAr = "محافظةالخرج",
                            NameEn = "Al-Kharj Governorate",
                            PhoneNumber = "0115483800",
                            PortalLink = "http://www.alkharj.gov.sa/"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("72854bc9-3d14-43b6-9c0d-c314ed600a4b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "ويحدها من الشمال منطقة القصيم و من الجنوب محافظة القويعية و من الغرب منطقة القصيم و محافظة عفيف ، ومن الشرق محافظة شقراء و محافظة مرات. و تبلغ مساحتها 30580كلم2 ـ و يبلغ عدد سكانها 217305 نسمة ، و من الآثار القديمة بمحافظة الدوادمى ـ قصر الملك عبد العزيز _ رحمه الله .",
                            DescriptionEn = "Its borders are Qaseem from the north, Al-Quwai’iyah governorate from the south, Qaseem and Afeef regionsfrom the west, and Shaqra governorate and Mrat village from the east. Its area is 30580 square kilometers and its population is 217305 people. It includes ancient monuments like king Abdul-Aziz palace – may Allah have mercy on him.",
                            IsActive = true,
                            NameAr = "محافظةالدوادمي",
                            NameEn = "Dawadmi Governorate",
                            PhoneNumber = "​0116421057",
                            PortalLink = "http://www.alduwadimi.gov.sa/"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("27d0dd58-a864-4426-94a2-db4fe5aba1d7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال المنطقة الشرقية و منطقة القصيم و من الجنوب محافظة ثادق ومحافظة شقراء و من الشرق محافظة رماح و من الغرب محافظة الزلفى و محافظة الغاط ، و تبلغ مساحتها 30000 كلم2 ـ و يبلغ عدد سكانها 133285 نسمة و من الأماكن التاريخية بمحافظة المجمعة قلعة قديمة تسمى _ المرقب .",
                            DescriptionEn = "Its borders are the eastern region and Qaseem from the north, Thadig and Shaqra governorates from the south, Rammah governorate from the east, and Zulfi and Al-Ghat governorates from the west. Its area is 30000 square kilometers and its population is 133285 people. It includes ancient places like an ancient castle called Al-Marqab",
                            IsActive = true,
                            NameAr = "محافظةالمجمعة",
                            NameEn = "Al Majma'ah Governorate",
                            PhoneNumber = "0164321000",
                            PortalLink = "http://www.almajmah.gov.sa/"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("b1b86c79-d165-4bb0-916b-089c10c9a007"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة الدوادمى و محافظة مرات و من الجنوب محافظة وادي الدواسر و من الشرق محافظة الحريق و محافظة المزاحمية و محافظة الأفلاج و من الغرب محافظة عفيف ، و تبلغ مساحتها 50580 كلم2 ـ و يبلغ عـدد سكانها 126161 نسمة .",
                            DescriptionEn = "It is borders are Al-Dawadmy governorate and Mrat village from the north, Wadi Al-Dawaser governorate from the south, Al-Hareeq, Al-Muzahmeya, and Al-Aflaj governorates from the east , and Affef governorate from the west. Its area is 50580 square kilometers and its population is 126161 people.",
                            IsActive = true,
                            NameAr = "محافظةالقويعية",
                            NameEn = "Al Quwaiiyah Governorate",
                            PhoneNumber = "0116520830",
                            PortalLink = "http://www.alquwayiyah.gov.sa/"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("46cfd5b8-0677-497d-930a-1e4d682140e1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة القويعية و من الجنوب منطقة نجران و من الشرق محافظة السليل و محافظة الأفلاج و من الغرب منطقة عسير ومنطقة مكة المكرمة ـ و تبلغ مساحتها 48900 كلم2 ـ و يبلغ عدد سكانها 106152 نسمة ، و من الآثار و الأماكن التاريخية في المحافظة ـ قصر الحكومة في الخماسين ـ و قصر باطوق و بهجة .",
                            DescriptionEn = "Its borders are Al-Quway’iah governorate from the north, Najran governorate from the south, Saleel and Al-Aflaj governorates from the east, and Aseer and Mecca from the west. Its area is 48900 square kilometers and its population is 106152 people. It includes historical monuments and places like Al-Khamaseen government palace and Batook and Bahga palace.",
                            IsActive = true,
                            NameAr = "محافظة وادي الدواسر",
                            NameEn = "Wadi ad-Dawasir Governorate",
                            PhoneNumber = "0117840292",
                            PortalLink = "http://www.wadiaddawasir.gov.sa/"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("5975a7a2-11f4-4b4e-bf30-fb091d661ff7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة الخرج و محافظة حوطة بنى تميم ومن الجنوب محافظة السليل و من الشرق المنطقة الشرقية و من الغرب محافظة وادي الدواسر و محافظة القويعية و تبلغ مساحتها 54120كم2 و يبلغ عدد سكانها حسب تعداد 1431هـ ـ 68201 نسمة ، و من الآثار و الأماكن التاريخية بالمحافظة ـ جبل التوباد ـ و قصر سلمى .",
                            DescriptionEn = "Its borders are Al-Kharj and Hotat Bani Tameem governorates from the north, Al-Saleel governorate from the south, the eastern region from the east, and Wadi Al-Dawaser and Al-Quway’iyah governorate from the west. Its area is 54120 square kilometers and its population is 68201 people according to 1431 census. It includes historical monuments and places like Tupad mountain and Salma palace.",
                            IsActive = true,
                            NameAr = "محافظةالأفلاج",
                            NameEn = "Al-Aflaj Governorate",
                            PhoneNumber = "0116820144",
                            PortalLink = "http://www.alaflaj.gov.sa/"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("e3e254a2-90e8-45bd-b040-67c435762151"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال و الغرب منطقة القصيم و من الجنوب محافظة الغاط ومن الشرق محافظة المجمعة و تبلغ مساحتها 5540 كلم 2 و يبلغ عدد سكانها 69294 نسمة .",
                            DescriptionEn = "borders are Qaseem region from the north and the west, Al-Ghat governorate from the south, and Al-Majma’ah governorate from the east. Its area is 5540 square kilometers and its population is 69294 people.",
                            IsActive = true,
                            NameAr = "محافظةالزلفي",
                            NameEn = "Az Zulfi Governorate",
                            PhoneNumber = "0164222222",
                            PortalLink = "http://www.alzulfi.gov.sa/"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = new Guid("b3a2f615-38b1-4d29-84a2-58700c3c86ea"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة الغاط و من الجنوب محافظة مرات و من الشرق محافظة المجمعة و محافظة ثادق ومن الغرب محافظة الدوادمى ـ و تبلغ مساحتها 4110 كلم2 ـ و يبلغ عدد سكانها 40541 نسمة .",
                            DescriptionEn = "Its borders are Al-Ghat governorate from the north, Mrat village from the south, Al-Majma’ah and Thadeq governorates from the east, and Al-Dawadmy governorate from the west. Its area is 4110 square kilometers and its population is 40541 people.",
                            IsActive = true,
                            NameAr = "محافظة شـقراء",
                            NameEn = "Shaqra Governorate",
                            PhoneNumber = "0116222225",
                            PortalLink = "http://www.shaqra.gov.sa/"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = new Guid("22b0f654-6c59-49b2-a5b9-22dbe79f0ff2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "ويحدها من الشمال محافظة الخرج و محافظة الحريق و من الجنوب محافظة الأفلاج و من الشرق محافظة الخرج و الأفلاج و من الغرب محافظة الحريق ، و تبلغ مساحتها 7350كلم2 ـ و يبلغ عدد سكانها 43300 نسمة ، و يوجد بمركز الحلوة التابع لمحافظة حوطة بنى تميم قلعة الإمام تركي .",
                            DescriptionEn = "Its borders are Al-Kharj and Al-Hareeq governorates from the north, Al-Aflaj governorate from the south, Al-Kharj and Al-Aflaj governorates from the east, and Al-Hareeq governorate from the west. Its area is 7350 square kilometers and its population is 43300 people. In Al-Helwa village following Hotat Bani Tameem governorate, there is Imam Turki castle.",
                            IsActive = true,
                            NameAr = "محافظة حوطة بني تميم",
                            NameEn = "Howtat Bani Tamim Governorate",
                            PhoneNumber = "0115550624",
                            PortalLink = "http://www.alhotah.gov.sa/"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = new Guid("938b9e2b-1606-4180-a550-1c6421a49ae4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "ويحدها من الشمال منطقة القصيم و من الجنوب منطقة مكة المكرمة و من الشرق محافظة القويعية و محافظة الدوادمى و من الغرب منطقة المدينة المنورة ـ و تبلغ مساحتها 26810 كلم2 ويبلغ عدد سكانها 77978 نسمة .",
                            DescriptionEn = "Its borders are Al-Qaseem region from the north, Mecca region from the south, Al-Quway’iya  and Al-Dawadmygovernorates from the east, and Medina region from the west. Its area is 26810 square kilometers and its population is 77978 people.",
                            IsActive = true,
                            NameAr = "محافظة عفيـف",
                            NameEn = "Afif Governorate",
                            PhoneNumber = "0117221474",
                            PortalLink = "http://www.afif.gov.sa/"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = new Guid("dafeb866-8cfd-4cfb-b1f7-77c0fd893b56"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة الأفلاج و من الجنوب منطقة نجران و من الشرق المنطقة الشرقية و من الغرب محافظة وادي الدواسر و تبلغ مساحتها 42420كلم2 ـ و يبلغ عدد سكانها 36383 نسمة .",
                            DescriptionEn = "Its borders are Al-Aflaj governorate from the north, Najran region from the south, the eastern region from the east, and Wadi Al-Dawaser governorate from the west. Its area is 42420 square kilometers and its population is 36383 people. It includes historical monuments like Al-Faw famous village.",
                            IsActive = true,
                            NameAr = "محافظةالسليل",
                            NameEn = "As Sulayyil Governorate",
                            PhoneNumber = "0117821965",
                            PortalLink = "http://www.alsulayyl.gov.sa/"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = new Guid("f8b45316-15fb-4374-bcd0-dff97abfe899"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "يحدها من الشمال محافظة الدرعية و محافظة حريملاء ومن الجنوب محافظة المزاحمية و من الشرق مدينة الرياض و محافظة الدرعية ومن الغرب محافظة مرات ـ و تبلغ مساحتها 2060 كلم2 ـ و يبلغ عدد سكانها 24429 نسمة .",
                            DescriptionEn = "Its borders are Deri’yah and Hraymla governorates from the north, Al-Muzahmeya governorate from the south, Riyadh city and Deri’yah governorate from the east, and Mrat village from the west. Its area is 2060 square kilometers and its population is 24429 people.",
                            IsActive = true,
                            NameAr = "محافظة ضـرمـا",
                            NameEn = "Dhurma Governorate",
                            PhoneNumber = "0115221204",
                            PortalLink = "http://www.duruma.gov.sa/"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyStamp = new Guid("320669bc-95b4-4175-bd13-3bc56ba013d7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة ضرما و من الجنوب محافظة الحريق و من الشرق مدينة الرياض و محافظة الخرج و من الغرب محافظة القويعية و وتبلغ مساحتها 3580 كلم2 ـ و يبلغ عدد سكانها 39865 نسمة .",
                            DescriptionEn = "Its borders are Dharma governorate from the north, Al-Hareeq governorate from the south, Riyadh city and Al-Kharj governorate from the east, and Al-Quway’iyah governorate from the west. Its area is 3580 square kilometers and its population is 39865 people.",
                            IsActive = true,
                            NameAr = "محافظةالمزاحمية",
                            NameEn = "Al-Muzahmiya Governorate",
                            PhoneNumber = "0115230485",
                            PortalLink = "http://www.almuzahmiyah.gov.sa/"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyStamp = new Guid("1be4f67b-8255-401b-8071-f9eb88dcf822"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "يحـدها من الشمال المنطقة الشرقية و من الجنوب مدينة الرياض و من الشرق المنطقة الشرقية و من الغرب محافظة المجمعة و محافظة ثادق ومحافظة حريملاء ـ و تبلغ مساحتها 15900 كلم2 ـ و يبلغ عدد سكانها 28055 نسمة .",
                            DescriptionEn = "Its borders are the eastern region from the north, Riyadh city from the south, the eastern region from the east, and Majma’ah, Thadig, and Hraymla governorates from the west. Its area is 15900 square kilometers and its population is 28055 people.",
                            IsActive = true,
                            NameAr = "محافظة رمـاح",
                            NameEn = "Rumah Governorate",
                            PhoneNumber = "0115521166",
                            PortalLink = "http://www.rumah.gov.sa/"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyStamp = new Guid("1e079b0c-2289-47b0-8d43-d17bbaa5ada4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = " و يحدها من الشمال محافظة المجمعة و من الجنوب محافظة حريملاء و من الشرق محافظة حريملاء و من الغرب محافظة شقراء و محافظة مرات ـ و تبلغ مساحتها 5600 كلم2 ـ و يبلغ عدد سكانها 17165 نسمة .",
                            DescriptionEn = "Its borders are Al-Majma’ah governorate from the north, Hraymla governorate from the south, Hraymla governorate from the east, and Shaqra governorate and Mrat village from the west. Its area is 5600 square kilometers and its population is 17165 people.",
                            IsActive = true,
                            NameAr = "محافظة ثـادق",
                            NameEn = "Thadiq Governorate",
                            PhoneNumber = "0164439670",
                            PortalLink = "http://www.thadiq.gov.sa/"
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyStamp = new Guid("6d1eba42-7935-441b-9429-adbd521d9d0e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة رماح و محافظة ثادق و من الجنوب محافظة الدرعية و محافظة ضرما و من الشرق مدينة الرياض و محافظة رماح و من الغرب محافظة ثادق ـ وتبلغ مساحتها 1480 كلم2 ـ و يبلغ عدد سكانها 15324 نسمة ، و من الآثار التاريخية بمحافظة حريملاء ـ منزل الإمام محمد بن عبد الوهاب ـ و جامع القراشة و جبل القطار .",
                            DescriptionEn = "Its borders are Rmah and Thadig governorates from the north, Diri’yah and Dharma governorates from the south, Riyadh city and Rmah governorate from the east, and Thadig governorate from the west. Its area is 1480 square kilometers and its population is 15324 people. It includes historical monuments like Imam Muhammad bin Abdul-Wahab house, Al-Quarasha mosque, and Al-Qetar mountain.",
                            IsActive = true,
                            NameAr = "محافظة حـريملاء",
                            NameEn = "Huraymila Governorate",
                            PhoneNumber = "0115260540",
                            PortalLink = "http://www.huraymila.gov.sa/"
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyStamp = new Guid("ee887fe7-e02e-44ab-aca7-652f3aa70aa3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة المزاحمية و محافظة الخرج و من الجنوب محافظة حوطة بنى تميم و محافظة االأفلاج و من الشرق محافظة الخرج و محافظة حوطة بنى تميم و من الغرب محافظة القويعية و تبلغ مساحتها 6790كلم2 ـ و يبلغ عدد سكانها 14750 نسمة .",
                            DescriptionEn = "Its borders are Al-Muzahmeya and Al-Kharj governorates from the north, Hotat Bani Tammem and Al-Aflaj governorates from the south, Al-Kharj and Hotat Bani Tamaam governorates from the east, and Al-Quway’iyah governorate from the west. Its area is 6790 square kilometers and its population is 14750 people.",
                            IsActive = true,
                            NameAr = "محافظةالحريق",
                            NameEn = "Al Hariq Governorate",
                            PhoneNumber = "0115370449",
                            PortalLink = "http://www.alhariq.gov.sa/"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyStamp = new Guid("91c07890-1cfa-4fd3-b1cf-75f08cca4a38"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = " و يحدها من الشمال محافظة الزلفى و من الجنوب محافظة شقراء و من الشرق محافظة المجمعة و من الغرب منطقة القصيم ـ و تبلغ مساحتها 2690 كلم2 .",
                            DescriptionEn = "Its borders are Al-Zulfi governorate from the north, Shaqra governorate from the south, Al-Majma’ah governorate from the east, and Qaseem region from the west. Its area is 2690 square kilometers.",
                            IsActive = true,
                            NameAr = "محافظةالغـاط",
                            NameEn = "Al Ghat Governorate",
                            PhoneNumber = "0164421011",
                            PortalLink = "http://www.alghat.gov.sa/"
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyStamp = new Guid("284b6903-86a8-4c13-8c4e-cfb355f2c5ce"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "تقع في منطقة الرياض إلى الشمال الغربي من مدينة الرياض بين دائرة عرض 40 - 25 درجة شمالاً وبين خط طول 45 - 45 درجة شرقاً تبعد عن مدينة الرياض : 143 كم تقريباً ، مساحتها الجغرافية حسب النطاق الإداري ( 90×100 كم) .\r\n                                  يحد مرات من الجنوب محافظتا القويعية وضرما ، ومن الشمال محافظة شقراء ومن الشرق محافظتا ثادق وحريملاء ، ومن الغرب محافظة الدوادمي",
                            DescriptionEn = "It is located in the Riyadh region, to the northwest of the\r\n                                  city of Riyadh, between latitude 40-25 degrees north and longitude 45-45 degrees east. It is approximately 143 km away from the city of Riyadh. Its geographical area is according to the administrative range (90 x 100 km)\r\n                                  Murat is bordered on the south by the governorates of Al-Quway'iyah and Darma, on the north by Shaqra governorate, on the east by the governorates of Thadiq and Huraymila, and on the west by Al-Dawadmi governorate",
                            IsActive = true,
                            NameAr = "محافظة مرات",
                            NameEn = "Marat Governorate",
                            PhoneNumber = "0116231175"
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyStamp = new Guid("475bb08f-6100-45ff-b9d8-d00c001befc8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = " يبلغ عدد سكان محافظة الدلم 80000 نسمة , ومن المعالم والاثار بمحافظة الدلم غار الامام تركي - موقعة الدلم عام 1320 هـ - سوق الدلم (المسحب) -جبل ابو ولد- غابة الضاحي - برج وسور الدلم - آثار وعيون خفس دغرة - منتزة وثيلان - آثار الفريع بزميقة .",
                            DescriptionEn = " The population of Ad Dilam Governorate is 80,000 people. Among the monuments and monuments in Ad Dilam Governorate are the Ghar of Imam Turki - the Battle of Ad Dilam in 1320 AH - the Ad Dilam Market (Al-Mashab) – Jabal Abu Walad – Al Dhahi Forest – Tower and Walls of Dulm – Ruins and Oyoun Khafs Dagra – Park and Thaylan – the ruins of Al-Fari’ Bzmika.",
                            IsActive = true,
                            NameAr = "محافظة الدلم",
                            NameEn = "Ad-Dilam Governorate",
                            PhoneNumber = "0115416115"
                        },
                        new
                        {
                            Id = 23,
                            ConcurrencyStamp = new Guid("1afbc0c8-87f1-4ad5-adf8-d7e25142b711"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = " تقع غرب مدينة الرياض ويحدها من الشمال محافظة المزاحمية ومن الجنوب محافظة وادي الدواسر ومن الشرق محافظة الحريق ومن الغرب محافظة القويعية ومن الجنوب الشرقي محافظة حوطة بني تميم ومحافظة الافلاج وتبلغ مساحتها 40 الف كلم2 تقريباً - ويبلغ عدد سكانها40 الف نسمة تقريباً ومن المعالم بمحافظة الرين (جبل دساس - جبال الحصاة - جبل بتران - جبال عريقية - وادي الرين - وادي الركا - وادي السرة - وادي العمق - هضبة الموزر)",
                            DescriptionEn = " It is located west of the city of Riyadh and is bordered to the north by Al-Muzahimiyah Governorate, to the south by Wadi Al-Dawasir Governorate, to the east by Al-Hariq Governorate, to the west by Al-Quway’iyah Governorate, to the southeast by Hotat Bani Tamim Governorate and Al-Aflaj Governorate, with an area of ​​approximately 40,000 km2 and a population of approximately 40,000 people. Dasas - Al-Hassa Mountains - Betran Mountain - Areqi Mountains - Wadi Al-Rain - Wadi Al-Raka - Wadi Al-Surra - Wadi Al-Amq - Al-Mozer Plateau)",
                            IsActive = true,
                            NameAr = "محافظة الرين",
                            NameEn = "Rayn Governorate",
                            PhoneNumber = "0116590355"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MainPagePoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PageContentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PageContentId");

                    b.ToTable("MainPagePoints", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("MaritalStatuses", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("f9034b21-8567-496e-a4a3-240d42a1c9a5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أعزب",
                            NameEn = "Single"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("4b2ebcd5-14fb-4a0f-894b-f9f7fd5df540"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "متزوج",
                            NameEn = "Married"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("6d9fc9b8-0ce0-47cb-892d-c7fbc4987d11"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مطلق",
                            NameEn = "Divorced"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("3145b551-a128-4ab4-b015-176cc6e0e2a8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أرمل",
                            NameEn = "Widower"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("DialCode")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Iso2")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Nationalities", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "101",
                            ConcurrencyStamp = new Guid("26e06a48-3d21-423c-8c19-af188436210f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "971",
                            IsActive = true,
                            Iso2 = "ae",
                            NameAr = "الامارات العربية",
                            NameEn = "Arab Emirates"
                        },
                        new
                        {
                            Id = 2,
                            Code = "102",
                            ConcurrencyStamp = new Guid("4525f4e7-122a-487e-b9ac-4bcd83ea1b05"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "962",
                            IsActive = true,
                            Iso2 = "jo",
                            NameAr = "الاردن",
                            NameEn = "Jordan"
                        },
                        new
                        {
                            Id = 3,
                            Code = "103",
                            ConcurrencyStamp = new Guid("343b11d1-49a1-4d87-8b74-24166f8fba82"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "973",
                            IsActive = true,
                            Iso2 = "bh",
                            NameAr = "البحرين",
                            NameEn = "Bahrain"
                        },
                        new
                        {
                            Id = 4,
                            Code = "104",
                            ConcurrencyStamp = new Guid("93662622-1eaa-4f15-aebf-b04e63b59d09"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "963",
                            IsActive = true,
                            Iso2 = "sy",
                            NameAr = "سوريا",
                            NameEn = "Syria"
                        },
                        new
                        {
                            Id = 5,
                            Code = "105",
                            ConcurrencyStamp = new Guid("77e1ac56-85ad-4f11-b502-774db378cdd4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "964",
                            IsActive = true,
                            Iso2 = "iq",
                            NameAr = "العراق",
                            NameEn = "Iraq"
                        },
                        new
                        {
                            Id = 6,
                            Code = "106",
                            ConcurrencyStamp = new Guid("4e014cf2-eae4-45c0-9815-022a4536cdd2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "968",
                            IsActive = true,
                            Iso2 = "om",
                            NameAr = "عمان",
                            NameEn = "Oman"
                        },
                        new
                        {
                            Id = 7,
                            Code = "107",
                            ConcurrencyStamp = new Guid("762b2538-797c-48f1-a4ac-4ab07465e10d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "970",
                            IsActive = true,
                            Iso2 = "ps",
                            NameAr = "فلسطين",
                            NameEn = "Palestine"
                        },
                        new
                        {
                            Id = 8,
                            Code = "108",
                            ConcurrencyStamp = new Guid("ddf8b026-192a-4a76-b6d8-9761a702d707"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "974",
                            IsActive = true,
                            Iso2 = "qa",
                            NameAr = "قطر",
                            NameEn = "Qatar"
                        },
                        new
                        {
                            Id = 9,
                            Code = "109",
                            ConcurrencyStamp = new Guid("b3cdefea-78fd-4594-9aa8-b425f24899e5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "965",
                            IsActive = true,
                            Iso2 = "kw",
                            NameAr = "الكويت",
                            NameEn = "Kuwait"
                        },
                        new
                        {
                            Id = 10,
                            Code = "110",
                            ConcurrencyStamp = new Guid("31c66391-5450-437d-b8b2-0ba2d9f41a6d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "961",
                            IsActive = true,
                            Iso2 = "lb",
                            NameAr = "لبنان",
                            NameEn = "Lebanon"
                        },
                        new
                        {
                            Id = 11,
                            Code = "111",
                            ConcurrencyStamp = new Guid("4d961661-44c5-4a3e-978f-781ed8d7418b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "967",
                            IsActive = true,
                            Iso2 = "ye",
                            NameAr = "اليمن",
                            NameEn = "Yemen"
                        },
                        new
                        {
                            Id = 12,
                            Code = "113",
                            ConcurrencyStamp = new Guid("d6b80734-c404-4d57-8463-57856a490028"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "966",
                            IsActive = true,
                            Iso2 = "sa",
                            NameAr = "العربية السعودية",
                            NameEn = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 13,
                            Code = "201",
                            ConcurrencyStamp = new Guid("35e33875-6609-4774-bc0f-0340e5ae5913"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "216",
                            IsActive = true,
                            Iso2 = "tn",
                            NameAr = "تونس",
                            NameEn = "Tunisia"
                        },
                        new
                        {
                            Id = 14,
                            Code = "202",
                            ConcurrencyStamp = new Guid("5a0108c6-7dde-4b9a-885a-1810181dad0d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "213",
                            IsActive = true,
                            Iso2 = "dz",
                            NameAr = "الجزائر",
                            NameEn = "Algeria"
                        },
                        new
                        {
                            Id = 15,
                            Code = "203",
                            ConcurrencyStamp = new Guid("a5dec2ab-814f-422d-96b2-9e7d3f6eaafb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "253",
                            IsActive = true,
                            Iso2 = "dj",
                            NameAr = "جيبوتى",
                            NameEn = "Djibouti"
                        },
                        new
                        {
                            Id = 16,
                            Code = "204",
                            ConcurrencyStamp = new Guid("677f5a62-346a-47ab-83cd-7131eea20d92"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "249",
                            IsActive = true,
                            Iso2 = "sd",
                            NameAr = "السودان",
                            NameEn = "Sudan"
                        },
                        new
                        {
                            Id = 17,
                            Code = "205",
                            ConcurrencyStamp = new Guid("add7e573-b551-4329-b9e1-d9984ec7a0bf"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "252",
                            IsActive = true,
                            Iso2 = "so",
                            NameAr = "الصومال",
                            NameEn = "Somalia"
                        },
                        new
                        {
                            Id = 18,
                            Code = "206",
                            ConcurrencyStamp = new Guid("1be4611d-59d9-4db7-8162-00f9f1f1b54a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "218",
                            IsActive = true,
                            Iso2 = "ly",
                            NameAr = "ليبيا",
                            NameEn = "Libya"
                        },
                        new
                        {
                            Id = 19,
                            Code = "207",
                            ConcurrencyStamp = new Guid("45b79a60-a786-41cd-a656-59964e49a28f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "20",
                            IsActive = true,
                            Iso2 = "eg",
                            NameAr = "مصر",
                            NameEn = "Egypt"
                        },
                        new
                        {
                            Id = 20,
                            Code = "208",
                            ConcurrencyStamp = new Guid("708df894-9981-4156-9848-88808d424853"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "212",
                            IsActive = true,
                            Iso2 = "ma",
                            NameAr = "المغرب",
                            NameEn = "Morocco"
                        },
                        new
                        {
                            Id = 21,
                            Code = "209",
                            ConcurrencyStamp = new Guid("5f0a98a0-2f26-46e8-9bf8-7ac9591a150b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "222",
                            IsActive = true,
                            Iso2 = "mr",
                            NameAr = "موريتانيا",
                            NameEn = "Mauritania"
                        },
                        new
                        {
                            Id = 22,
                            Code = "301",
                            ConcurrencyStamp = new Guid("6ed97ac4-0ef8-495f-8de5-87de9ea6a2fe"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "93",
                            IsActive = true,
                            Iso2 = "af",
                            NameAr = "افغانستان",
                            NameEn = "Afghanistan"
                        },
                        new
                        {
                            Id = 23,
                            Code = "302",
                            ConcurrencyStamp = new Guid("e865525d-001b-4677-905f-8a14d8eade78"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "62",
                            IsActive = true,
                            Iso2 = "id",
                            NameAr = "اندونيسيا",
                            NameEn = "Indonesia"
                        },
                        new
                        {
                            Id = 24,
                            Code = "303",
                            ConcurrencyStamp = new Guid("4fcf6020-3cb2-4925-a1f7-43be863c69f0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "98",
                            IsActive = true,
                            Iso2 = "ir",
                            NameAr = "ايران",
                            NameEn = "Iran"
                        },
                        new
                        {
                            Id = 25,
                            Code = "304",
                            ConcurrencyStamp = new Guid("a55db2c2-1559-42a7-bbae-eff2c2dbdd15"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "92",
                            IsActive = true,
                            Iso2 = "pk",
                            NameAr = "باكستان",
                            NameEn = "Pakistan"
                        },
                        new
                        {
                            Id = 26,
                            Code = "305",
                            ConcurrencyStamp = new Guid("af97cdfc-e966-41f4-af3f-c2e583cddda5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "880",
                            IsActive = true,
                            Iso2 = "bd",
                            NameAr = "بنجلاديش",
                            NameEn = "Bangladesh"
                        },
                        new
                        {
                            Id = 27,
                            Code = "306",
                            ConcurrencyStamp = new Guid("cc45715b-da3b-4886-b343-f18fe340299a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "673",
                            IsActive = true,
                            Iso2 = "bn",
                            NameAr = "بروني",
                            NameEn = "Brunei"
                        },
                        new
                        {
                            Id = 28,
                            Code = "307",
                            ConcurrencyStamp = new Guid("fc37ba66-a1ea-4ebe-8b5a-b8408f7bce28"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "95",
                            IsActive = true,
                            Iso2 = "mm",
                            NameAr = "جمهورية ميانمار",
                            NameEn = "Myanmar"
                        },
                        new
                        {
                            Id = 29,
                            Code = "308",
                            ConcurrencyStamp = new Guid("554cdcfe-c72e-46f0-8a8b-b94acf17ec7a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "66",
                            IsActive = true,
                            Iso2 = "th",
                            NameAr = "تايلند",
                            NameEn = "Thailand"
                        },
                        new
                        {
                            Id = 30,
                            Code = "309",
                            ConcurrencyStamp = new Guid("03c6f2ed-1a04-47ad-bba0-6de47497d52a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "90",
                            IsActive = true,
                            Iso2 = "tr",
                            NameAr = "تركيا",
                            NameEn = "Turkey"
                        },
                        new
                        {
                            Id = 31,
                            Code = "310",
                            ConcurrencyStamp = new Guid("a9da7514-b715-4aa5-8fc3-8e047a967ee2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "960",
                            IsActive = true,
                            Iso2 = "mv",
                            NameAr = "جزر مالديف",
                            NameEn = "Maldives"
                        },
                        new
                        {
                            Id = 32,
                            Code = "311",
                            ConcurrencyStamp = new Guid("60b58843-9a5c-4785-9eff-7681d7d63093"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "7",
                            IsActive = true,
                            Iso2 = "ru",
                            NameAr = "روسيا الاتحادية",
                            NameEn = "Russia"
                        },
                        new
                        {
                            Id = 33,
                            Code = "312",
                            ConcurrencyStamp = new Guid("6118cbf5-f5f9-483f-a8d1-6980abbfc3ec"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "65",
                            IsActive = true,
                            Iso2 = "sg",
                            NameAr = "سنغافورة",
                            NameEn = "Singapore"
                        },
                        new
                        {
                            Id = 34,
                            Code = "313",
                            ConcurrencyStamp = new Guid("c08cb09f-b64b-44f0-a67b-7f4dcca56656"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "94",
                            IsActive = true,
                            Iso2 = "lk",
                            NameAr = "سري لنكا",
                            NameEn = "Sri Lanka"
                        },
                        new
                        {
                            Id = 35,
                            Code = "315",
                            ConcurrencyStamp = new Guid("bce8366f-a98c-4b32-8c6c-a6d410eb32a9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "63",
                            IsActive = true,
                            Iso2 = "ph",
                            NameAr = "الفلبين",
                            NameEn = "Philippines"
                        },
                        new
                        {
                            Id = 36,
                            Code = "316",
                            ConcurrencyStamp = new Guid("0a96952d-96eb-47d1-b172-f2ef97f0afe2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "84",
                            IsActive = true,
                            Iso2 = "vn",
                            NameAr = "فيتنام",
                            NameEn = "Vietnam"
                        },
                        new
                        {
                            Id = 37,
                            Code = "317",
                            ConcurrencyStamp = new Guid("c2569e9d-c6c9-41c4-b640-0ce5f12257a7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "855",
                            IsActive = true,
                            Iso2 = "kh",
                            NameAr = "كمبوديا",
                            NameEn = "Cambodia"
                        },
                        new
                        {
                            Id = 38,
                            Code = "318",
                            ConcurrencyStamp = new Guid("20989331-ea88-4505-8401-2d601cab148c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "82",
                            IsActive = true,
                            Iso2 = "kr",
                            NameAr = "كوريا الجنوبية",
                            NameEn = "South Korea"
                        },
                        new
                        {
                            Id = 39,
                            Code = "319",
                            ConcurrencyStamp = new Guid("bbfe251e-9791-4419-a018-6773ff2c41f9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "60",
                            IsActive = true,
                            Iso2 = "my",
                            NameAr = "ماليزيا",
                            NameEn = "Malaysia"
                        },
                        new
                        {
                            Id = 40,
                            Code = "320",
                            ConcurrencyStamp = new Guid("b6cb1a2e-516e-496a-aa45-6c1357c09ae2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "977",
                            IsActive = true,
                            Iso2 = "np",
                            NameAr = "نيبال",
                            NameEn = "Nepal"
                        },
                        new
                        {
                            Id = 41,
                            Code = "321",
                            ConcurrencyStamp = new Guid("ee0cf656-9ca4-44d5-81c0-bd667dc36c35"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "91",
                            IsActive = true,
                            Iso2 = "in",
                            NameAr = "الهند",
                            NameEn = "India"
                        },
                        new
                        {
                            Id = 42,
                            Code = "322",
                            ConcurrencyStamp = new Guid("b24ac970-8cf3-46d8-bd70-537eabbde02f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "852",
                            IsActive = true,
                            Iso2 = "hk",
                            NameAr = "هونج كونج",
                            NameEn = "Hong Kong"
                        },
                        new
                        {
                            Id = 43,
                            Code = "323",
                            ConcurrencyStamp = new Guid("d2ada94a-5057-4c69-96b5-5fcb9c2b4a68"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "81",
                            IsActive = true,
                            Iso2 = "jp",
                            NameAr = "اليابان",
                            NameEn = "Japan"
                        },
                        new
                        {
                            Id = 44,
                            Code = "324",
                            ConcurrencyStamp = new Guid("c45c2e22-4a30-4c1a-832c-e98281ab79ed"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "975",
                            IsActive = true,
                            Iso2 = "bt",
                            NameAr = "بهوتان",
                            NameEn = "Bhutan"
                        },
                        new
                        {
                            Id = 45,
                            Code = "325",
                            ConcurrencyStamp = new Guid("37563d97-7d53-4ced-9008-8fd45df52f1f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "86",
                            IsActive = true,
                            Iso2 = "cn",
                            NameAr = "الصين الشعبية",
                            NameEn = "China"
                        },
                        new
                        {
                            Id = 46,
                            Code = "326",
                            ConcurrencyStamp = new Guid("94cded20-9510-4e64-a50b-7655cf662f2a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "357",
                            IsActive = true,
                            Iso2 = "cy",
                            NameAr = "قبرص",
                            NameEn = "Cyprus"
                        },
                        new
                        {
                            Id = 47,
                            Code = "328",
                            ConcurrencyStamp = new Guid("19074fcc-51ca-4fb5-9f70-bd6773720bd9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "850",
                            IsActive = true,
                            Iso2 = "kp",
                            NameAr = "كوريا الشمالية",
                            NameEn = "North Korea"
                        },
                        new
                        {
                            Id = 48,
                            Code = "329",
                            ConcurrencyStamp = new Guid("1983c643-eb86-40ec-b8f5-e2c5a4867e65"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "856",
                            IsActive = true,
                            Iso2 = "la",
                            NameAr = "لاوس",
                            NameEn = "Laos"
                        },
                        new
                        {
                            Id = 49,
                            Code = "330",
                            ConcurrencyStamp = new Guid("efb36fca-2693-4e47-8ac7-bd083597ab4d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "976",
                            IsActive = true,
                            Iso2 = "mn",
                            NameAr = "منغوليا",
                            NameEn = "Mongolia"
                        },
                        new
                        {
                            Id = 50,
                            Code = "331",
                            ConcurrencyStamp = new Guid("2848e32c-8b94-4359-818f-9aa9653ca572"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "853",
                            IsActive = true,
                            Iso2 = "mo",
                            NameAr = "ماكاو",
                            NameEn = "Macao"
                        },
                        new
                        {
                            Id = 51,
                            Code = "332",
                            ConcurrencyStamp = new Guid("16461d04-0433-4f5b-a1dc-7f6f657edebf"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "تركستان",
                            NameEn = "Turkistan"
                        },
                        new
                        {
                            Id = 52,
                            Code = "335",
                            ConcurrencyStamp = new Guid("4b9a5a5b-8dc0-424e-82ef-a9f7568262ce"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "القبائل النازحة",
                            NameEn = "Tribes Emigrated"
                        },
                        new
                        {
                            Id = 53,
                            Code = "336",
                            ConcurrencyStamp = new Guid("224fa731-0953-4144-9357-c7cf5d6a6ebb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "7",
                            IsActive = true,
                            Iso2 = "kz",
                            NameAr = "كازاخستان",
                            NameEn = "Kazakhstan"
                        },
                        new
                        {
                            Id = 54,
                            Code = "337",
                            ConcurrencyStamp = new Guid("75d540e1-a498-44da-8212-8da875e9fabe"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "998",
                            IsActive = true,
                            Iso2 = "uz",
                            NameAr = "ازبكستان",
                            NameEn = "Uzbekistan"
                        },
                        new
                        {
                            Id = 55,
                            Code = "338",
                            ConcurrencyStamp = new Guid("6f12f973-b432-4640-8ffc-d6a39c6a70e7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "993",
                            IsActive = true,
                            Iso2 = "tm",
                            NameAr = "تركمانستان",
                            NameEn = "Turkmenistan"
                        },
                        new
                        {
                            Id = 56,
                            Code = "339",
                            ConcurrencyStamp = new Guid("f6b1963c-2892-409f-8521-aa8df165ab0d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "992",
                            IsActive = true,
                            Iso2 = "tj",
                            NameAr = "طاجكستان",
                            NameEn = "Tajikistan"
                        },
                        new
                        {
                            Id = 57,
                            Code = "340",
                            ConcurrencyStamp = new Guid("d381d16c-ff10-4660-b27c-0c30c7a4a756"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "996",
                            IsActive = false,
                            Iso2 = "kg",
                            NameAr = "قرغيزستان",
                            NameEn = "kyrgyzstan"
                        },
                        new
                        {
                            Id = 58,
                            Code = "343",
                            ConcurrencyStamp = new Guid("99eb1fd7-3e75-45f8-bcef-d18a83aaef69"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "994",
                            IsActive = true,
                            Iso2 = "az",
                            NameAr = "اذربيجان",
                            NameEn = "Azerbaijan"
                        },
                        new
                        {
                            Id = 59,
                            Code = "344",
                            ConcurrencyStamp = new Guid("bb0bcc0a-6f59-431c-b304-c78c79529e69"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "الشاشان",
                            NameEn = "Chechnya"
                        },
                        new
                        {
                            Id = 60,
                            Code = "345",
                            ConcurrencyStamp = new Guid("dc1f056e-73b7-429e-9058-55c3309eb3fb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "872",
                            IsActive = false,
                            Iso2 = "da",
                            NameAr = "داغستان",
                            NameEn = "Dagestan"
                        },
                        new
                        {
                            Id = 61,
                            Code = "346",
                            ConcurrencyStamp = new Guid("21b54672-90cd-46b4-8dcf-70e99a96294e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "انقوش",
                            NameEn = "Anquosh"
                        },
                        new
                        {
                            Id = 62,
                            Code = "347",
                            ConcurrencyStamp = new Guid("a118ef5a-d12c-4251-bdea-f0cacb73c6a4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "7",
                            IsActive = false,
                            Iso2 = "ta",
                            NameAr = "تتارستان",
                            NameEn = "Tatarstan"
                        },
                        new
                        {
                            Id = 63,
                            Code = "349",
                            ConcurrencyStamp = new Guid("e0ff215d-5aac-4d9a-9cf2-779eeeca90df"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "670",
                            IsActive = false,
                            Iso2 = "tp",
                            NameAr = "تيمور الشرقية",
                            NameEn = "East Timor"
                        },
                        new
                        {
                            Id = 64,
                            Code = "401",
                            ConcurrencyStamp = new Guid("5de066e7-2421-42b1-a9b4-79d52c94eb89"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "251",
                            IsActive = true,
                            Iso2 = "et",
                            NameAr = "اثيوبيا",
                            NameEn = "Ethiopia"
                        },
                        new
                        {
                            Id = 65,
                            Code = "402",
                            ConcurrencyStamp = new Guid("1b3d67cd-fff4-4444-81d2-d994ec3fc805"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "256",
                            IsActive = true,
                            Iso2 = "ug",
                            NameAr = "اوغندة",
                            NameEn = "Uganda"
                        },
                        new
                        {
                            Id = 66,
                            Code = "403",
                            ConcurrencyStamp = new Guid("f2eaed01-18ea-4bab-b19e-fff91fa51722"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "267",
                            IsActive = true,
                            Iso2 = "bw",
                            NameAr = "بوتسوانا",
                            NameEn = "Botswana"
                        },
                        new
                        {
                            Id = 67,
                            Code = "404",
                            ConcurrencyStamp = new Guid("b97a439c-e26f-48b5-815d-56c5478cf4de"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "257",
                            IsActive = true,
                            Iso2 = "bi",
                            NameAr = "بورندي",
                            NameEn = "Burundi"
                        },
                        new
                        {
                            Id = 68,
                            Code = "405",
                            ConcurrencyStamp = new Guid("d08f827b-16c3-4546-bcf2-6c2297d08474"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "235",
                            IsActive = true,
                            Iso2 = "td",
                            NameAr = "تشاد",
                            NameEn = "Chad"
                        },
                        new
                        {
                            Id = 69,
                            Code = "406",
                            ConcurrencyStamp = new Guid("17f28e93-ee58-4409-8864-9597b9b63bfe"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "255",
                            IsActive = true,
                            Iso2 = "tz",
                            NameAr = "تنزانيا",
                            NameEn = "Tanzania"
                        },
                        new
                        {
                            Id = 70,
                            Code = "407",
                            ConcurrencyStamp = new Guid("8a55ab68-0ee5-4ba8-86be-455dc5aef4b4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "228",
                            IsActive = true,
                            Iso2 = "tg",
                            NameAr = "توجو",
                            NameEn = "Togo"
                        },
                        new
                        {
                            Id = 71,
                            Code = "408",
                            ConcurrencyStamp = new Guid("dc407f55-e1b4-45b7-b901-b406c136ef4a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "241",
                            IsActive = true,
                            Iso2 = "ga",
                            NameAr = "جابون",
                            NameEn = "Answer"
                        },
                        new
                        {
                            Id = 72,
                            Code = "409",
                            ConcurrencyStamp = new Guid("f692ff37-e55f-43cb-bdfb-48fa9604c0af"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "220",
                            IsActive = true,
                            Iso2 = "gm",
                            NameAr = "غامبيا",
                            NameEn = "Gambia"
                        },
                        new
                        {
                            Id = 73,
                            Code = "410",
                            ConcurrencyStamp = new Guid("88224b7a-e194-4103-b108-da7d8e902c87"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "269",
                            IsActive = true,
                            Iso2 = "km",
                            NameAr = "جزر القمر",
                            NameEn = "Comoros"
                        },
                        new
                        {
                            Id = 74,
                            Code = "411",
                            ConcurrencyStamp = new Guid("0b0228fc-df6b-4e8a-81a0-5bacf88e4e31"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "27",
                            IsActive = true,
                            Iso2 = "za",
                            NameAr = "جنوب افريقيا",
                            NameEn = "South Africa"
                        },
                        new
                        {
                            Id = 75,
                            Code = "412",
                            ConcurrencyStamp = new Guid("f8e7130e-cc76-405b-a7e6-10ed5bf88358"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "264",
                            IsActive = true,
                            Iso2 = "na",
                            NameAr = "ناميبيا",
                            NameEn = "Namibia"
                        },
                        new
                        {
                            Id = 76,
                            Code = "413",
                            ConcurrencyStamp = new Guid("aacfc391-11b6-44f0-9a8c-53e56e096ff5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "229",
                            IsActive = true,
                            Iso2 = "bj",
                            NameAr = "بنين",
                            NameEn = "Benin"
                        },
                        new
                        {
                            Id = 77,
                            Code = "414",
                            ConcurrencyStamp = new Guid("cf2ec7b3-c37e-4865-98d3-2b352c7bb2f4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "250",
                            IsActive = true,
                            Iso2 = "rw",
                            NameAr = "رواندا",
                            NameEn = "Rwanda"
                        },
                        new
                        {
                            Id = 78,
                            Code = "415",
                            ConcurrencyStamp = new Guid("a92f63de-235a-411c-a79e-48ebe2b35c06"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "263",
                            IsActive = true,
                            Iso2 = "zw",
                            NameAr = "زمبابوي",
                            NameEn = "Zimbabwe"
                        },
                        new
                        {
                            Id = 79,
                            Code = "416",
                            ConcurrencyStamp = new Guid("fdd932ff-75a2-4390-b18f-962d840d5536"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "243",
                            IsActive = false,
                            Iso2 = "zr",
                            NameAr = "زائير",
                            NameEn = "Zaire"
                        },
                        new
                        {
                            Id = 80,
                            Code = "417",
                            ConcurrencyStamp = new Guid("fe2f010b-a6e4-4d35-bcf1-a67a418dd342"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "260",
                            IsActive = true,
                            Iso2 = "zm",
                            NameAr = "زامبيا",
                            NameEn = "Zambia"
                        },
                        new
                        {
                            Id = 81,
                            Code = "418",
                            ConcurrencyStamp = new Guid("6a520b32-2cf1-4113-a4fc-9976887d355e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "225",
                            IsActive = false,
                            Iso2 = "ci",
                            NameAr = "ساحل العاج",
                            NameEn = "Ivory Coast"
                        },
                        new
                        {
                            Id = 82,
                            Code = "419",
                            ConcurrencyStamp = new Guid("9939cbda-178b-4fdb-9694-a175035bf961"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Iso2 = "sn  221",
                            NameAr = "السنغال",
                            NameEn = "Senegal"
                        },
                        new
                        {
                            Id = 83,
                            Code = "420",
                            ConcurrencyStamp = new Guid("548be4a6-2a8b-4203-854e-868c695ed8e9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "232",
                            IsActive = true,
                            Iso2 = "sl",
                            NameAr = "سيراليون",
                            NameEn = "Sierra Leone"
                        },
                        new
                        {
                            Id = 84,
                            Code = "421",
                            ConcurrencyStamp = new Guid("7cbd9cc4-bf49-4561-87a3-8c7c8c24474f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "233",
                            IsActive = true,
                            Iso2 = "gh",
                            NameAr = "غانا",
                            NameEn = "Ghana"
                        },
                        new
                        {
                            Id = 85,
                            Code = "422",
                            ConcurrencyStamp = new Guid("1b50096f-46af-4f92-bba5-4ecee8f5af7f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "224",
                            IsActive = true,
                            Iso2 = "gn",
                            NameAr = "غينيا",
                            NameEn = "Guinea"
                        },
                        new
                        {
                            Id = 86,
                            Code = "423",
                            ConcurrencyStamp = new Guid("ad916715-1275-4bbd-a322-0ca3b2969ec7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "245",
                            IsActive = true,
                            Iso2 = "gw",
                            NameAr = "غينيابيساو",
                            NameEn = "Guinea Bissau"
                        },
                        new
                        {
                            Id = 87,
                            Code = "424",
                            ConcurrencyStamp = new Guid("fd5ec09a-acb5-4fe3-9a34-16838491fd09"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "226",
                            IsActive = true,
                            Iso2 = "bf",
                            NameAr = "بوركينافاسو",
                            NameEn = "Burkina Faso"
                        },
                        new
                        {
                            Id = 88,
                            Code = "425",
                            ConcurrencyStamp = new Guid("39cb248b-8c36-4271-b44d-31122308d49e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "237",
                            IsActive = true,
                            Iso2 = "cm",
                            NameAr = "الكاميرون",
                            NameEn = "Cameroon"
                        },
                        new
                        {
                            Id = 89,
                            Code = "426",
                            ConcurrencyStamp = new Guid("649fcece-066d-47f1-9259-e6bcb1a728e1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "243",
                            IsActive = true,
                            Iso2 = "cd",
                            NameAr = "جمهورية الكونغو الديمقراطية",
                            NameEn = "Congo(DRC)"
                        },
                        new
                        {
                            Id = 90,
                            Code = "427",
                            ConcurrencyStamp = new Guid("72aaba8a-7270-4b37-ba93-7b81f1caa167"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "254",
                            IsActive = true,
                            Iso2 = "ke",
                            NameAr = "كينيا",
                            NameEn = "Kenya"
                        },
                        new
                        {
                            Id = 91,
                            Code = "428",
                            ConcurrencyStamp = new Guid("d65f3199-d001-45fb-932f-f50dac68021c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "266",
                            IsActive = true,
                            Iso2 = "ls",
                            NameAr = "ليسوتو",
                            NameEn = "Lesotho"
                        },
                        new
                        {
                            Id = 92,
                            Code = "429",
                            ConcurrencyStamp = new Guid("f9baaeb3-2ce9-42bd-96ce-18d5ba4c7252"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "231",
                            IsActive = true,
                            Iso2 = "lr",
                            NameAr = "ليبيريا",
                            NameEn = "Liberia"
                        },
                        new
                        {
                            Id = 93,
                            Code = "430",
                            ConcurrencyStamp = new Guid("e320b610-ec1b-4f55-96e9-d11adeab1a05"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "223",
                            IsActive = true,
                            Iso2 = "ml",
                            NameAr = "مالي",
                            NameEn = "Mali"
                        },
                        new
                        {
                            Id = 94,
                            Code = "432",
                            ConcurrencyStamp = new Guid("24eb29d8-7409-4a8c-85b9-cd0cf3a0c09c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "265",
                            IsActive = true,
                            Iso2 = "mw",
                            NameAr = "ملاوي",
                            NameEn = "Malawi"
                        },
                        new
                        {
                            Id = 95,
                            Code = "433",
                            ConcurrencyStamp = new Guid("37d5304d-9abb-4bee-baa9-0c4b2e295108"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "230",
                            IsActive = true,
                            Iso2 = "mu",
                            NameAr = "موريشيوس",
                            NameEn = "Mauritius"
                        },
                        new
                        {
                            Id = 96,
                            Code = "434",
                            ConcurrencyStamp = new Guid("10cf1e57-a1b0-45ae-a8a0-75e3d7077405"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "258",
                            IsActive = true,
                            Iso2 = "mz",
                            NameAr = "موزمبيق",
                            NameEn = "Mozambique"
                        },
                        new
                        {
                            Id = 97,
                            Code = "435",
                            ConcurrencyStamp = new Guid("9cec5df3-55a8-4a87-94d9-a87d34b6d2d9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "234",
                            IsActive = true,
                            Iso2 = "ng",
                            NameAr = "نيجيريا",
                            NameEn = "Nigeria"
                        },
                        new
                        {
                            Id = 98,
                            Code = "436",
                            ConcurrencyStamp = new Guid("d05e1d2a-15e3-4329-a53d-7b12775fb5ae"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "227",
                            IsActive = true,
                            Iso2 = "ne",
                            NameAr = "النيجر",
                            NameEn = "Niger"
                        },
                        new
                        {
                            Id = 99,
                            Code = "437",
                            ConcurrencyStamp = new Guid("ebd782cf-c2e1-47b4-91a4-58251271321b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "236",
                            IsActive = true,
                            Iso2 = "cf",
                            NameAr = "افريقيا الوسطى",
                            NameEn = "Central Africa"
                        },
                        new
                        {
                            Id = 100,
                            Code = "438",
                            ConcurrencyStamp = new Guid("dde3021d-e465-463a-a49b-3d071de5d897"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "244",
                            IsActive = true,
                            Iso2 = "ao",
                            NameAr = "انجولا",
                            NameEn = "Angola"
                        },
                        new
                        {
                            Id = 101,
                            Code = "439",
                            ConcurrencyStamp = new Guid("04724914-c405-4def-a2e0-22c26466c21b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "599",
                            IsActive = true,
                            Iso2 = "bq",
                            NameAr = "الجزر الكاريبية الهولندية",
                            NameEn = "Caribbean Netherlands"
                        },
                        new
                        {
                            Id = 102,
                            Code = "440",
                            ConcurrencyStamp = new Guid("58295c3d-b8cc-4958-b8fb-fd3af13e8b02"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "240",
                            IsActive = true,
                            Iso2 = "gq",
                            NameAr = "غينيا الاستوائية",
                            NameEn = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 103,
                            Code = "441",
                            ConcurrencyStamp = new Guid("351d56df-4b04-43a2-a058-b2766eed3773"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "ملاجاسي",
                            NameEn = "Mlajasi"
                        },
                        new
                        {
                            Id = 104,
                            Code = "442",
                            ConcurrencyStamp = new Guid("9479c727-24a5-4b9d-94b6-6903d508faf6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "239",
                            IsActive = true,
                            Iso2 = "st",
                            NameAr = "ساوتومي/برنسبى",
                            NameEn = "S? o Tomé and Pr? ncipe"
                        },
                        new
                        {
                            Id = 105,
                            Code = "443",
                            ConcurrencyStamp = new Guid("f019d81c-f54f-4258-bca9-13a714ea4a3e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "248",
                            IsActive = true,
                            Iso2 = "sc",
                            NameAr = "جزر سيشل",
                            NameEn = "Seychelles Islands"
                        },
                        new
                        {
                            Id = 106,
                            Code = "444",
                            ConcurrencyStamp = new Guid("41fabb3e-2389-43bb-9098-0ea61390a26d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "268",
                            IsActive = false,
                            Iso2 = "sz",
                            NameAr = "سوزيلاند",
                            NameEn = "Swaziland"
                        },
                        new
                        {
                            Id = 107,
                            Code = "449",
                            ConcurrencyStamp = new Guid("3b54243f-8167-4ec0-85d3-a092f8c21a10"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "291",
                            IsActive = true,
                            Iso2 = "er",
                            NameAr = "ارتيريا",
                            NameEn = "Eritrea"
                        },
                        new
                        {
                            Id = 108,
                            Code = "453",
                            ConcurrencyStamp = new Guid("24b87706-eb93-407b-ab34-5266d53121aa"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "211",
                            IsActive = false,
                            Iso2 = "ss",
                            NameAr = "جمهورية جنوب السودان",
                            NameEn = "Republic of South Sudan"
                        },
                        new
                        {
                            Id = 109,
                            Code = "454",
                            ConcurrencyStamp = new Guid("b732d3de-e86e-4ae9-b481-205fb0d3ff88"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "238",
                            IsActive = true,
                            Iso2 = "cv",
                            NameAr = "كاب فيرد(الراس الاخضر)",
                            NameEn = "Cape Verde"
                        },
                        new
                        {
                            Id = 110,
                            Code = "501",
                            ConcurrencyStamp = new Guid("c4e388a5-e947-4b4c-9a6f-ecf27307c92e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "34",
                            IsActive = true,
                            Iso2 = "es",
                            NameAr = "اسبانيا",
                            NameEn = "Spain"
                        },
                        new
                        {
                            Id = 111,
                            Code = "502",
                            ConcurrencyStamp = new Guid("bfbcdd86-82ad-4ac4-8889-2d1d2fe608a7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "355",
                            IsActive = true,
                            Iso2 = "al",
                            NameAr = "البانيا",
                            NameEn = "Albania"
                        },
                        new
                        {
                            Id = 112,
                            Code = "503",
                            ConcurrencyStamp = new Guid("f02c1dbc-b76a-450a-8542-d27baf54b23f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "49",
                            IsActive = true,
                            Iso2 = "de",
                            NameAr = "المانيا",
                            NameEn = "Germany"
                        },
                        new
                        {
                            Id = 113,
                            Code = "504",
                            ConcurrencyStamp = new Guid("018eada9-562d-42fd-945f-947935cd3a9b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "353",
                            IsActive = true,
                            Iso2 = "ie",
                            NameAr = "ايرلندا",
                            NameEn = "Ireland"
                        },
                        new
                        {
                            Id = 114,
                            Code = "505",
                            ConcurrencyStamp = new Guid("472a320b-96ad-4bc5-b5ee-60004a1571e1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "39",
                            IsActive = true,
                            Iso2 = "it",
                            NameAr = "ايطاليا",
                            NameEn = "Italy"
                        },
                        new
                        {
                            Id = 115,
                            Code = "506",
                            ConcurrencyStamp = new Guid("68df4cb5-1fbe-4e86-8275-8c489225a507"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "44",
                            IsActive = true,
                            Iso2 = "gb",
                            NameAr = "المملكة المتحدة",
                            NameEn = "United Kingdom"
                        },
                        new
                        {
                            Id = 116,
                            Code = "507",
                            ConcurrencyStamp = new Guid("7627274c-a852-494a-84b3-5018668e312b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "351",
                            IsActive = true,
                            Iso2 = "pt",
                            NameAr = "البرتغال",
                            NameEn = "Portugal"
                        },
                        new
                        {
                            Id = 117,
                            Code = "508",
                            ConcurrencyStamp = new Guid("6a81f545-4a7a-4e2c-8f33-fa1354ae88e5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "359",
                            IsActive = true,
                            Iso2 = "bg",
                            NameAr = "بلغاريا",
                            NameEn = "Bulgaria"
                        },
                        new
                        {
                            Id = 118,
                            Code = "509",
                            ConcurrencyStamp = new Guid("0cfe63c1-560b-40ad-a9fa-af29fc16badd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "32",
                            IsActive = true,
                            Iso2 = "be",
                            NameAr = "بلجيكا",
                            NameEn = "Belgium"
                        },
                        new
                        {
                            Id = 119,
                            Code = "510",
                            ConcurrencyStamp = new Guid("21958181-f021-444c-a5c0-5ee253c6bee0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "48",
                            IsActive = true,
                            Iso2 = "pl",
                            NameAr = "بولندا",
                            NameEn = "Poland"
                        },
                        new
                        {
                            Id = 120,
                            Code = "512",
                            ConcurrencyStamp = new Guid("6cf64697-495a-43b5-9eb9-8bcea0acfa2e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "45",
                            IsActive = true,
                            Iso2 = "dk",
                            NameAr = "الدانمارك",
                            NameEn = "Denmark"
                        },
                        new
                        {
                            Id = 121,
                            Code = "513",
                            ConcurrencyStamp = new Guid("86987ff1-c3b8-4dbd-b424-852fc6aa4f1e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "40",
                            IsActive = true,
                            Iso2 = "ro",
                            NameAr = "رومانيا",
                            NameEn = "Romania"
                        },
                        new
                        {
                            Id = 122,
                            Code = "514",
                            ConcurrencyStamp = new Guid("a3f5ee71-21de-4d5a-b82c-8ccad4c8e5a6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "46",
                            IsActive = true,
                            Iso2 = "se",
                            NameAr = "السويد",
                            NameEn = "Sweden"
                        },
                        new
                        {
                            Id = 123,
                            Code = "515",
                            ConcurrencyStamp = new Guid("9085e244-b8bc-42a4-a7f3-e09568a53655"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "41",
                            IsActive = true,
                            Iso2 = "ch",
                            NameAr = "سويسرا",
                            NameEn = "Switzerland"
                        },
                        new
                        {
                            Id = 124,
                            Code = "516",
                            ConcurrencyStamp = new Guid("b4a04cd3-c8bb-48c9-8849-3f12f5d7e398"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "33",
                            IsActive = true,
                            Iso2 = "fr",
                            NameAr = "فرنسا",
                            NameEn = "France"
                        },
                        new
                        {
                            Id = 125,
                            Code = "517",
                            ConcurrencyStamp = new Guid("758c4692-6851-468a-aa0f-450c92e9fd13"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "358",
                            IsActive = true,
                            Iso2 = "fi",
                            NameAr = "فنلندا",
                            NameEn = "Finland"
                        },
                        new
                        {
                            Id = 126,
                            Code = "518",
                            ConcurrencyStamp = new Guid("4449b6ec-9a8f-4f66-8732-62ba44b32679"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "381",
                            IsActive = true,
                            Iso2 = "rs",
                            NameAr = "صربيا",
                            NameEn = "Serbia"
                        },
                        new
                        {
                            Id = 127,
                            Code = "519",
                            ConcurrencyStamp = new Guid("2920f4f8-6a86-435b-81e1-375eeed41240"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "31",
                            IsActive = true,
                            Iso2 = "nl",
                            NameAr = "هولندا",
                            NameEn = "Netherlands"
                        },
                        new
                        {
                            Id = 128,
                            Code = "521",
                            ConcurrencyStamp = new Guid("f8af1d41-2295-411d-a469-2aa1ddcf8a3e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "30",
                            IsActive = true,
                            Iso2 = "gr",
                            NameAr = "اليونان",
                            NameEn = "Greece"
                        },
                        new
                        {
                            Id = 129,
                            Code = "522",
                            ConcurrencyStamp = new Guid("d1863a71-00fd-4f71-8679-a2e8e679fb08"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "376",
                            IsActive = true,
                            Iso2 = "ad",
                            NameAr = "اندورا",
                            NameEn = "Andorra"
                        },
                        new
                        {
                            Id = 130,
                            Code = "523",
                            ConcurrencyStamp = new Guid("48405e0b-35d3-4a8d-804c-90eefef8f1bf"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "43",
                            IsActive = true,
                            Iso2 = "at",
                            NameAr = "النمسا",
                            NameEn = "Austria"
                        },
                        new
                        {
                            Id = 131,
                            Code = "524",
                            ConcurrencyStamp = new Guid("e1b82df8-d358-4438-9741-4d22172f9d7a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "382",
                            IsActive = true,
                            Iso2 = "me",
                            NameAr = "الجبل الأ سود",
                            NameEn = "Montenegro"
                        },
                        new
                        {
                            Id = 132,
                            Code = "525",
                            ConcurrencyStamp = new Guid("98700351-bbe1-4980-a0fd-c1e0d3ce14a4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "36",
                            IsActive = true,
                            Iso2 = "hu",
                            NameAr = "هنغاريا",
                            NameEn = "Hungary"
                        },
                        new
                        {
                            Id = 133,
                            Code = "526",
                            ConcurrencyStamp = new Guid("7a841339-d779-41c2-890c-088040c1f4b0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "354",
                            IsActive = true,
                            Iso2 = "is",
                            NameAr = "ايسلندا",
                            NameEn = "Iceland"
                        },
                        new
                        {
                            Id = 134,
                            Code = "527",
                            ConcurrencyStamp = new Guid("d1e5432e-52d4-4ec5-bcf6-9444fdf4c12a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "423",
                            IsActive = true,
                            Iso2 = "li",
                            NameAr = "ليختنشتين",
                            NameEn = "Liechtenstein"
                        },
                        new
                        {
                            Id = 135,
                            Code = "528",
                            ConcurrencyStamp = new Guid("a12018f4-3aa1-4bfa-82eb-f1c7ed1e0e40"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "352",
                            IsActive = true,
                            Iso2 = "lu",
                            NameAr = "لوكسمبورغ",
                            NameEn = "Luxembourg"
                        },
                        new
                        {
                            Id = 136,
                            Code = "529",
                            ConcurrencyStamp = new Guid("4734d2a3-772f-4913-9e13-f8e0b78cbf15"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "356",
                            IsActive = true,
                            Iso2 = "mt",
                            NameAr = "مالطا",
                            NameEn = "Malta"
                        },
                        new
                        {
                            Id = 137,
                            Code = "530",
                            ConcurrencyStamp = new Guid("9394c6ad-d87e-4ab1-b06b-d4a275d5b389"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "377",
                            IsActive = true,
                            Iso2 = "mc",
                            NameAr = "موناكو",
                            NameEn = "Monaco"
                        },
                        new
                        {
                            Id = 138,
                            Code = "531",
                            ConcurrencyStamp = new Guid("8dda51d6-9c85-4992-86f8-9eda6d6ea367"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "47",
                            IsActive = true,
                            Iso2 = "no",
                            NameAr = "النرويج",
                            NameEn = "Norway"
                        },
                        new
                        {
                            Id = 139,
                            Code = "532",
                            ConcurrencyStamp = new Guid("a89508c1-5bd8-4149-aa0f-20c90f5f79f7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "378",
                            IsActive = true,
                            Iso2 = "sm",
                            NameAr = "سان مارينو",
                            NameEn = "San Marino"
                        },
                        new
                        {
                            Id = 140,
                            Code = "533",
                            ConcurrencyStamp = new Guid("3c0d8265-31ee-4178-9e80-df5c433d2abe"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "39",
                            IsActive = true,
                            Iso2 = "va",
                            NameAr = "مدينة الفاتيكان",
                            NameEn = "Vatican City"
                        },
                        new
                        {
                            Id = 141,
                            Code = "534",
                            ConcurrencyStamp = new Guid("6eabbe63-5d7e-4aa6-a2ab-24da0f72c3fa"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "350",
                            IsActive = true,
                            Iso2 = "gi",
                            NameAr = "جبل طارق",
                            NameEn = "Gibraltar"
                        },
                        new
                        {
                            Id = 142,
                            Code = "536",
                            ConcurrencyStamp = new Guid("7dad19c6-a5d0-408b-a143-6f0f162b3014"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "380",
                            IsActive = true,
                            Iso2 = "ua",
                            NameAr = "اوكرانيا",
                            NameEn = "Ukraine"
                        },
                        new
                        {
                            Id = 143,
                            Code = "537",
                            ConcurrencyStamp = new Guid("fd2ca941-4508-4928-9849-49a7f6af524b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "روسيا البيضاء",
                            NameEn = "Byelorussia"
                        },
                        new
                        {
                            Id = 144,
                            Code = "539",
                            ConcurrencyStamp = new Guid("8f3f25e0-c105-426a-ba5f-101fa6315604"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "374",
                            IsActive = true,
                            Iso2 = "am",
                            NameAr = "ارمينيا",
                            NameEn = "Armenia"
                        },
                        new
                        {
                            Id = 145,
                            Code = "540",
                            ConcurrencyStamp = new Guid("d0f0c08f-5f4e-48f5-93cd-28dd8d9230b5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "373",
                            IsActive = true,
                            Iso2 = "md",
                            NameAr = "مولدافيا",
                            NameEn = "Moldova"
                        },
                        new
                        {
                            Id = 146,
                            Code = "541",
                            ConcurrencyStamp = new Guid("95077218-fe02-42b5-90d7-0a724f3d8c80"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "995",
                            IsActive = true,
                            Iso2 = "ge",
                            NameAr = "جورجيا",
                            NameEn = "Georgia"
                        },
                        new
                        {
                            Id = 147,
                            Code = "542",
                            ConcurrencyStamp = new Guid("a271b436-28aa-40b7-a9cb-9495cf6c4d13"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "370",
                            IsActive = true,
                            Iso2 = "lt",
                            NameAr = "ليتوانيا",
                            NameEn = "Lithuania"
                        },
                        new
                        {
                            Id = 148,
                            Code = "543",
                            ConcurrencyStamp = new Guid("e54ae6bf-7fde-40ac-b263-1cd222657fdc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "372",
                            IsActive = true,
                            Iso2 = "ee",
                            NameAr = "استونيا",
                            NameEn = "Estonia"
                        },
                        new
                        {
                            Id = 149,
                            Code = "544",
                            ConcurrencyStamp = new Guid("0084f431-b672-43e5-a196-f93141eed24a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "371",
                            IsActive = true,
                            Iso2 = "lv",
                            NameAr = "لاتفيا",
                            NameEn = "Latvia"
                        },
                        new
                        {
                            Id = 150,
                            Code = "545",
                            ConcurrencyStamp = new Guid("df4d9edf-86f5-4ccb-9f11-14ea4e42863d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "387",
                            IsActive = true,
                            Iso2 = "ba",
                            NameAr = "البوسنة والهرسك",
                            NameEn = "Bosnia / Herzegovina"
                        },
                        new
                        {
                            Id = 151,
                            Code = "546",
                            ConcurrencyStamp = new Guid("f37ef8ea-07c3-461d-ade2-54bee5a39dd5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "385",
                            IsActive = true,
                            Iso2 = "hr",
                            NameAr = "كرواتيا",
                            NameEn = "Croatia"
                        },
                        new
                        {
                            Id = 152,
                            Code = "547",
                            ConcurrencyStamp = new Guid("acf8d846-7d51-4376-8f7a-c23dc4c64b56"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "386",
                            IsActive = true,
                            Iso2 = "si",
                            NameAr = "سلوفينيا",
                            NameEn = "Slovenia"
                        },
                        new
                        {
                            Id = 153,
                            Code = "549",
                            ConcurrencyStamp = new Guid("46ce194e-6695-4457-9821-5c82c4595b5c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "389",
                            IsActive = true,
                            Iso2 = "mk",
                            NameAr = "مقدونيا",
                            NameEn = "Macedonia"
                        },
                        new
                        {
                            Id = 154,
                            Code = "552",
                            ConcurrencyStamp = new Guid("49315c4e-f540-40d4-9b73-6c4c87919194"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "420",
                            IsActive = true,
                            Iso2 = "cz",
                            NameAr = "تشيك",
                            NameEn = "Czech Republic"
                        },
                        new
                        {
                            Id = 155,
                            Code = "553",
                            ConcurrencyStamp = new Guid("f36c4465-66a4-4f9e-9f26-68743ea790ad"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "421",
                            IsActive = true,
                            Iso2 = "sk",
                            NameAr = "سلوفاكيا",
                            NameEn = "Slovakia"
                        },
                        new
                        {
                            Id = 156,
                            Code = "554",
                            ConcurrencyStamp = new Guid("dfbdd61c-934a-437e-b66b-0398cc710fab"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "298",
                            IsActive = true,
                            Iso2 = "fo",
                            NameAr = "جزر فيرو",
                            NameEn = "Faroe Islands"
                        },
                        new
                        {
                            Id = 157,
                            Code = "555",
                            ConcurrencyStamp = new Guid("c551f570-f441-43fa-9ced-e3635e75a81a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "33",
                            IsActive = false,
                            Iso2 = "fx",
                            NameAr = "ميتروبوليتان فرنسية",
                            NameEn = "France Metropolitan"
                        },
                        new
                        {
                            Id = 158,
                            Code = "601",
                            ConcurrencyStamp = new Guid("7f53ee82-7510-437c-aff7-cb6bbe814ef7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "us",
                            NameAr = "الولايات المتحدة",
                            NameEn = "United States"
                        },
                        new
                        {
                            Id = 159,
                            Code = "602",
                            ConcurrencyStamp = new Guid("0fb833a8-5b27-419a-8768-d8d351e43754"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "54",
                            IsActive = true,
                            Iso2 = "ar",
                            NameAr = "الارجنتين",
                            NameEn = "Argentina"
                        },
                        new
                        {
                            Id = 160,
                            Code = "603",
                            ConcurrencyStamp = new Guid("b55e76ac-78de-460c-976a-a640f251b261"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "bb",
                            NameAr = "بربادوس",
                            NameEn = "Barbados"
                        },
                        new
                        {
                            Id = 161,
                            Code = "604",
                            ConcurrencyStamp = new Guid("a8559591-b128-46da-892a-d9b4385dd62c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "55",
                            IsActive = true,
                            Iso2 = "br",
                            NameAr = "البرازيل",
                            NameEn = "Brazil"
                        },
                        new
                        {
                            Id = 162,
                            Code = "605",
                            ConcurrencyStamp = new Guid("9a83bef0-1980-41a7-9f47-a1748c16796a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "507",
                            IsActive = true,
                            Iso2 = "pa",
                            NameAr = "بنما",
                            NameEn = "Panama"
                        },
                        new
                        {
                            Id = 163,
                            Code = "606",
                            ConcurrencyStamp = new Guid("b1d20142-44d4-4e2a-a07a-4f5520b603e9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "tt",
                            NameAr = "ترينداد وتوباجو",
                            NameEn = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 164,
                            Code = "607",
                            ConcurrencyStamp = new Guid("38eb2c39-4030-4a81-8778-8a5e2dfa0e85"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "jm",
                            NameAr = "جامايكا",
                            NameEn = "Jamaica"
                        },
                        new
                        {
                            Id = 165,
                            Code = "608",
                            ConcurrencyStamp = new Guid("e56c8e94-7bf7-4082-a41c-2281c6030acf"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "جوانا",
                            NameEn = "Joanna"
                        },
                        new
                        {
                            Id = 166,
                            Code = "609",
                            ConcurrencyStamp = new Guid("edb8bd79-8f48-4a77-b3c3-a741ac77ebae"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "58",
                            IsActive = true,
                            Iso2 = "ve",
                            NameAr = "فنزويلا",
                            NameEn = "Venezuela"
                        },
                        new
                        {
                            Id = 167,
                            Code = "610",
                            ConcurrencyStamp = new Guid("da6fc20a-7184-46e3-916a-5546b6241960"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "ca",
                            NameAr = "كندا",
                            NameEn = "Canada"
                        },
                        new
                        {
                            Id = 168,
                            Code = "611",
                            ConcurrencyStamp = new Guid("6edca8b7-b42e-4e85-af70-d3c395250666"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "57",
                            IsActive = true,
                            Iso2 = "co",
                            NameAr = "كولمبيا",
                            NameEn = "Columbia"
                        },
                        new
                        {
                            Id = 169,
                            Code = "612",
                            ConcurrencyStamp = new Guid("cbb62ab5-cffe-4087-9482-86954dd034ed"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "bs",
                            NameAr = "جزر البهاما",
                            NameEn = "Bahamas"
                        },
                        new
                        {
                            Id = 170,
                            Code = "613",
                            ConcurrencyStamp = new Guid("b229af8d-62f7-468a-afc2-4700392c6a1f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "506",
                            IsActive = true,
                            Iso2 = "cr",
                            NameAr = "كوستاريكا",
                            NameEn = "Costa Rica"
                        },
                        new
                        {
                            Id = 171,
                            Code = "614",
                            ConcurrencyStamp = new Guid("14c15d08-98c5-418c-b689-a1714b6ff6a1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "53",
                            IsActive = true,
                            Iso2 = "cu",
                            NameAr = "كوبا",
                            NameEn = "Cuba"
                        },
                        new
                        {
                            Id = 172,
                            Code = "615",
                            ConcurrencyStamp = new Guid("5002bf18-cfcf-4881-81f2-551ce211b002"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "dm",
                            NameAr = "دومينيكا",
                            NameEn = "Dominica"
                        },
                        new
                        {
                            Id = 173,
                            Code = "616",
                            ConcurrencyStamp = new Guid("643f65be-b351-415a-ac98-5f73bc715b31"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "do",
                            NameAr = "جمهورية دمينكان",
                            NameEn = "Republic Dominica"
                        },
                        new
                        {
                            Id = 174,
                            Code = "617",
                            ConcurrencyStamp = new Guid("f6662e52-4ab6-459c-9f4c-6e80f118b8cb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "503",
                            IsActive = true,
                            Iso2 = "sv",
                            NameAr = "السلفادور",
                            NameEn = "El Salvador"
                        },
                        new
                        {
                            Id = 175,
                            Code = "618",
                            ConcurrencyStamp = new Guid("53e86812-4389-409c-b033-55b91915ce7e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "gd",
                            NameAr = "جرانادا",
                            NameEn = "Granada"
                        },
                        new
                        {
                            Id = 176,
                            Code = "619",
                            ConcurrencyStamp = new Guid("4195fcc2-9c0e-4395-9175-887d5a074c80"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "502",
                            IsActive = true,
                            Iso2 = "gt",
                            NameAr = "جواتيمالا",
                            NameEn = "Guatemala"
                        },
                        new
                        {
                            Id = 177,
                            Code = "620",
                            ConcurrencyStamp = new Guid("9b44cb36-5f58-4c00-b258-f6d9a28e0f57"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "509",
                            IsActive = true,
                            Iso2 = "ht",
                            NameAr = "هايتي",
                            NameEn = "Haiti"
                        },
                        new
                        {
                            Id = 178,
                            Code = "621",
                            ConcurrencyStamp = new Guid("26fc9774-e26a-413e-bd6e-5b2c019caaef"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "504",
                            IsActive = true,
                            Iso2 = "hn",
                            NameAr = "هوندوراس",
                            NameEn = "Honduras"
                        },
                        new
                        {
                            Id = 179,
                            Code = "622",
                            ConcurrencyStamp = new Guid("eb78fb82-20b5-431f-8951-3b221514a39a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "52",
                            IsActive = true,
                            Iso2 = "mx",
                            NameAr = "المكسيك",
                            NameEn = "Mexico"
                        },
                        new
                        {
                            Id = 180,
                            Code = "623",
                            ConcurrencyStamp = new Guid("368fb766-d75e-4bb7-9326-b02fd921a0d9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "505",
                            IsActive = true,
                            Iso2 = "ni",
                            NameAr = "نيكاراجوا",
                            NameEn = "Nicaragua"
                        },
                        new
                        {
                            Id = 181,
                            Code = "624",
                            ConcurrencyStamp = new Guid("a943c422-a7dc-47a4-b183-fd275b8a675c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "lc",
                            NameAr = "سانت لوسيا",
                            NameEn = "Saint Lucia"
                        },
                        new
                        {
                            Id = 182,
                            Code = "625",
                            ConcurrencyStamp = new Guid("9069fac1-5f51-45a3-bbfb-66a171edb843"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "vc",
                            NameAr = "سان فينسنت",
                            NameEn = "Saint Vincent"
                        },
                        new
                        {
                            Id = 183,
                            Code = "626",
                            ConcurrencyStamp = new Guid("6a5011f3-906e-4214-9c53-5e26f25e7138"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "591",
                            IsActive = true,
                            Iso2 = "bo",
                            NameAr = "بوليفيا",
                            NameEn = "Bolivia"
                        },
                        new
                        {
                            Id = 184,
                            Code = "627",
                            ConcurrencyStamp = new Guid("960fab63-e0fe-423f-bdc3-4496cb0c1f33"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "56",
                            IsActive = true,
                            Iso2 = "cl",
                            NameAr = "شيلي",
                            NameEn = "Chile"
                        },
                        new
                        {
                            Id = 185,
                            Code = "628",
                            ConcurrencyStamp = new Guid("256ff119-d351-4703-973d-d271b4fa03bb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "593",
                            IsActive = true,
                            Iso2 = "ec",
                            NameAr = "اكوادور",
                            NameEn = "Ecuador"
                        },
                        new
                        {
                            Id = 186,
                            Code = "629",
                            ConcurrencyStamp = new Guid("cfdf908c-e8b1-44f1-9fdd-30d7421b4508"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "595",
                            IsActive = true,
                            Iso2 = "py",
                            NameAr = "باراجواي",
                            NameEn = "Paraguay"
                        },
                        new
                        {
                            Id = 187,
                            Code = "630",
                            ConcurrencyStamp = new Guid("101bd0f9-d38e-4713-b9df-3e44da0f14dc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "51",
                            IsActive = true,
                            Iso2 = "pe",
                            NameAr = "بيرو",
                            NameEn = "Peru"
                        },
                        new
                        {
                            Id = 188,
                            Code = "701",
                            ConcurrencyStamp = new Guid("6d1b7900-38d4-44c3-9384-3eae1ae344b6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "61",
                            IsActive = true,
                            Iso2 = "au",
                            NameAr = "استراليا",
                            NameEn = "Australia"
                        },
                        new
                        {
                            Id = 189,
                            Code = "702",
                            ConcurrencyStamp = new Guid("b07a70a6-e618-40fb-8a1e-048f73e15047"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "64",
                            IsActive = true,
                            Iso2 = "nz",
                            NameAr = "نيوزيلندا",
                            NameEn = "New Zealand"
                        },
                        new
                        {
                            Id = 190,
                            Code = "703",
                            ConcurrencyStamp = new Guid("1c943df9-5e4c-4708-8026-c993c7af666f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "598",
                            IsActive = true,
                            Iso2 = "yu",
                            NameAr = "أوروغواي",
                            NameEn = "Uruguay"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArabic")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NewsCategueryId")
                        .HasColumnType("int");

                    b.Property<string>("NewsOrigin")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("NewsTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("OpenComments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("NewsCategueryId");

                    b.ToTable("News", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsCateguery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("NewsCategueries", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("751e02af-94ac-4aff-a97d-e07a051a9954"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "غير مصنف",
                            NameEn = "Not Categuerized"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("2bb3ccba-6fc0-47ef-ac65-708671ec25c5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أخبار الأمير",
                            NameEn = "Prince News"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("90ea01ee-2201-49b1-917f-7690f03b5b1c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أخبار النائب",
                            NameEn = "Deputy News"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("1a7d6f08-bbf2-4f2d-aa20-3121ae011cdf"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أخبار الإمارة",
                            NameEn = "Emirate News"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("CommentStageId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentStageId");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsComments", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataCateguery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OpenDataSubCategueryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("OpenDataSubCategueryId");

                    b.ToTable("OpenDataCategueries", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("f725c3f6-546a-491b-aec9-4dfe5365069f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تقارير الخدمات الإلكترونية",
                            NameEn = "E-Services Reports",
                            OpenDataSubCategueryId = 2
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("3da01702-6cfb-4044-97f2-8f1531d676b5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تقارير المعاملات",
                            NameEn = "Transaction Reports",
                            OpenDataSubCategueryId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("aa90d27a-829d-4344-a537-7485f49ce47a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "المعاملات لصفة صاحب المعاملة",
                            NameEn = "Transactions for the owner of the transaction",
                            OpenDataSubCategueryId = 2
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("0ada838f-0f9b-48ee-a810-53073dcc01e8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "الحصر",
                            NameEn = "Limitation",
                            OpenDataSubCategueryId = 1
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OpenDataCategueryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("OpenDataCategueryId");

                    b.ToTable("OpenDataReports", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsReplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("OpenDataRequests", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataSubCateguery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("OpenDataSubCategueries", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("77b27b52-08b9-44c7-bd8e-6eb93f6d9b08"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سنوي",
                            NameEn = "Annual"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("94418f83-2b86-4c67-b6b0-689f299f2604"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "نصف سنوي",
                            NameEn = "Semi-annual"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("e7b8213c-3a10-4138-b829-be0023ba6c4a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "ربع سنوي",
                            NameEn = "Quarterly"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("35babe65-8fd6-4db8-9c37-daa9e695abb5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شهري",
                            NameEn = "Monthly"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.PageContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PageContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PageContent", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("e637d6ca-6ca8-4ec9-82e0-944abdacfdbd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "عن الاماره",
                            DescriptionEn = "About us",
                            PageContentType = "AboutUs"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("d6c47c3f-2476-4e96-bd91-be8a7771044e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "القسم النسوي",
                            DescriptionEn = "Woman sections",
                            PageContentType = "WomanSection"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Poster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Posters", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("d15cb639-4586-4e19-9961-05abf1b23d5c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "slider.png",
                            IsActive = true,
                            Order = 1,
                            TitleAr = "يوم بدينا",
                            TitleEn = "Day We Start"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Religions", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("435de128-ba4d-45c9-a932-fd20fa4cf533"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مسلم",
                            NameEn = "Muslem"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StageId");

                    b.ToTable("Requests", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestAttachmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtentionAllowed")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxFileSize")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("RequestAttachmentTypes", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestElectronicBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestContent")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RequestTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestElectronicBoards", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestElectronicSummon", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestContent")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RequestTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestElectronicSummons", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestForeignersRealtyOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("BuildingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingTypeId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("ReligionId");

                    b.ToTable("RequestForeignersRealtyOwners", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestJudgmentExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DefendantTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LawsuitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LawsuitNumber")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RequesterName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RequesterNationalId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("RequesterType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefendantTypeId");

                    b.ToTable("RequestJudgmentExecutions", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestLandsInfringement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("EstimatedSpace")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("InfringerDescription")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("InfringerName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("InstrumentNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestLandsInfringements", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestMarriageCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChildrenCount")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeSide")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("JobOccupation")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestMarriageCertificates", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestNumberSequence", b =>
                {
                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.ToSqlQuery("SELECT NEXT VALUE FOR Request.RequestNumberSequence AS [Value]");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestPrisonersService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PresonName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestPrisonersServices", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestPrisonerTempRelease", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PresonName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestPrisonerTempReleases", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestStageLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("RequestId");

                    b.HasIndex("StageId");

                    b.ToTable("RequestStageLogs", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestTreatmentRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PatientNationalId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("PatientType")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestTreatmentRecommendations", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("RequestTypes", "Request");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("32d5cfbb-788e-4d9c-a273-2874441c3557"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "حضور زواج",
                            NameEn = "حضور زواج",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("307945da-487f-4bbf-ab63-150c3f80bf58"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زيارة الوالدين والأهل",
                            NameEn = "زيارة الوالدين والأهل",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("196606ad-a721-4c18-9e2c-e11753ba8b19"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زيارة مريض",
                            NameEn = "زيارة مريض",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("1815686c-b637-4661-b7c5-e6be51c6637c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تسجيل في الجامعة",
                            NameEn = "تسجيل في الجامعة",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("25db2dee-cac9-46f9-aa7f-d32cfc4777ed"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "عزاء",
                            NameEn = "عزاء",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("99e6b329-a17d-49e5-8c87-faa6d45a67de"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "العلاج والتنويم",
                            NameEn = "العلاج والتنويم",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("dff22393-d170-4aec-b2d7-a4e861715a08"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إبعاد سجين لبلادة",
                            NameEn = "إبعاد سجين لبلادة",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("b1dac53a-5cc8-46da-8ef7-beb2837e209d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إعفاء من الإبعاد",
                            NameEn = "إعفاء من الإبعاد",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("c074cac2-711d-46b9-9331-cc276a3538e0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إعفاء من باقي المحكومية لسجين",
                            NameEn = "إعفاء من باقي المحكومية لسجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = new Guid("ef422f19-1124-4076-ab63-d3f0455b7109"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إفراج صحي لسجين",
                            NameEn = "إفراج صحي لسجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = new Guid("c630329f-c566-4269-a063-d8c2423c5fdf"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إنهاء قضايا الأحداث الاجانب",
                            NameEn = "إنهاء قضايا الأحداث الاجانب",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = new Guid("d6325424-e1df-44fa-9d62-b1ee1f25ae2e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تثبيت سجين في سجنه",
                            NameEn = "تثبيت سجين في سجنه",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = new Guid("019a9534-ff12-4dc1-943e-8e299500967c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "ترحيل سجين",
                            NameEn = "ترحيل سجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = new Guid("3e834c93-b2cb-4faa-a53b-e303c198afa4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زيارة خاصة لسجين",
                            NameEn = "زيارة خاصة لسجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyStamp = new Guid("f1618c5f-bc22-4785-9a0d-1f2c9b0562bb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زيارة خاصة مكتبية لسجين",
                            NameEn = "زيارة خاصة مكتبية لسجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyStamp = new Guid("7049dcd8-f86f-4ad9-b662-a76c0fbbc9be"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "طلب نقل سجين",
                            NameEn = "طلب نقل سجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyStamp = new Guid("ecaddaff-bebe-40b4-a5b6-58d6f75b4d81"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "اقتراح",
                            NameEn = "اقتراح",
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyStamp = new Guid("bca243d0-fa83-41e7-8f7a-3a1b22f59cd1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شكوى",
                            NameEn = "شكوى",
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyStamp = new Guid("64f26e1a-b4d0-4c19-ae54-2580e078444e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "طلب",
                            NameEn = "طلب",
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyStamp = new Guid("7543d8e7-5295-498b-b5b0-f9a2322b4c96"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زراعي",
                            NameEn = "زراعي",
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyStamp = new Guid("f92fc086-e13f-40f7-90e8-a5c5581d410b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سكني",
                            NameEn = "سكني",
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyStamp = new Guid("d553fd60-1b5e-4e42-b987-56fb1dcada82"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تجاري",
                            NameEn = "تجاري",
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 23,
                            ConcurrencyStamp = new Guid("6b7468e9-5243-4e2b-9cb7-65dd5d578769"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أملاك عامة",
                            NameEn = "أملاك عامة",
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 24,
                            ConcurrencyStamp = new Guid("51f31748-2efe-4ee4-8b3b-9bc3387c4288"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "اقتراح",
                            NameEn = "اقتراح",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 25,
                            ConcurrencyStamp = new Guid("15f3564b-5c95-4091-9ae9-29206e7cafc4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شكوى",
                            NameEn = "شكوى",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 26,
                            ConcurrencyStamp = new Guid("a2c35a32-967e-4fe3-be8f-3cf9c3abe348"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "طلب",
                            NameEn = "طلب",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 27,
                            ConcurrencyStamp = new Guid("3f1b9648-8c3c-40d7-8d91-365f2e57b254"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودية من أجنبي",
                            NameEn = "زواج السعودية من أجنبي",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 28,
                            ConcurrencyStamp = new Guid("64d8c214-fde0-4478-a9b2-03d5825a1bab"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودي من دولة المغرب",
                            NameEn = "زواج السعودي من دولة المغرب",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 29,
                            ConcurrencyStamp = new Guid("14806d84-fcf8-4f3e-a3da-b043d3fbefb4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودي من غير سعودية مقيمة بالمملكة",
                            NameEn = "زواج السعودي من غير سعودية مقيمة بالمملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 30,
                            ConcurrencyStamp = new Guid("2e68a870-f162-41fe-b867-9713b223805c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودي من غير سعودية مولودة بالمملكة",
                            NameEn = "زواج السعودي من غير سعودية مولودة بالمملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 31,
                            ConcurrencyStamp = new Guid("f64247e9-a692-4bb4-8afa-e156b7711dea"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودية من غير سعودي مقيم بالمملكة",
                            NameEn = "زواج السعودية من غير سعودي مقيم بالمملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 32,
                            ConcurrencyStamp = new Guid("91bcd97a-8aa7-4cf9-84c0-fb68b8195026"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودية من غير سعودي مولود بالمملكة",
                            NameEn = "زواج السعودية من غير سعودي مولود بالمملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 33,
                            ConcurrencyStamp = new Guid("d957fa1c-eb04-4863-a64e-945b2c192c1e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودي من غير سعودية من خارج المملكة",
                            NameEn = "زواج السعودي من غير سعودية من خارج المملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 34,
                            ConcurrencyStamp = new Guid("43d31e82-5f9d-40c6-a529-bcea3e1d0fd1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "العلاج النفسي",
                            NameEn = "العلاج النفسي",
                            ServiceId = 9
                        },
                        new
                        {
                            Id = 35,
                            ConcurrencyStamp = new Guid("3fc33ada-35c0-45d1-80a3-cf53098ba0d9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "علاج الإدمان",
                            NameEn = "علاج الإدمان",
                            ServiceId = 9
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Roles", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("73e23132-a1d1-47ba-aaf6-604de6b59b2a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "مدير عام النظام",
                            NameEn = "Super System Admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("272aab35-bebb-4b0e-b40a-bafd48e5eb92"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مدير النظام",
                            NameEn = "System Admin"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("6c111d0b-29ff-4da5-a9c0-98f1c78975d5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "صلاحيات الأخبار",
                            NameEn = "News Permission"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("d5c2b0b5-9945-41db-92cf-2eb505dd221e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "صلاحيات الاعدادات",
                            NameEn = "Setting Permission"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("b19d9445-e46b-4709-9369-ef2759d93cd5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "صلاحيات المستخدمين",
                            NameEn = "Users Permission"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("57865593-4a23-4d5a-bf67-a8d249147e28"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مراجعة الطلبات",
                            NameEn = "Request Review"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("8cc1bf30-7293-480b-a4f4-b26318372be7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مراجعة طلبات شامل",
                            NameEn = "Shamel Request Review"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RequestLink")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SectorAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SectorEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WorkDays")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Services", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("9fde9d7c-e35e-41fe-b46c-fcf69f54657a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "المجلس الالكتروني",
                            DescriptionEn = "المجلس الالكتروني",
                            ImageName = "e-council.png",
                            IsActive = true,
                            IsExternal = true,
                            NameAr = "المجلس الالكتروني",
                            NameEn = "Electronic Board",
                            RequestLink = "http://localhost:5000/",
                            SectorAr = "المجلس الالكتروني",
                            SectorEn = "المجلس الالكتروني",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("36d9c053-70e1-42b0-bcc7-c2802c7a4ef1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "الخروج المؤقت لسجين",
                            DescriptionEn = "الخروج المؤقت لسجين",
                            ImageName = "prisoner.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "الخروج المؤقت لسجين",
                            NameEn = "Prisoner Temp Release",
                            RequestLink = "/eservice/prisoner-temp-release",
                            SectorAr = "الخروج المؤقت لسجين",
                            SectorEn = "الخروج المؤقت لسجين",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("d4cc3239-4e66-440d-b39c-b678b94c9dac"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "خدمات السجناء",
                            DescriptionEn = "خدمات السجناء",
                            ImageName = "prisoner.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "خدمات السجناء",
                            NameEn = "Prisoners Services",
                            RequestLink = "/eservice/prisoners-services",
                            SectorAr = "خدمات السجناء",
                            SectorEn = "خدمات السجناء",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("36679794-4e6d-4571-ad3d-35aded435fbd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "الاستدعاء الإلكتروني",
                            DescriptionEn = "الاستدعاء الإلكتروني",
                            ImageName = "contract.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "الاستدعاء الإلكتروني",
                            NameEn = "Electronic Summon",
                            RequestLink = "/eservice/electronic-summon",
                            SectorAr = "الاستدعاء الإلكتروني",
                            SectorEn = "الاستدعاء الإلكتروني",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("b59feb6c-09db-4030-9f87-22c4ecdd3f61"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "التعديات على الأراضي الحكومية",
                            DescriptionEn = "التعديات على الأراضي الحكومية",
                            ImageName = "contract.svg",
                            IsActive = false,
                            IsExternal = false,
                            NameAr = "التعديات على الأراضي الحكومية",
                            NameEn = "Infringements On Government Land",
                            RequestLink = "/eservice/lands-infringement",
                            SectorAr = "التعديات على الأراضي الحكومية",
                            SectorEn = "التعديات على الأراضي الحكومية",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("0e581a79-fce9-4b59-82b9-f45bb7cda864"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "انفاذ الحكم الشرعي",
                            DescriptionEn = "انفاذ الحكم الشرعي",
                            ImageName = "magnifying-glass.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "انفاذ الحكم الشرعي",
                            NameEn = "Judgment Execution",
                            RequestLink = "/eservice/judgment-execution",
                            SectorAr = "انفاذ الحكم الشرعي",
                            SectorEn = "انفاذ الحكم الشرعي",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("1257cf25-4b6b-4143-8bee-c98d8209baf4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "توثيق زواج",
                            DescriptionEn = "توثيق زواج",
                            ImageName = "couple.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "توثيق زواج",
                            NameEn = "Marriage Certificate",
                            RequestLink = "/eservice/marriage-certificate",
                            SectorAr = "توثيق زواج",
                            SectorEn = "توثيق زواج",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("4001a959-bba5-42ad-93a7-97cbfa4f83be"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "تملك عقار للأجانب",
                            DescriptionEn = "تملك عقار للأجانب",
                            ImageName = "magnifying-glass.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "تملك عقار للأجانب",
                            NameEn = "Realty Ownership For Foreigners",
                            RequestLink = "/eservice/foreigners-realty-owner",
                            SectorAr = "تملك عقار للأجانب",
                            SectorEn = "تملك عقار للأجانب",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("4b2da2c3-c766-416c-960e-7cbdf2a55b55"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "طلب علاج",
                            DescriptionEn = "طلب علاج",
                            ImageName = "magnifying-glass.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "طلب علاج",
                            NameEn = "Treatment Recommendation",
                            RequestLink = "/eservice/treatment-recommendation",
                            SectorAr = "طلب علاج",
                            SectorEn = "طلب علاج",
                            WorkDays = "10"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceAudience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AudienceId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AudienceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceAudiences", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsBenefit")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceBenefits", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceConditions", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StarsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("ServiceRates", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdminUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequesterUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StageId");

                    b.ToTable("ServiceStages", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("8429f770-f2aa-450d-9f3e-945d9c862624"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release",
                            ServiceId = 2,
                            StageId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-preview-step",
                            ConcurrencyStamp = new Guid("99aa390f-50d0-43ef-a6e5-1ae2f6886758"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 2
                        },
                        new
                        {
                            Id = 3,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("a528e9d6-0699-4374-afd2-ad9c5397b9b1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release",
                            ServiceId = 2,
                            StageId = 3
                        },
                        new
                        {
                            Id = 4,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("42424e34-95a9-4b17-87d9-2db9c53acdc5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 4
                        },
                        new
                        {
                            Id = 5,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("7e621ce4-1086-41be-ac2a-30c00bac4fd2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 5
                        },
                        new
                        {
                            Id = 6,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("a07d159b-31ad-4fb2-9720-771a9e4be349"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 6
                        },
                        new
                        {
                            Id = 7,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("9330a8b5-15a6-4664-8937-8805bf84a208"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 7
                        },
                        new
                        {
                            Id = 8,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("a42df831-4987-4b3a-a32c-95e24df930d3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services",
                            ServiceId = 3,
                            StageId = 1
                        },
                        new
                        {
                            Id = 9,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-preview-step",
                            ConcurrencyStamp = new Guid("c9983a64-bd2c-4e1c-9380-b8112037e2a7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 2
                        },
                        new
                        {
                            Id = 10,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("d119a185-578d-4016-95a1-b882522ee8e4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services",
                            ServiceId = 3,
                            StageId = 3
                        },
                        new
                        {
                            Id = 11,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("646c797d-e0f3-4829-967b-93ee30ee2290"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 4
                        },
                        new
                        {
                            Id = 12,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("19cbecf4-a4b8-4b5f-945d-5f9c846765b2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 5
                        },
                        new
                        {
                            Id = 13,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("c00b9414-cb1e-4165-9938-2ac1e44d8455"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 6
                        },
                        new
                        {
                            Id = 14,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("ba470ac0-8886-42b6-9164-03f7e808ea0e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 7
                        },
                        new
                        {
                            Id = 15,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("dc4d35d2-ec9c-4efc-b4f3-326ebd63d1c8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning",
                            ServiceId = 3,
                            StageId = 1
                        },
                        new
                        {
                            Id = 16,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-preview-step",
                            ConcurrencyStamp = new Guid("e520601e-6755-40cf-af74-f8351f981a4c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 2
                        },
                        new
                        {
                            Id = 17,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("53965d41-0eea-497d-95be-6b3ce5187dbb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning",
                            ServiceId = 3,
                            StageId = 3
                        },
                        new
                        {
                            Id = 18,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("e28bceca-c1c4-4cba-bde8-86128b44cc60"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 4
                        },
                        new
                        {
                            Id = 19,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("e84bb5a7-d2e0-42d1-84db-6c7f97f7a69a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 5
                        },
                        new
                        {
                            Id = 20,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("a6f1541e-765f-4bb0-8510-d70df410ae07"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 6
                        },
                        new
                        {
                            Id = 21,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("949f92f5-cb7d-440a-a25c-6f6560553574"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 7
                        },
                        new
                        {
                            Id = 22,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("55594157-cdf1-43c0-a745-2ae3e4ec68b1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon",
                            ServiceId = 4,
                            StageId = 1
                        },
                        new
                        {
                            Id = 23,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-preview-step",
                            ConcurrencyStamp = new Guid("23e77c48-96c8-4b37-b760-96c82775776a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 2
                        },
                        new
                        {
                            Id = 24,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("5d4ffeaa-99e8-4b1e-b0ec-d196ba51601c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon",
                            ServiceId = 4,
                            StageId = 3
                        },
                        new
                        {
                            Id = 25,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("93c14c72-3ab8-4e7c-bed6-add11f975b33"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 4
                        },
                        new
                        {
                            Id = 26,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("a1d6360d-a26f-42a8-a023-6b19239b79c2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 5
                        },
                        new
                        {
                            Id = 27,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("3b36d13e-1b03-4edb-b0dc-f5485c3e15f8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 6
                        },
                        new
                        {
                            Id = 28,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("35eef84a-2ad7-47b5-8d06-865f32449d51"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 7
                        },
                        new
                        {
                            Id = 29,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("5acddf92-ae3e-4ddf-b447-d641a8be66b9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement",
                            ServiceId = 5,
                            StageId = 1
                        },
                        new
                        {
                            Id = 30,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-preview-step",
                            ConcurrencyStamp = new Guid("ff9e77c8-79f8-4f92-a760-028057277616"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 2
                        },
                        new
                        {
                            Id = 31,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("daf48921-97be-4471-9b9f-8610968d2b36"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement",
                            ServiceId = 5,
                            StageId = 3
                        },
                        new
                        {
                            Id = 32,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("d6540969-67b8-4ba2-b70d-1da03212c192"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 4
                        },
                        new
                        {
                            Id = 33,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("253ff7f2-27bd-4ae2-85f0-21731c86d3aa"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 5
                        },
                        new
                        {
                            Id = 34,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("989df7db-3ccf-4305-b66e-b2d33399297a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 6
                        },
                        new
                        {
                            Id = 35,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("4514fd80-55d8-465f-aaa8-1ad618c724f2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 7
                        },
                        new
                        {
                            Id = 36,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("d4cd1d2b-a395-4ee8-86b5-64c846dbc8b2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution",
                            ServiceId = 6,
                            StageId = 1
                        },
                        new
                        {
                            Id = 37,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-preview-step",
                            ConcurrencyStamp = new Guid("8370da5e-f6cb-415e-8b4b-d25074ad0171"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 2
                        },
                        new
                        {
                            Id = 38,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("384677e8-8b8d-40b4-8a99-35179f2020b3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution",
                            ServiceId = 6,
                            StageId = 3
                        },
                        new
                        {
                            Id = 39,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("2da2ba5f-35bb-4769-86d6-08206772204b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 4
                        },
                        new
                        {
                            Id = 40,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("64e14b90-b6c0-470d-bcd9-91cceda7a7c7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 5
                        },
                        new
                        {
                            Id = 41,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("67c4ee0f-08a9-4672-bf2b-6379a6ca600a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 6
                        },
                        new
                        {
                            Id = 42,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("23747783-adce-4533-ae04-f41dd24f679c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 7
                        },
                        new
                        {
                            Id = 43,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("2d2fdbd8-c547-423a-a783-8d772fb4f29f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate",
                            ServiceId = 7,
                            StageId = 1
                        },
                        new
                        {
                            Id = 44,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-preview-step",
                            ConcurrencyStamp = new Guid("03db9a5e-02e2-4704-9534-12a18106f409"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 2
                        },
                        new
                        {
                            Id = 45,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("727b5a95-8689-460b-8118-be02fdaf2484"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate",
                            ServiceId = 7,
                            StageId = 3
                        },
                        new
                        {
                            Id = 46,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("3c6b3b66-94bb-425b-a951-b6ef096bcc81"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 4
                        },
                        new
                        {
                            Id = 47,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("4f595ff4-82ce-491f-8f95-ba8604d9f66f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 5
                        },
                        new
                        {
                            Id = 48,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("acd5e119-dca4-49c6-b258-cf1ae65bc165"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 6
                        },
                        new
                        {
                            Id = 49,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("807aae62-15b5-4c2f-8e34-2fda7a2d2259"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 7
                        },
                        new
                        {
                            Id = 50,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("04e71f6e-eb2d-4363-9be5-29cdd7358e99"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner",
                            ServiceId = 8,
                            StageId = 1
                        },
                        new
                        {
                            Id = 51,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-preview-step",
                            ConcurrencyStamp = new Guid("334c7b8a-b0ff-4c60-8d2d-1383c606dd91"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 2
                        },
                        new
                        {
                            Id = 52,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("219679e3-0f82-4c56-bb01-37f6f69e0432"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner",
                            ServiceId = 8,
                            StageId = 3
                        },
                        new
                        {
                            Id = 53,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("07954655-81d9-4c78-9bcf-aeec8efbc49e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 4
                        },
                        new
                        {
                            Id = 54,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("d2778d86-bec0-4f41-a83e-741d7722ecf0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 5
                        },
                        new
                        {
                            Id = 55,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("d02c9dac-422d-4032-9596-5fbb2136b394"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 6
                        },
                        new
                        {
                            Id = 56,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("48a7e5f1-adf5-492d-8a9d-0bfbb2986a83"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 7
                        },
                        new
                        {
                            Id = 57,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("1668fa92-bd59-4164-bd31-d11acce4ea27"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation",
                            ServiceId = 9,
                            StageId = 1
                        },
                        new
                        {
                            Id = 58,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-preview-step",
                            ConcurrencyStamp = new Guid("bc9f0dbc-7064-4f8f-b707-9733f752e474"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 2
                        },
                        new
                        {
                            Id = 59,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("376f393e-a516-43bf-b132-844978248e19"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation",
                            ServiceId = 9,
                            StageId = 3
                        },
                        new
                        {
                            Id = 60,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("38d1b524-3e6e-4f93-9e6b-58be39b027bd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 4
                        },
                        new
                        {
                            Id = 61,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("588e44db-ecf3-4f22-a705-ba66bcd86d79"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 5
                        },
                        new
                        {
                            Id = 62,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("f392214b-80bf-4ab8-b9d9-4ef2322b1b52"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 6
                        },
                        new
                        {
                            Id = 63,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("772000f2-6d33-4934-90da-188b0473bc5a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 7
                        },
                        new
                        {
                            Id = 64,
                            AdminUrl = "",
                            ConcurrencyStamp = new Guid("09d6be56-a5d6-4cb8-b43a-05e65de122c5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/e-council/update",
                            ServiceId = 1,
                            StageId = 1
                        },
                        new
                        {
                            Id = 65,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-preview-step",
                            ConcurrencyStamp = new Guid("2a2771f7-21af-4b59-81eb-84bc60e5ccd5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/e-council/electronic-board-view",
                            ServiceId = 1,
                            StageId = 2
                        },
                        new
                        {
                            Id = 66,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("6bd2051f-ee72-4fa3-815d-dd95148e4900"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/e-council/update",
                            ServiceId = 1,
                            StageId = 3
                        },
                        new
                        {
                            Id = 67,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("50f9ff1f-7ee4-49ac-a63e-4d687ee1a38d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/e-council/electronic-board-view",
                            ServiceId = 1,
                            StageId = 4
                        },
                        new
                        {
                            Id = 68,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("168e72f7-29d1-4ae3-942d-b8138cb01082"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/e-council/electronic-board-view",
                            ServiceId = 1,
                            StageId = 5
                        },
                        new
                        {
                            Id = 69,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("1dda260d-4faf-4486-9a05-b99721c63e1d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/e-council/electronic-board-view",
                            ServiceId = 1,
                            StageId = 6
                        },
                        new
                        {
                            Id = 70,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("1539b874-c313-4f63-8fef-a7f3e1023cc9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/e-council/electronic-board-view",
                            ServiceId = 1,
                            StageId = 7
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Stages", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanEdit = true,
                            ConcurrencyStamp = new Guid("b0bfd98f-28e3-44b1-babc-6f6016ff3bc3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مسودة",
                            NameEn = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("df38c3c2-751b-425b-8710-2e8080cdf3f7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "طلب جديد",
                            NameEn = "New Request"
                        },
                        new
                        {
                            Id = 3,
                            CanEdit = true,
                            ConcurrencyStamp = new Guid("378172aa-69a0-40dd-a579-9069e6abf108"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "استكمال البيانات من مقدم الطلب",
                            NameEn = "Complete Data From Requester"
                        },
                        new
                        {
                            Id = 4,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("71fb86d8-1d36-44fe-b353-911985e251bc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تحت الإجراء",
                            NameEn = "Under Processing"
                        },
                        new
                        {
                            Id = 5,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("49885cdf-06f1-4615-b7f5-9dda1f357dfb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "الطلب مرفوض من مدير النظام",
                            NameEn = "Request Rejected From Admin"
                        },
                        new
                        {
                            Id = 6,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("d8e3fd64-068d-4edf-84f3-60f60d4eb809"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "الطلب مرفوض",
                            NameEn = "Request Rejected"
                        },
                        new
                        {
                            Id = 7,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("4d30339b-a50b-4344-8f61-5e72968cfc7e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "الطلب معتمد",
                            NameEn = "Request Approved"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.UploadedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("EntityName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Extention")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SubEntityName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("UploadedFiles", "FileManager");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FirstNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FirstNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("IdentityExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<string>("Last2Factor")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LastNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("PassportId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SecondNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SecondNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ThirdNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ThirdNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("NationalityId");

                    b.ToTable("Users", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "superadmin@gmail.com",
                            FirstNameAr = "مدير",
                            FirstNameEn = "Super",
                            IsActive = true,
                            IsEmployee = true,
                            IsMale = true,
                            LastNameAr = "النظام",
                            LastNameEn = "Admin",
                            PasswordHash = new byte[] { 39, 64, 249, 49, 134, 230, 218, 141, 211, 214, 59, 8, 28, 89, 0, 88, 17, 107, 115, 72, 180, 252, 186, 224, 116, 23, 0, 118, 197, 214, 120, 238, 14, 113, 203, 55, 226, 163, 94, 4, 12, 144, 153, 126, 86, 61, 173, 93, 48, 211, 177, 151, 232, 226, 76, 122, 208, 55, 50, 13, 249, 255, 196, 15 },
                            PasswordSalt = new byte[] { 98, 75, 49, 135, 193, 68, 235, 104, 167, 160, 110, 10, 153, 248, 129, 230, 64, 84, 24, 130, 138, 141, 29, 31, 164, 188, 19, 69, 13, 165, 152, 205, 98, 155, 212, 60, 52, 20, 246, 186, 205, 155, 222, 243, 224, 150, 95, 191, 40, 99, 58, 108, 112, 49, 185, 148, 29, 122, 86, 127, 47, 171, 33, 41, 140, 50, 115, 169, 192, 90, 68, 227, 208, 15, 45, 102, 163, 116, 2, 100, 29, 63, 90, 152, 112, 136, 183, 103, 97, 247, 238, 155, 143, 77, 240, 71, 51, 104, 235, 48, 225, 226, 1, 23, 26, 172, 231, 136, 239, 64, 110, 21, 253, 92, 146, 236, 235, 44, 94, 144, 29, 81, 7, 92, 172, 103, 217, 117 },
                            PhoneNumber = "0500000000",
                            SecondNameAr = "عام",
                            SecondNameEn = "System",
                            ThirdNameAr = "النظام",
                            ThirdNameEn = "Admin",
                            TwoFactorEnabled = true,
                            UserName = "superadmin"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1989, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@yahoo.com",
                            FirstNameAr = "مدير",
                            FirstNameEn = "System",
                            IsActive = true,
                            IsEmployee = false,
                            IsMale = true,
                            LastNameAr = "النظام",
                            LastNameEn = "Admin",
                            PasswordHash = new byte[] { 39, 64, 249, 49, 134, 230, 218, 141, 211, 214, 59, 8, 28, 89, 0, 88, 17, 107, 115, 72, 180, 252, 186, 224, 116, 23, 0, 118, 197, 214, 120, 238, 14, 113, 203, 55, 226, 163, 94, 4, 12, 144, 153, 126, 86, 61, 173, 93, 48, 211, 177, 151, 232, 226, 76, 122, 208, 55, 50, 13, 249, 255, 196, 15 },
                            PasswordSalt = new byte[] { 98, 75, 49, 135, 193, 68, 235, 104, 167, 160, 110, 10, 153, 248, 129, 230, 64, 84, 24, 130, 138, 141, 29, 31, 164, 188, 19, 69, 13, 165, 152, 205, 98, 155, 212, 60, 52, 20, 246, 186, 205, 155, 222, 243, 224, 150, 95, 191, 40, 99, 58, 108, 112, 49, 185, 148, 29, 122, 86, 127, 47, 171, 33, 41, 140, 50, 115, 169, 192, 90, 68, 227, 208, 15, 45, 102, 163, 116, 2, 100, 29, 63, 90, 152, 112, 136, 183, 103, 97, 247, 238, 155, 143, 77, 240, 71, 51, 104, 235, 48, 225, 226, 1, 23, 26, 172, 231, 136, 239, 64, 110, 21, 253, 92, 146, 236, 235, 44, 94, 144, 29, 81, 7, 92, 172, 103, 217, 117 },
                            PhoneNumber = "0500000001",
                            SecondNameAr = "النظام",
                            SecondNameEn = "Admin",
                            ThirdNameAr = "النظام",
                            ThirdNameEn = "Admin",
                            TwoFactorEnabled = true,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("8ebd3902-49a5-410b-b504-41eae77cb17f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("59017f50-a486-4f2e-9a5a-2cb6b4a8796c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Auction", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedAuctions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedAuctions")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Audience", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedAudiences")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedAudiences")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.BuildingType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedBuildingTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedBuildingTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CaseType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedCaseTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedCaseTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CommentStage", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedCommentStages")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedCommentStages")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ContactUsMessage", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.ContactUsMessageType", "ContactUsMessageType")
                        .WithMany("ContactUsMessages")
                        .HasForeignKey("ContactUsMessageTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedContactUsMessages")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ContactUsMessageType");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.DefendantType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedDefendantTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedDefendantTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.EmiratesPrince", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedEmiratesPrinces")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedEmiratesPrinces")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Governorate", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedGovernorates")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedGovernorates")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MainPagePoints", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.PageContent", "PageContent")
                        .WithMany("MainPagePoints")
                        .HasForeignKey("PageContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PageContent");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MaritalStatus", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedMaritalStatuses")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedMaritalStatuses")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Nationality", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedNationalities")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedNationalities")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.News", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedNews")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedNews")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.NewsCateguery", "NewsCateguery")
                        .WithMany("News")
                        .HasForeignKey("NewsCategueryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("NewsCateguery");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsCateguery", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedNewsCategueries")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedNewsCategueries")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsComment", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.CommentStage", "CommentStage")
                        .WithMany("NewsComments")
                        .HasForeignKey("CommentStageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedNewsComments")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.News", "News")
                        .WithMany("NewsComments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CommentStage");

                    b.Navigation("ModifiedUser");

                    b.Navigation("News");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataCateguery", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedOpenDataCategueries")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedOpenDataCategueries")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.OpenDataSubCateguery", "OpenDataSubCateguery")
                        .WithMany("OpenDataCategueries")
                        .HasForeignKey("OpenDataSubCategueryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("OpenDataSubCateguery");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataReport", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedOpenDataReports")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedOpenDataReports")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.OpenDataCateguery", "OpenDataCateguery")
                        .WithMany("OpenDataReports")
                        .HasForeignKey("OpenDataCategueryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("OpenDataCateguery");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataRequest", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedOpenDataRequests")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataSubCateguery", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedOpenDataSubCategueries")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedOpenDataSubCategueries")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Poster", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedPosters")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedPosters")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Religion", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedReligions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedReligions")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Request", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRequests")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRequests")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Stage", "Stage")
                        .WithMany("Requests")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestAttachmentType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRequestAttachmentTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRequestAttachmentTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("RequestAttachmentTypes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestElectronicBoard", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestElectronicBoard")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestElectronicBoard", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestElectronicBoards")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestElectronicSummon", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestElectronicSummon")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestElectronicSummon", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestElectronicSummons")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestForeignersRealtyOwner", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.BuildingType", "BuildingType")
                        .WithMany("RequestForeignersRealtyOwners")
                        .HasForeignKey("BuildingTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Governorate", "Governorate")
                        .WithMany("RequestForeignersRealtyOwners")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestForeignersRealtyOwner")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestForeignersRealtyOwner", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Religion", "Religion")
                        .WithMany("RequestForeignersRealtyOwners")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BuildingType");

                    b.Navigation("Governorate");

                    b.Navigation("Religion");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestJudgmentExecution", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.DefendantType", "DefendantType")
                        .WithMany("RequestJudgmentExecutions")
                        .HasForeignKey("DefendantTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestJudgmentExecution")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestJudgmentExecution", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DefendantType");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestLandsInfringement", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Governorate", "Governorate")
                        .WithMany("RequestLandsInfringements")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestLandsInfringement")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestLandsInfringement", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestLandsInfringements")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestMarriageCertificate", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestMarriageCertificate")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestMarriageCertificate", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.MaritalStatus", "MaritalStatus")
                        .WithMany("RequestMarriageCertificates")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestMarriageCertificates")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MaritalStatus");

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestPrisonersService", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.CaseType", "CaseType")
                        .WithMany("RequestPrisonersServices")
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestPrisonersService")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestPrisonersService", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestPrisonersServices")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CaseType");

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestPrisonerTempRelease", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.CaseType", "CaseType")
                        .WithMany("RequestPrisonerTempReleases")
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestPrisonerTempRelease")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestPrisonerTempRelease", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestPrisonerTempReleases")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CaseType");

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestStageLog", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRequestStageLogs")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRequestStageLogs")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithMany("RequestStageLogs")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Stage", "Stage")
                        .WithMany("RequestStageLogs")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Request");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestTreatmentRecommendation", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestTreatmentRecommendation")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestTreatmentRecommendation", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestTreatmentRecommendations")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRequestTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRequestTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("RequestTypes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Role", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRoles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRoles")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Service", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServices")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedServices")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceAudience", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Audience", "Audience")
                        .WithMany("ServiceAudiences")
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServiceAudiences")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServiceAudiences")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("CreatedUser");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceBenefit", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServiceBenefits")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceCondition", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServiceConditions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedServiceConditions")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServiceConditions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceRate", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServiceRates")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceStage", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServiceStages")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedServiceStages")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServiceStages")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Stage", "Stage")
                        .WithMany("ServiceStages")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Stage", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedStages")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedStages")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.UploadedFile", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedUploadedFiles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedUploadedFiles")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.User", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Governorate", "Governorate")
                        .WithMany("Users")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Nationality", "Nationality")
                        .WithMany("Users")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Governorate");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedUserRoles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedUserRoles")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Audience", b =>
                {
                    b.Navigation("ServiceAudiences");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.BuildingType", b =>
                {
                    b.Navigation("RequestForeignersRealtyOwners");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CaseType", b =>
                {
                    b.Navigation("RequestPrisonerTempReleases");

                    b.Navigation("RequestPrisonersServices");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CommentStage", b =>
                {
                    b.Navigation("NewsComments");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ContactUsMessageType", b =>
                {
                    b.Navigation("ContactUsMessages");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.DefendantType", b =>
                {
                    b.Navigation("RequestJudgmentExecutions");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Governorate", b =>
                {
                    b.Navigation("RequestForeignersRealtyOwners");

                    b.Navigation("RequestLandsInfringements");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MaritalStatus", b =>
                {
                    b.Navigation("RequestMarriageCertificates");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Nationality", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsComments");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsCateguery", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataCateguery", b =>
                {
                    b.Navigation("OpenDataReports");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataSubCateguery", b =>
                {
                    b.Navigation("OpenDataCategueries");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.PageContent", b =>
                {
                    b.Navigation("MainPagePoints");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Religion", b =>
                {
                    b.Navigation("RequestForeignersRealtyOwners");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Request", b =>
                {
                    b.Navigation("RequestElectronicBoard");

                    b.Navigation("RequestElectronicSummon");

                    b.Navigation("RequestForeignersRealtyOwner");

                    b.Navigation("RequestJudgmentExecution");

                    b.Navigation("RequestLandsInfringement");

                    b.Navigation("RequestMarriageCertificate");

                    b.Navigation("RequestPrisonerTempRelease");

                    b.Navigation("RequestPrisonersService");

                    b.Navigation("RequestStageLogs");

                    b.Navigation("RequestTreatmentRecommendation");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestType", b =>
                {
                    b.Navigation("RequestElectronicBoards");

                    b.Navigation("RequestElectronicSummons");

                    b.Navigation("RequestLandsInfringements");

                    b.Navigation("RequestMarriageCertificates");

                    b.Navigation("RequestPrisonerTempReleases");

                    b.Navigation("RequestPrisonersServices");

                    b.Navigation("RequestTreatmentRecommendations");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Service", b =>
                {
                    b.Navigation("RequestAttachmentTypes");

                    b.Navigation("RequestTypes");

                    b.Navigation("Requests");

                    b.Navigation("ServiceAudiences");

                    b.Navigation("ServiceBenefits");

                    b.Navigation("ServiceConditions");

                    b.Navigation("ServiceStages");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Stage", b =>
                {
                    b.Navigation("RequestStageLogs");

                    b.Navigation("Requests");

                    b.Navigation("ServiceStages");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedAuctions");

                    b.Navigation("CreatedAudiences");

                    b.Navigation("CreatedBuildingTypes");

                    b.Navigation("CreatedCaseTypes");

                    b.Navigation("CreatedCommentStages");

                    b.Navigation("CreatedDefendantTypes");

                    b.Navigation("CreatedEmiratesPrinces");

                    b.Navigation("CreatedGovernorates");

                    b.Navigation("CreatedMaritalStatuses");

                    b.Navigation("CreatedNationalities");

                    b.Navigation("CreatedNews");

                    b.Navigation("CreatedNewsCategueries");

                    b.Navigation("CreatedOpenDataCategueries");

                    b.Navigation("CreatedOpenDataReports");

                    b.Navigation("CreatedOpenDataSubCategueries");

                    b.Navigation("CreatedPosters");

                    b.Navigation("CreatedReligions");

                    b.Navigation("CreatedRequestAttachmentTypes");

                    b.Navigation("CreatedRequestStageLogs");

                    b.Navigation("CreatedRequestTypes");

                    b.Navigation("CreatedRequests");

                    b.Navigation("CreatedRoles");

                    b.Navigation("CreatedServiceAudiences");

                    b.Navigation("CreatedServiceConditions");

                    b.Navigation("CreatedServiceRates");

                    b.Navigation("CreatedServiceStages");

                    b.Navigation("CreatedServices");

                    b.Navigation("CreatedStages");

                    b.Navigation("CreatedUploadedFiles");

                    b.Navigation("CreatedUserRoles");

                    b.Navigation("ModifiedAuctions");

                    b.Navigation("ModifiedAudiences");

                    b.Navigation("ModifiedBuildingTypes");

                    b.Navigation("ModifiedCaseTypes");

                    b.Navigation("ModifiedCommentStages");

                    b.Navigation("ModifiedContactUsMessages");

                    b.Navigation("ModifiedDefendantTypes");

                    b.Navigation("ModifiedEmiratesPrinces");

                    b.Navigation("ModifiedGovernorates");

                    b.Navigation("ModifiedMaritalStatuses");

                    b.Navigation("ModifiedNationalities");

                    b.Navigation("ModifiedNews");

                    b.Navigation("ModifiedNewsCategueries");

                    b.Navigation("ModifiedNewsComments");

                    b.Navigation("ModifiedOpenDataCategueries");

                    b.Navigation("ModifiedOpenDataReports");

                    b.Navigation("ModifiedOpenDataRequests");

                    b.Navigation("ModifiedOpenDataSubCategueries");

                    b.Navigation("ModifiedPosters");

                    b.Navigation("ModifiedReligions");

                    b.Navigation("ModifiedRequestAttachmentTypes");

                    b.Navigation("ModifiedRequestStageLogs");

                    b.Navigation("ModifiedRequestTypes");

                    b.Navigation("ModifiedRequests");

                    b.Navigation("ModifiedRoles");

                    b.Navigation("ModifiedServiceConditions");

                    b.Navigation("ModifiedServiceStages");

                    b.Navigation("ModifiedServices");

                    b.Navigation("ModifiedStages");

                    b.Navigation("ModifiedUploadedFiles");

                    b.Navigation("ModifiedUserRoles");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
