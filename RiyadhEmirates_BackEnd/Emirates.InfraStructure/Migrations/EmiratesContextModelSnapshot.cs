// <auto-generated />
using System;
using Emirates.InfraStructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Emirates.InfraStructure.Migrations
{
    [DbContext(typeof(EmiratesContext))]
    partial class EmiratesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence("RequestNumberSequence", "Request")
                .StartsAt(100000L);

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Auctions", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Audience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Audiences", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("928433c7-8859-4e71-90ac-f06b5b069d6b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مواطنين",
                            NameEn = "Citizens"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("d99daf7d-b814-4d1d-8978-f67d1a3e7aa3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مقيمين",
                            NameEn = "Residents"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("a0a4bda6-9569-4a8c-943c-a7419bcfe6c6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زائرين",
                            NameEn = "Visitors"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.BuildingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("BuildingTypes", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("0072819a-f7a4-44a8-a95c-7d09c5b08aac"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شقة",
                            NameEn = "Apartment"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("a719f0e5-ac45-4c77-82f1-dc62d119b31c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "فيلا",
                            NameEn = "Villa"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("df0375c8-ddb4-4f7e-b730-92b8ecb768a8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "عمارة سكنية",
                            NameEn = "Residential Building"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("ea9166cc-d53d-40db-ba85-62ff7b920538"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مبنى تجاري",
                            NameEn = "Commercial Building"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("CaseTypes", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("ce60f44f-4d49-4d17-89bf-8a301e9364bf"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "قضية جنائية",
                            NameEn = "Criminal Case"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CommentStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CanShowComment")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("CommentStages", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanShowComment = false,
                            ConcurrencyStamp = new Guid("5e191c8f-a896-42cf-acc4-a2208aad777e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "جديد",
                            NameEn = "New"
                        },
                        new
                        {
                            Id = 2,
                            CanShowComment = false,
                            ConcurrencyStamp = new Guid("9243d37f-2966-4b07-ae52-23e20a9cc32b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "معتمد",
                            NameEn = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            CanShowComment = false,
                            ConcurrencyStamp = new Guid("dee989b8-556c-4343-ade1-30b75b9089fe"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مرفوض",
                            NameEn = "Rejected"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ContactUsMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContactUsMessageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsReplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("ContactUsMessageTypeId");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("ContactUsMessages", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ContactUsMessageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ContactUsMessageTypes", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            NameAr = "سؤال",
                            NameEn = "Question"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            NameAr = "اقتراح",
                            NameEn = "Suggestion"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            NameAr = "طلب مساعدة",
                            NameEn = "Help"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.DefendantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("DefendantTypes", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("17b0ae6b-03a2-46d7-ae5a-e5a41f00b183"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "فرد",
                            NameEn = "Individual"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("c0a728d4-b429-49ac-be9e-538662715fda"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شركة",
                            NameEn = "Company"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("0d3194c3-e519-4dd4-8195-cdf1332a7a6a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "جهة حكومية",
                            NameEn = "Governate"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.DesignEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Evaluate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DesignEvaluations", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.EmiratesPrince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BehalfToAr")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("BehalfToEn")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("EmiratesPrinces", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("5ee17324-c21a-4c8c-878e-ebc9e4b3b59c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1937, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceNasir.jpg",
                            IsActive = true,
                            NameAr = "الأمير ناصر بن عبد العزيز",
                            NameEn = "Prince Naser bin Abdul-Aziz",
                            ToDate = new DateTime(1947, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("2e57ad0b-5a7c-4b06-9db8-6babc8b89e1c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1947, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceSultan.jpg",
                            IsActive = true,
                            NameAr = "الأمير سلطان  بن عبد العزيز",
                            NameEn = "Prince Sultan bin Abdul-Aziz",
                            ToDate = new DateTime(1952, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            BehalfToAr = "الأمير ​سلطان",
                            BehalfToEn = "prince Sultan bin Abdul-Aziz",
                            ConcurrencyStamp = new Guid("753c8cf1-129b-44bd-82f7-c993378bc734"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1952, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princenayef.jpg",
                            IsActive = true,
                            NameAr = "الأمير نايف بن عبد العزيز",
                            NameEn = "Prince Naif bin Abdul-Aziz",
                            ToDate = new DateTime(1952, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("504f70aa-b5da-4828-8871-7e89b0bf9190"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1952, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princenayef.jpg",
                            IsActive = true,
                            NameAr = "الأمير نايف بن عبد العزيز",
                            NameEn = "Prince Naif bin Abdul-Aziz",
                            ToDate = new DateTime(1955, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            BehalfToAr = "الأمير نايف",
                            BehalfToEn = "prince Naif",
                            ConcurrencyStamp = new Guid("644fc1d1-da38-40ef-b7c7-eb57b3b9f592"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1954, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princesalman.jpg",
                            IsActive = true,
                            NameAr = "الملك سلمان بن عبد العزيز",
                            NameEn = "King Salman bin Abdul-Aziz",
                            ToDate = new DateTime(1955, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("b04b8bb4-3234-4a1c-b472-c891a79053e4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1955, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princesalman.jpg",
                            IsActive = true,
                            NameAr = "الملك سلمان بن عبد العزيز",
                            NameEn = "King Salman bin Abdul-Aziz",
                            ToDate = new DateTime(1960, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            BehalfToAr = "الملك سلمان",
                            BehalfToEn = "king Salman",
                            ConcurrencyStamp = new Guid("075eda96-6539-4bc7-910c-7c216aaf87bb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1957, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceTurki.jpg",
                            IsActive = true,
                            NameAr = "الأمير تركي بن عبد العزيز",
                            NameEn = "Prince Turki bin Abdul-Aziz",
                            ToDate = new DateTime(1960, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("db1522c1-db6d-4260-9c2b-100d3acab9da"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1960, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceFawaz.jpg",
                            IsActive = true,
                            NameAr = "الأمير فواز بن عبد العزيز",
                            NameEn = "Prince Fawaz bin Abdul-Aziz",
                            ToDate = new DateTime(1961, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("61024af0-f81e-48a6-a74e-019e250f6d83"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1961, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princebadr.jpg",
                            IsActive = true,
                            NameAr = "الأمير بدر بن عبد العزيز",
                            NameEn = "Prince Badr bin Abdul-Aziz",
                            ToDate = new DateTime(1963, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = new Guid("328fd50b-4771-478c-8243-5f3d0992c2ac"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(1963, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "Princesalman.jpg",
                            IsActive = true,
                            NameAr = "الملك سلمان بن عبد العزيز",
                            NameEn = "King Salman bin Abdul-Aziz",
                            ToDate = new DateTime(2011, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = new Guid("b1e666c9-7d06-49a4-9216-4ae453a3f5bb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(2011, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceSatam.jpg",
                            IsActive = true,
                            NameAr = "الأمير سطام بن عبد العزيز",
                            NameEn = "Prince Sattam bin Abdul-Aziz",
                            ToDate = new DateTime(2013, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = new Guid("9fb3aa71-11c9-4b7d-ba0c-533e58da4a07"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(2013, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceKhaledBandar.jpg",
                            IsActive = true,
                            NameAr = "الأمير خالد بن ​بندر بن عبد العزيز",
                            NameEn = "Prince khalid bin Bandar bin Abdul-Aziz",
                            ToDate = new DateTime(2014, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = new Guid("71bec404-89f5-4285-9c88-10905c450c87"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(2014, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceTurkiBinAbdullah.jpg",
                            IsActive = true,
                            NameAr = "الأمير تركي بن عبدالله بن عبد العزيز",
                            NameEn = "Prince ​Turki bin Abdullah bin Abdul-Aziz",
                            ToDate = new DateTime(2015, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = new Guid("fb48a1b0-7d9a-4637-a0d2-e918d8ec80c5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromDate = new DateTime(2015, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "PrinceFaisalBandar.jpg",
                            IsActive = true,
                            NameAr = "الأمير فيصل بن بندر بن عبد العزيز",
                            NameEn = "Prince Faisal bin Bandar bin Abdul-Aziz"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationLink")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PortalLink")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Governorates", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("653dfbf6-92b7-48c9-a8f2-df40a40ec48e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "مدينة الرياض مقر الإمارة",
                            DescriptionEn = "Emirate of Riyadh City",
                            IsActive = true,
                            NameAr = "مدينة الرياض مقر الإمارة",
                            NameEn = "Emirate of Riyadh City"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("86f0bf84-72a8-4740-bfdf-2f84f55ae342"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "هي المحافظة الأولى في المملكة و يحدها من الشمال محافظة حريملاء و من الجنوب محافظة ضرما ومدينة الرياض و من الشرق مدينة الرياض و من الغرب حريملاء و محافظة ضرما وتبلغ مساحتها 2020 كلم2 و يبلغ عدد سكانها 73668 نسمة ( ثلاثة وسبعون ألفا و ستمائة وثمانية وستون ) نسمة و هي عاصمة الدولة السعودية الأولى و الثانية و يوجد بها بيوت أثرية للأسرة السعودية المالكة بنيت قديما على أنقاض مدينة حجر عاصمة اليمامة .",
                            DescriptionEn = "The first governorate in the kingdom. Al-Deri’yaa borders are Hraymlaa from the north, Derma governorate and Riyadh city from the south, Riyadh city from the east, and Hraymlaa and Derma from the west. Its area is 2020 square kilometers. Its population is 73668 people (seventy three thousand, six hundred, and sixty eight). It is the capital of the first and second Saudi state. It has archaeological houses of the Saudi governing family built on the ruins of Hajar city the capital of Al-Yamama.",
                            IsActive = true,
                            NameAr = "محافظةالدرعية",
                            NameEn = "Diriyah Governorate",
                            PhoneNumber = "0114861400",
                            PortalLink = "http://www.aldoriyah.gov.sa/"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("07ac6571-9a11-49d1-81d0-c4805454348a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "وتقع جنوب منطقة الرياض و يحدها من الشرق المنطقة الشرقية و من الغرب محافظة المزاحمية و محافظة الحريق و من الجنوب محافظة الأفلاج و من الشمال مدينة الرياض . و تبلغ مساحتها 19790كلم2 و يبلغ عدد سكانها 376325 نسمة و من الآثار و الأماكن التاريخية بمحافظة الخرج ـ قصر مشرف ـ بلدة اليمامة",
                            DescriptionEn = "It lies in the south of Riyadh region. Its borders are the eastern region from the east, Al-Mzahmya governorate and Al-Hareeq governorate from the west, Al-Aflaj from the south, and Riyadh from the north. Its area is 19790 square kilometers and its population is 376325 people. The historical monuments and places in it includes Musharraf palace and Al-Yamama town.",
                            IsActive = true,
                            NameAr = "محافظةالخرج",
                            NameEn = "Al-Kharj Governorate",
                            PhoneNumber = "0115483800",
                            PortalLink = "http://www.alkharj.gov.sa/"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("c4aa010f-33b2-4bd9-9d19-21e0b736c001"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "ويحدها من الشمال منطقة القصيم و من الجنوب محافظة القويعية و من الغرب منطقة القصيم و محافظة عفيف ، ومن الشرق محافظة شقراء و محافظة مرات. و تبلغ مساحتها 30580كلم2 ـ و يبلغ عدد سكانها 217305 نسمة ، و من الآثار القديمة بمحافظة الدوادمى ـ قصر الملك عبد العزيز _ رحمه الله .",
                            DescriptionEn = "Its borders are Qaseem from the north, Al-Quwai’iyah governorate from the south, Qaseem and Afeef regionsfrom the west, and Shaqra governorate and Mrat village from the east. Its area is 30580 square kilometers and its population is 217305 people. It includes ancient monuments like king Abdul-Aziz palace – may Allah have mercy on him.",
                            IsActive = true,
                            NameAr = "محافظةالدوادمي",
                            NameEn = "Dawadmi Governorate",
                            PhoneNumber = "​0116421057",
                            PortalLink = "http://www.alduwadimi.gov.sa/"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("f063f53b-b228-466b-9495-3ca9f191e65e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال المنطقة الشرقية و منطقة القصيم و من الجنوب محافظة ثادق ومحافظة شقراء و من الشرق محافظة رماح و من الغرب محافظة الزلفى و محافظة الغاط ، و تبلغ مساحتها 30000 كلم2 ـ و يبلغ عدد سكانها 133285 نسمة و من الأماكن التاريخية بمحافظة المجمعة قلعة قديمة تسمى _ المرقب .",
                            DescriptionEn = "Its borders are the eastern region and Qaseem from the north, Thadig and Shaqra governorates from the south, Rammah governorate from the east, and Zulfi and Al-Ghat governorates from the west. Its area is 30000 square kilometers and its population is 133285 people. It includes ancient places like an ancient castle called Al-Marqab",
                            IsActive = true,
                            NameAr = "محافظةالمجمعة",
                            NameEn = "Al Majma'ah Governorate",
                            PhoneNumber = "0164321000",
                            PortalLink = "http://www.almajmah.gov.sa/"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("fcf6e78f-f9c1-4aba-b891-5fdd3b3be958"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة الدوادمى و محافظة مرات و من الجنوب محافظة وادي الدواسر و من الشرق محافظة الحريق و محافظة المزاحمية و محافظة الأفلاج و من الغرب محافظة عفيف ، و تبلغ مساحتها 50580 كلم2 ـ و يبلغ عـدد سكانها 126161 نسمة .",
                            DescriptionEn = "It is borders are Al-Dawadmy governorate and Mrat village from the north, Wadi Al-Dawaser governorate from the south, Al-Hareeq, Al-Muzahmeya, and Al-Aflaj governorates from the east , and Affef governorate from the west. Its area is 50580 square kilometers and its population is 126161 people.",
                            IsActive = true,
                            NameAr = "محافظةالقويعية",
                            NameEn = "Al Quwaiiyah Governorate",
                            PhoneNumber = "0116520830",
                            PortalLink = "http://www.alquwayiyah.gov.sa/"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("6180af6f-08d3-4d7d-93c3-f96a95cb172e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة القويعية و من الجنوب منطقة نجران و من الشرق محافظة السليل و محافظة الأفلاج و من الغرب منطقة عسير ومنطقة مكة المكرمة ـ و تبلغ مساحتها 48900 كلم2 ـ و يبلغ عدد سكانها 106152 نسمة ، و من الآثار و الأماكن التاريخية في المحافظة ـ قصر الحكومة في الخماسين ـ و قصر باطوق و بهجة .",
                            DescriptionEn = "Its borders are Al-Quway’iah governorate from the north, Najran governorate from the south, Saleel and Al-Aflaj governorates from the east, and Aseer and Mecca from the west. Its area is 48900 square kilometers and its population is 106152 people. It includes historical monuments and places like Al-Khamaseen government palace and Batook and Bahga palace.",
                            IsActive = true,
                            NameAr = "محافظة وادي الدواسر",
                            NameEn = "Wadi ad-Dawasir Governorate",
                            PhoneNumber = "0117840292",
                            PortalLink = "http://www.wadiaddawasir.gov.sa/"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("705f988d-2027-474d-ab3c-769636b618a6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة الخرج و محافظة حوطة بنى تميم ومن الجنوب محافظة السليل و من الشرق المنطقة الشرقية و من الغرب محافظة وادي الدواسر و محافظة القويعية و تبلغ مساحتها 54120كم2 و يبلغ عدد سكانها حسب تعداد 1431هـ ـ 68201 نسمة ، و من الآثار و الأماكن التاريخية بالمحافظة ـ جبل التوباد ـ و قصر سلمى .",
                            DescriptionEn = "Its borders are Al-Kharj and Hotat Bani Tameem governorates from the north, Al-Saleel governorate from the south, the eastern region from the east, and Wadi Al-Dawaser and Al-Quway’iyah governorate from the west. Its area is 54120 square kilometers and its population is 68201 people according to 1431 census. It includes historical monuments and places like Tupad mountain and Salma palace.",
                            IsActive = true,
                            NameAr = "محافظةالأفلاج",
                            NameEn = "Al-Aflaj Governorate",
                            PhoneNumber = "0116820144",
                            PortalLink = "http://www.alaflaj.gov.sa/"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("80f555a3-0708-4bb2-acce-b733539d1dd7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال و الغرب منطقة القصيم و من الجنوب محافظة الغاط ومن الشرق محافظة المجمعة و تبلغ مساحتها 5540 كلم 2 و يبلغ عدد سكانها 69294 نسمة .",
                            DescriptionEn = "borders are Qaseem region from the north and the west, Al-Ghat governorate from the south, and Al-Majma’ah governorate from the east. Its area is 5540 square kilometers and its population is 69294 people.",
                            IsActive = true,
                            NameAr = "محافظةالزلفي",
                            NameEn = "Az Zulfi Governorate",
                            PhoneNumber = "0164222222",
                            PortalLink = "http://www.alzulfi.gov.sa/"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = new Guid("24fc4c9c-fef5-4a14-9bd0-b0be6ad51208"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة الغاط و من الجنوب محافظة مرات و من الشرق محافظة المجمعة و محافظة ثادق ومن الغرب محافظة الدوادمى ـ و تبلغ مساحتها 4110 كلم2 ـ و يبلغ عدد سكانها 40541 نسمة .",
                            DescriptionEn = "Its borders are Al-Ghat governorate from the north, Mrat village from the south, Al-Majma’ah and Thadeq governorates from the east, and Al-Dawadmy governorate from the west. Its area is 4110 square kilometers and its population is 40541 people.",
                            IsActive = true,
                            NameAr = "محافظة شـقراء",
                            NameEn = "Shaqra Governorate",
                            PhoneNumber = "0116222225",
                            PortalLink = "http://www.shaqra.gov.sa/"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = new Guid("f61b757f-b02f-4ed3-a9f9-13a86a01d617"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "ويحدها من الشمال محافظة الخرج و محافظة الحريق و من الجنوب محافظة الأفلاج و من الشرق محافظة الخرج و الأفلاج و من الغرب محافظة الحريق ، و تبلغ مساحتها 7350كلم2 ـ و يبلغ عدد سكانها 43300 نسمة ، و يوجد بمركز الحلوة التابع لمحافظة حوطة بنى تميم قلعة الإمام تركي .",
                            DescriptionEn = "Its borders are Al-Kharj and Al-Hareeq governorates from the north, Al-Aflaj governorate from the south, Al-Kharj and Al-Aflaj governorates from the east, and Al-Hareeq governorate from the west. Its area is 7350 square kilometers and its population is 43300 people. In Al-Helwa village following Hotat Bani Tameem governorate, there is Imam Turki castle.",
                            IsActive = true,
                            NameAr = "محافظة حوطة بني تميم",
                            NameEn = "Howtat Bani Tamim Governorate",
                            PhoneNumber = "0115550624",
                            PortalLink = "http://www.alhotah.gov.sa/"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = new Guid("6825c119-d28c-48e7-b1b0-4d43102f76dc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "ويحدها من الشمال منطقة القصيم و من الجنوب منطقة مكة المكرمة و من الشرق محافظة القويعية و محافظة الدوادمى و من الغرب منطقة المدينة المنورة ـ و تبلغ مساحتها 26810 كلم2 ويبلغ عدد سكانها 77978 نسمة .",
                            DescriptionEn = "Its borders are Al-Qaseem region from the north, Mecca region from the south, Al-Quway’iya  and Al-Dawadmygovernorates from the east, and Medina region from the west. Its area is 26810 square kilometers and its population is 77978 people.",
                            IsActive = true,
                            NameAr = "محافظة عفيـف",
                            NameEn = "Afif Governorate",
                            PhoneNumber = "0117221474",
                            PortalLink = "http://www.afif.gov.sa/"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = new Guid("5b008423-20af-4832-9d31-83045a9c4d9e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة الأفلاج و من الجنوب منطقة نجران و من الشرق المنطقة الشرقية و من الغرب محافظة وادي الدواسر و تبلغ مساحتها 42420كلم2 ـ و يبلغ عدد سكانها 36383 نسمة .",
                            DescriptionEn = "Its borders are Al-Aflaj governorate from the north, Najran region from the south, the eastern region from the east, and Wadi Al-Dawaser governorate from the west. Its area is 42420 square kilometers and its population is 36383 people. It includes historical monuments like Al-Faw famous village.",
                            IsActive = true,
                            NameAr = "محافظةالسليل",
                            NameEn = "As Sulayyil Governorate",
                            PhoneNumber = "0117821965",
                            PortalLink = "http://www.alsulayyl.gov.sa/"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = new Guid("99928027-bb89-499c-ad5c-05765b5fe901"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "يحدها من الشمال محافظة الدرعية و محافظة حريملاء ومن الجنوب محافظة المزاحمية و من الشرق مدينة الرياض و محافظة الدرعية ومن الغرب محافظة مرات ـ و تبلغ مساحتها 2060 كلم2 ـ و يبلغ عدد سكانها 24429 نسمة .",
                            DescriptionEn = "Its borders are Deri’yah and Hraymla governorates from the north, Al-Muzahmeya governorate from the south, Riyadh city and Deri’yah governorate from the east, and Mrat village from the west. Its area is 2060 square kilometers and its population is 24429 people.",
                            IsActive = true,
                            NameAr = "محافظة ضـرمـا",
                            NameEn = "Dhurma Governorate",
                            PhoneNumber = "0115221204",
                            PortalLink = "http://www.duruma.gov.sa/"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyStamp = new Guid("b30037d7-c429-4341-8e9e-6a6c54b975a6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة ضرما و من الجنوب محافظة الحريق و من الشرق مدينة الرياض و محافظة الخرج و من الغرب محافظة القويعية و وتبلغ مساحتها 3580 كلم2 ـ و يبلغ عدد سكانها 39865 نسمة .",
                            DescriptionEn = "Its borders are Dharma governorate from the north, Al-Hareeq governorate from the south, Riyadh city and Al-Kharj governorate from the east, and Al-Quway’iyah governorate from the west. Its area is 3580 square kilometers and its population is 39865 people.",
                            IsActive = true,
                            NameAr = "محافظةالمزاحمية",
                            NameEn = "Al-Muzahmiya Governorate",
                            PhoneNumber = "0115230485",
                            PortalLink = "http://www.almuzahmiyah.gov.sa/"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyStamp = new Guid("ddfb92a1-2802-410e-8738-c8dbe946469d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "يحـدها من الشمال المنطقة الشرقية و من الجنوب مدينة الرياض و من الشرق المنطقة الشرقية و من الغرب محافظة المجمعة و محافظة ثادق ومحافظة حريملاء ـ و تبلغ مساحتها 15900 كلم2 ـ و يبلغ عدد سكانها 28055 نسمة .",
                            DescriptionEn = "Its borders are the eastern region from the north, Riyadh city from the south, the eastern region from the east, and Majma’ah, Thadig, and Hraymla governorates from the west. Its area is 15900 square kilometers and its population is 28055 people.",
                            IsActive = true,
                            NameAr = "محافظة رمـاح",
                            NameEn = "Rumah Governorate",
                            PhoneNumber = "0115521166",
                            PortalLink = "http://www.rumah.gov.sa/"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyStamp = new Guid("db91cfd2-7c8d-4d14-83ad-d6533e2adc04"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = " و يحدها من الشمال محافظة المجمعة و من الجنوب محافظة حريملاء و من الشرق محافظة حريملاء و من الغرب محافظة شقراء و محافظة مرات ـ و تبلغ مساحتها 5600 كلم2 ـ و يبلغ عدد سكانها 17165 نسمة .",
                            DescriptionEn = "Its borders are Al-Majma’ah governorate from the north, Hraymla governorate from the south, Hraymla governorate from the east, and Shaqra governorate and Mrat village from the west. Its area is 5600 square kilometers and its population is 17165 people.",
                            IsActive = true,
                            NameAr = "محافظة ثـادق",
                            NameEn = "Thadiq Governorate",
                            PhoneNumber = "0164439670",
                            PortalLink = "http://www.thadiq.gov.sa/"
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyStamp = new Guid("40161bba-85ba-4b27-a98f-0f1957526b12"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة رماح و محافظة ثادق و من الجنوب محافظة الدرعية و محافظة ضرما و من الشرق مدينة الرياض و محافظة رماح و من الغرب محافظة ثادق ـ وتبلغ مساحتها 1480 كلم2 ـ و يبلغ عدد سكانها 15324 نسمة ، و من الآثار التاريخية بمحافظة حريملاء ـ منزل الإمام محمد بن عبد الوهاب ـ و جامع القراشة و جبل القطار .",
                            DescriptionEn = "Its borders are Rmah and Thadig governorates from the north, Diri’yah and Dharma governorates from the south, Riyadh city and Rmah governorate from the east, and Thadig governorate from the west. Its area is 1480 square kilometers and its population is 15324 people. It includes historical monuments like Imam Muhammad bin Abdul-Wahab house, Al-Quarasha mosque, and Al-Qetar mountain.",
                            IsActive = true,
                            NameAr = "محافظة حـريملاء",
                            NameEn = "Huraymila Governorate",
                            PhoneNumber = "0115260540",
                            PortalLink = "http://www.huraymila.gov.sa/"
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyStamp = new Guid("47714d1d-c399-4a66-a1cf-51586ae72d3c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "و يحدها من الشمال محافظة المزاحمية و محافظة الخرج و من الجنوب محافظة حوطة بنى تميم و محافظة االأفلاج و من الشرق محافظة الخرج و محافظة حوطة بنى تميم و من الغرب محافظة القويعية و تبلغ مساحتها 6790كلم2 ـ و يبلغ عدد سكانها 14750 نسمة .",
                            DescriptionEn = "Its borders are Al-Muzahmeya and Al-Kharj governorates from the north, Hotat Bani Tammem and Al-Aflaj governorates from the south, Al-Kharj and Hotat Bani Tamaam governorates from the east, and Al-Quway’iyah governorate from the west. Its area is 6790 square kilometers and its population is 14750 people.",
                            IsActive = true,
                            NameAr = "محافظةالحريق",
                            NameEn = "Al Hariq Governorate",
                            PhoneNumber = "0115370449",
                            PortalLink = "http://www.alhariq.gov.sa/"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyStamp = new Guid("66e4e43f-fbec-44ab-90a4-d9042681dd42"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = " و يحدها من الشمال محافظة الزلفى و من الجنوب محافظة شقراء و من الشرق محافظة المجمعة و من الغرب منطقة القصيم ـ و تبلغ مساحتها 2690 كلم2 .",
                            DescriptionEn = "Its borders are Al-Zulfi governorate from the north, Shaqra governorate from the south, Al-Majma’ah governorate from the east, and Qaseem region from the west. Its area is 2690 square kilometers.",
                            IsActive = true,
                            NameAr = "محافظةالغـاط",
                            NameEn = "Al Ghat Governorate",
                            PhoneNumber = "0164421011",
                            PortalLink = "http://www.alghat.gov.sa/"
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyStamp = new Guid("aa189ad8-99fb-4d27-a9bf-7bd154ef8799"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "تقع في منطقة الرياض إلى الشمال الغربي من مدينة الرياض بين دائرة عرض 40 - 25 درجة شمالاً وبين خط طول 45 - 45 درجة شرقاً تبعد عن مدينة الرياض : 143 كم تقريباً ، مساحتها الجغرافية حسب النطاق الإداري ( 90×100 كم) .\r\n                                  يحد مرات من الجنوب محافظتا القويعية وضرما ، ومن الشمال محافظة شقراء ومن الشرق محافظتا ثادق وحريملاء ، ومن الغرب محافظة الدوادمي",
                            DescriptionEn = "It is located in the Riyadh region, to the northwest of the\r\n                                  city of Riyadh, between latitude 40-25 degrees north and longitude 45-45 degrees east. It is approximately 143 km away from the city of Riyadh. Its geographical area is according to the administrative range (90 x 100 km)\r\n                                  Murat is bordered on the south by the governorates of Al-Quway'iyah and Darma, on the north by Shaqra governorate, on the east by the governorates of Thadiq and Huraymila, and on the west by Al-Dawadmi governorate",
                            IsActive = true,
                            NameAr = "محافظة مرات",
                            NameEn = "Marat Governorate",
                            PhoneNumber = "0116231175"
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyStamp = new Guid("245d794c-1e8b-4a68-9f9f-d3e717ad9828"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = " يبلغ عدد سكان محافظة الدلم 80000 نسمة , ومن المعالم والاثار بمحافظة الدلم غار الامام تركي - موقعة الدلم عام 1320 هـ - سوق الدلم (المسحب) -جبل ابو ولد- غابة الضاحي - برج وسور الدلم - آثار وعيون خفس دغرة - منتزة وثيلان - آثار الفريع بزميقة .",
                            DescriptionEn = " The population of Ad Dilam Governorate is 80,000 people. Among the monuments and monuments in Ad Dilam Governorate are the Ghar of Imam Turki - the Battle of Ad Dilam in 1320 AH - the Ad Dilam Market (Al-Mashab) – Jabal Abu Walad – Al Dhahi Forest – Tower and Walls of Dulm – Ruins and Oyoun Khafs Dagra – Park and Thaylan – the ruins of Al-Fari’ Bzmika.",
                            IsActive = true,
                            NameAr = "محافظة الدلم",
                            NameEn = "Ad-Dilam Governorate",
                            PhoneNumber = "0115416115"
                        },
                        new
                        {
                            Id = 23,
                            ConcurrencyStamp = new Guid("0fe85620-79ed-48f3-9b3c-f6bad2db569a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = " تقع غرب مدينة الرياض ويحدها من الشمال محافظة المزاحمية ومن الجنوب محافظة وادي الدواسر ومن الشرق محافظة الحريق ومن الغرب محافظة القويعية ومن الجنوب الشرقي محافظة حوطة بني تميم ومحافظة الافلاج وتبلغ مساحتها 40 الف كلم2 تقريباً - ويبلغ عدد سكانها40 الف نسمة تقريباً ومن المعالم بمحافظة الرين (جبل دساس - جبال الحصاة - جبل بتران - جبال عريقية - وادي الرين - وادي الركا - وادي السرة - وادي العمق - هضبة الموزر)",
                            DescriptionEn = " It is located west of the city of Riyadh and is bordered to the north by Al-Muzahimiyah Governorate, to the south by Wadi Al-Dawasir Governorate, to the east by Al-Hariq Governorate, to the west by Al-Quway’iyah Governorate, to the southeast by Hotat Bani Tamim Governorate and Al-Aflaj Governorate, with an area of ​​approximately 40,000 km2 and a population of approximately 40,000 people. Dasas - Al-Hassa Mountains - Betran Mountain - Areqi Mountains - Wadi Al-Rain - Wadi Al-Raka - Wadi Al-Surra - Wadi Al-Amq - Al-Mozer Plateau)",
                            IsActive = true,
                            NameAr = "محافظة الرين",
                            NameEn = "Rayn Governorate",
                            PhoneNumber = "0116590355"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.IamLoginHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("IamLoginHistories", "Auth");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.IamResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArabicNationality")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AssuranceLevel")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CardIssueDateGregorian")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CardIssueDateHijri")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FirstNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("HasIdExpired")
                        .HasColumnType("int");

                    b.Property<string>("IdExpirationDateH")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("IdExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdIssuePlaceDescAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IdIssuePlaceDescEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IqamaExpirationDateH")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IssueLocationAr")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IssueLocationEn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LastNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SecondNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SecondNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("SexCode")
                        .HasColumnType("int");

                    b.Property<string>("ThirdNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ThirdNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("IamResponses", "Auth");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MainPagePoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PageContentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PageContentId");

                    b.ToTable("MainPagePoints", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("MaritalStatuses", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("9eb8329f-a026-49d8-9766-b53da018b41d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أعزب",
                            NameEn = "Single"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("5e3644bb-08a5-4eed-b146-3c15baa417ef"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "متزوج",
                            NameEn = "Married"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("48bfc0d9-3dcd-4563-8e2a-c1ad19f97a22"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مطلق",
                            NameEn = "Divorced"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("9034a863-505a-4ec6-92de-d549632d29a5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أرمل",
                            NameEn = "Widower"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("DialCode")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Iso2")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Nationalities", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "101",
                            ConcurrencyStamp = new Guid("85f55f43-b12a-4126-9fcd-30cd8777601a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "971",
                            IsActive = true,
                            Iso2 = "ae",
                            NameAr = "الامارات العربية",
                            NameEn = "Arab Emirates"
                        },
                        new
                        {
                            Id = 2,
                            Code = "102",
                            ConcurrencyStamp = new Guid("c3b553b4-c82f-43e5-b092-6b26876d97f5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "962",
                            IsActive = true,
                            Iso2 = "jo",
                            NameAr = "الاردن",
                            NameEn = "Jordan"
                        },
                        new
                        {
                            Id = 3,
                            Code = "103",
                            ConcurrencyStamp = new Guid("6c7298ce-50f2-4bb2-8140-37c67fe23988"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "973",
                            IsActive = true,
                            Iso2 = "bh",
                            NameAr = "البحرين",
                            NameEn = "Bahrain"
                        },
                        new
                        {
                            Id = 4,
                            Code = "104",
                            ConcurrencyStamp = new Guid("63126955-5225-476f-9864-51b3517ca4fc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "963",
                            IsActive = true,
                            Iso2 = "sy",
                            NameAr = "سوريا",
                            NameEn = "Syria"
                        },
                        new
                        {
                            Id = 5,
                            Code = "105",
                            ConcurrencyStamp = new Guid("f16c4918-04f6-421a-9da9-80c879caefbc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "964",
                            IsActive = true,
                            Iso2 = "iq",
                            NameAr = "العراق",
                            NameEn = "Iraq"
                        },
                        new
                        {
                            Id = 6,
                            Code = "106",
                            ConcurrencyStamp = new Guid("56380196-84b3-443a-aa9f-6a012c919d82"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "968",
                            IsActive = true,
                            Iso2 = "om",
                            NameAr = "عمان",
                            NameEn = "Oman"
                        },
                        new
                        {
                            Id = 7,
                            Code = "107",
                            ConcurrencyStamp = new Guid("c91eff41-425b-44df-9b91-c0aa2caa6461"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "970",
                            IsActive = true,
                            Iso2 = "ps",
                            NameAr = "فلسطين",
                            NameEn = "Palestine"
                        },
                        new
                        {
                            Id = 8,
                            Code = "108",
                            ConcurrencyStamp = new Guid("52b518d8-40e2-4ebb-8662-35dfec771c35"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "974",
                            IsActive = true,
                            Iso2 = "qa",
                            NameAr = "قطر",
                            NameEn = "Qatar"
                        },
                        new
                        {
                            Id = 9,
                            Code = "109",
                            ConcurrencyStamp = new Guid("7dbbe08a-a5b0-46a6-a989-c95d454f1321"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "965",
                            IsActive = true,
                            Iso2 = "kw",
                            NameAr = "الكويت",
                            NameEn = "Kuwait"
                        },
                        new
                        {
                            Id = 10,
                            Code = "110",
                            ConcurrencyStamp = new Guid("465ebc34-354e-4698-bb4c-49fa71150f11"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "961",
                            IsActive = true,
                            Iso2 = "lb",
                            NameAr = "لبنان",
                            NameEn = "Lebanon"
                        },
                        new
                        {
                            Id = 11,
                            Code = "111",
                            ConcurrencyStamp = new Guid("612db004-0b42-4e86-8c1e-2dbd73294306"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "967",
                            IsActive = true,
                            Iso2 = "ye",
                            NameAr = "اليمن",
                            NameEn = "Yemen"
                        },
                        new
                        {
                            Id = 12,
                            Code = "113",
                            ConcurrencyStamp = new Guid("c6f3d1b5-068d-4297-9e19-6c7b7b3900e0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "966",
                            IsActive = true,
                            Iso2 = "sa",
                            NameAr = "العربية السعودية",
                            NameEn = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 13,
                            Code = "201",
                            ConcurrencyStamp = new Guid("742d76be-43c3-4ef0-b796-0b7b7ad6fb29"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "216",
                            IsActive = true,
                            Iso2 = "tn",
                            NameAr = "تونس",
                            NameEn = "Tunisia"
                        },
                        new
                        {
                            Id = 14,
                            Code = "202",
                            ConcurrencyStamp = new Guid("ccd6ceac-15e5-4469-bedc-731376af47b6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "213",
                            IsActive = true,
                            Iso2 = "dz",
                            NameAr = "الجزائر",
                            NameEn = "Algeria"
                        },
                        new
                        {
                            Id = 15,
                            Code = "203",
                            ConcurrencyStamp = new Guid("2050b005-fc92-4ccc-9c81-23384a2bb6d0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "253",
                            IsActive = true,
                            Iso2 = "dj",
                            NameAr = "جيبوتى",
                            NameEn = "Djibouti"
                        },
                        new
                        {
                            Id = 16,
                            Code = "204",
                            ConcurrencyStamp = new Guid("82c1e908-6c52-4dac-99c8-19d009996fc3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "249",
                            IsActive = true,
                            Iso2 = "sd",
                            NameAr = "السودان",
                            NameEn = "Sudan"
                        },
                        new
                        {
                            Id = 17,
                            Code = "205",
                            ConcurrencyStamp = new Guid("bfbf7c54-cfbb-4a58-8c76-58630fef2fdb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "252",
                            IsActive = true,
                            Iso2 = "so",
                            NameAr = "الصومال",
                            NameEn = "Somalia"
                        },
                        new
                        {
                            Id = 18,
                            Code = "206",
                            ConcurrencyStamp = new Guid("7a42f46d-61b7-4752-b9bf-851543c5bb66"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "218",
                            IsActive = true,
                            Iso2 = "ly",
                            NameAr = "ليبيا",
                            NameEn = "Libya"
                        },
                        new
                        {
                            Id = 19,
                            Code = "207",
                            ConcurrencyStamp = new Guid("96b21871-f571-43cc-b3ef-fabe2fb5f4f7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "20",
                            IsActive = true,
                            Iso2 = "eg",
                            NameAr = "مصر",
                            NameEn = "Egypt"
                        },
                        new
                        {
                            Id = 20,
                            Code = "208",
                            ConcurrencyStamp = new Guid("4d55ad1c-e391-4183-809f-327ea63f4915"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "212",
                            IsActive = true,
                            Iso2 = "ma",
                            NameAr = "المغرب",
                            NameEn = "Morocco"
                        },
                        new
                        {
                            Id = 21,
                            Code = "209",
                            ConcurrencyStamp = new Guid("73971c68-a5a5-428f-a368-3ad3a886cd19"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "222",
                            IsActive = true,
                            Iso2 = "mr",
                            NameAr = "موريتانيا",
                            NameEn = "Mauritania"
                        },
                        new
                        {
                            Id = 22,
                            Code = "301",
                            ConcurrencyStamp = new Guid("5e8cddca-259a-4a43-b6b0-b52f4600392b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "93",
                            IsActive = true,
                            Iso2 = "af",
                            NameAr = "افغانستان",
                            NameEn = "Afghanistan"
                        },
                        new
                        {
                            Id = 23,
                            Code = "302",
                            ConcurrencyStamp = new Guid("c12d3851-1912-41f5-99e1-06583c379db0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "62",
                            IsActive = true,
                            Iso2 = "id",
                            NameAr = "اندونيسيا",
                            NameEn = "Indonesia"
                        },
                        new
                        {
                            Id = 24,
                            Code = "303",
                            ConcurrencyStamp = new Guid("e40f4dab-426c-45c9-8677-34dd37fdc085"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "98",
                            IsActive = true,
                            Iso2 = "ir",
                            NameAr = "ايران",
                            NameEn = "Iran"
                        },
                        new
                        {
                            Id = 25,
                            Code = "304",
                            ConcurrencyStamp = new Guid("b9196f33-5271-478b-92bc-f11d11618322"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "92",
                            IsActive = true,
                            Iso2 = "pk",
                            NameAr = "باكستان",
                            NameEn = "Pakistan"
                        },
                        new
                        {
                            Id = 26,
                            Code = "305",
                            ConcurrencyStamp = new Guid("dde3648b-16ae-445f-aa5e-c3c7b68223e9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "880",
                            IsActive = true,
                            Iso2 = "bd",
                            NameAr = "بنجلاديش",
                            NameEn = "Bangladesh"
                        },
                        new
                        {
                            Id = 27,
                            Code = "306",
                            ConcurrencyStamp = new Guid("ccaf15ab-c184-4de0-94e5-cd94d38a8793"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "673",
                            IsActive = true,
                            Iso2 = "bn",
                            NameAr = "بروني",
                            NameEn = "Brunei"
                        },
                        new
                        {
                            Id = 28,
                            Code = "307",
                            ConcurrencyStamp = new Guid("d3fe78b6-330b-4be5-b2d7-8df44c2e1dc4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "95",
                            IsActive = true,
                            Iso2 = "mm",
                            NameAr = "جمهورية ميانمار",
                            NameEn = "Myanmar"
                        },
                        new
                        {
                            Id = 29,
                            Code = "308",
                            ConcurrencyStamp = new Guid("18b5d97e-2994-4bc0-9378-63411cde5469"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "66",
                            IsActive = true,
                            Iso2 = "th",
                            NameAr = "تايلند",
                            NameEn = "Thailand"
                        },
                        new
                        {
                            Id = 30,
                            Code = "309",
                            ConcurrencyStamp = new Guid("bb6db8ac-926c-4ddd-a62d-994901c113bd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "90",
                            IsActive = true,
                            Iso2 = "tr",
                            NameAr = "تركيا",
                            NameEn = "Turkey"
                        },
                        new
                        {
                            Id = 31,
                            Code = "310",
                            ConcurrencyStamp = new Guid("2e313208-3db0-4322-84ff-eba189ad78da"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "960",
                            IsActive = true,
                            Iso2 = "mv",
                            NameAr = "جزر مالديف",
                            NameEn = "Maldives"
                        },
                        new
                        {
                            Id = 32,
                            Code = "311",
                            ConcurrencyStamp = new Guid("cd98761e-4ec8-4572-b7cd-3a8c67162e32"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "7",
                            IsActive = true,
                            Iso2 = "ru",
                            NameAr = "روسيا الاتحادية",
                            NameEn = "Russia"
                        },
                        new
                        {
                            Id = 33,
                            Code = "312",
                            ConcurrencyStamp = new Guid("b17f8161-e51b-4312-b069-c119bb6bfe29"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "65",
                            IsActive = true,
                            Iso2 = "sg",
                            NameAr = "سنغافورة",
                            NameEn = "Singapore"
                        },
                        new
                        {
                            Id = 34,
                            Code = "313",
                            ConcurrencyStamp = new Guid("7d43004a-0031-4f8b-b10a-04fb85f7d57f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "94",
                            IsActive = true,
                            Iso2 = "lk",
                            NameAr = "سري لنكا",
                            NameEn = "Sri Lanka"
                        },
                        new
                        {
                            Id = 35,
                            Code = "315",
                            ConcurrencyStamp = new Guid("70f6859b-8c99-45a3-9629-790f75e422c8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "63",
                            IsActive = true,
                            Iso2 = "ph",
                            NameAr = "الفلبين",
                            NameEn = "Philippines"
                        },
                        new
                        {
                            Id = 36,
                            Code = "316",
                            ConcurrencyStamp = new Guid("9627ea27-3fad-4529-9bb7-e2f2efa41f42"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "84",
                            IsActive = true,
                            Iso2 = "vn",
                            NameAr = "فيتنام",
                            NameEn = "Vietnam"
                        },
                        new
                        {
                            Id = 37,
                            Code = "317",
                            ConcurrencyStamp = new Guid("b045dbe7-5bb5-47e1-9cd7-125bd0baaff9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "855",
                            IsActive = true,
                            Iso2 = "kh",
                            NameAr = "كمبوديا",
                            NameEn = "Cambodia"
                        },
                        new
                        {
                            Id = 38,
                            Code = "318",
                            ConcurrencyStamp = new Guid("58d26893-4fbc-41c7-90a9-226fa176f7b5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "82",
                            IsActive = true,
                            Iso2 = "kr",
                            NameAr = "كوريا الجنوبية",
                            NameEn = "South Korea"
                        },
                        new
                        {
                            Id = 39,
                            Code = "319",
                            ConcurrencyStamp = new Guid("b8e433a1-bdfb-4713-83ea-fd3595354b44"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "60",
                            IsActive = true,
                            Iso2 = "my",
                            NameAr = "ماليزيا",
                            NameEn = "Malaysia"
                        },
                        new
                        {
                            Id = 40,
                            Code = "320",
                            ConcurrencyStamp = new Guid("1023824c-f37f-427d-b990-ff3ff0e92034"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "977",
                            IsActive = true,
                            Iso2 = "np",
                            NameAr = "نيبال",
                            NameEn = "Nepal"
                        },
                        new
                        {
                            Id = 41,
                            Code = "321",
                            ConcurrencyStamp = new Guid("17125f9f-66a7-45ef-83bc-1fec7f596431"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "91",
                            IsActive = true,
                            Iso2 = "in",
                            NameAr = "الهند",
                            NameEn = "India"
                        },
                        new
                        {
                            Id = 42,
                            Code = "322",
                            ConcurrencyStamp = new Guid("d7b4676c-1797-4aae-8925-5977aa10de25"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "852",
                            IsActive = true,
                            Iso2 = "hk",
                            NameAr = "هونج كونج",
                            NameEn = "Hong Kong"
                        },
                        new
                        {
                            Id = 43,
                            Code = "323",
                            ConcurrencyStamp = new Guid("973b9160-07d0-4245-8476-35bb8202c352"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "81",
                            IsActive = true,
                            Iso2 = "jp",
                            NameAr = "اليابان",
                            NameEn = "Japan"
                        },
                        new
                        {
                            Id = 44,
                            Code = "324",
                            ConcurrencyStamp = new Guid("91c09284-ed9f-45c7-8f2f-66edd77262dd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "975",
                            IsActive = true,
                            Iso2 = "bt",
                            NameAr = "بهوتان",
                            NameEn = "Bhutan"
                        },
                        new
                        {
                            Id = 45,
                            Code = "325",
                            ConcurrencyStamp = new Guid("77a480b5-080b-4631-908b-3110d81f5009"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "86",
                            IsActive = true,
                            Iso2 = "cn",
                            NameAr = "الصين الشعبية",
                            NameEn = "China"
                        },
                        new
                        {
                            Id = 46,
                            Code = "326",
                            ConcurrencyStamp = new Guid("7fe09897-25ab-4af5-8471-5c9599ae2cee"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "357",
                            IsActive = true,
                            Iso2 = "cy",
                            NameAr = "قبرص",
                            NameEn = "Cyprus"
                        },
                        new
                        {
                            Id = 47,
                            Code = "328",
                            ConcurrencyStamp = new Guid("be865de4-3c2a-4061-8d3e-939a3eee139c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "850",
                            IsActive = true,
                            Iso2 = "kp",
                            NameAr = "كوريا الشمالية",
                            NameEn = "North Korea"
                        },
                        new
                        {
                            Id = 48,
                            Code = "329",
                            ConcurrencyStamp = new Guid("504a25a7-f627-4a6f-84f2-cda0a42af24f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "856",
                            IsActive = true,
                            Iso2 = "la",
                            NameAr = "لاوس",
                            NameEn = "Laos"
                        },
                        new
                        {
                            Id = 49,
                            Code = "330",
                            ConcurrencyStamp = new Guid("db9d3e17-204d-41bf-81ff-124a7e5275f2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "976",
                            IsActive = true,
                            Iso2 = "mn",
                            NameAr = "منغوليا",
                            NameEn = "Mongolia"
                        },
                        new
                        {
                            Id = 50,
                            Code = "331",
                            ConcurrencyStamp = new Guid("d7863e9d-a729-4482-9c32-e877961a18d9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "853",
                            IsActive = true,
                            Iso2 = "mo",
                            NameAr = "ماكاو",
                            NameEn = "Macao"
                        },
                        new
                        {
                            Id = 51,
                            Code = "332",
                            ConcurrencyStamp = new Guid("a7ecef44-4e46-4eca-b43f-5a12e2bba88a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "تركستان",
                            NameEn = "Turkistan"
                        },
                        new
                        {
                            Id = 52,
                            Code = "335",
                            ConcurrencyStamp = new Guid("b5c62f7b-5c58-468d-8389-cd29318cec38"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "القبائل النازحة",
                            NameEn = "Tribes Emigrated"
                        },
                        new
                        {
                            Id = 53,
                            Code = "336",
                            ConcurrencyStamp = new Guid("58022b90-7d0f-4c06-92af-5da9a0855d7d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "7",
                            IsActive = true,
                            Iso2 = "kz",
                            NameAr = "كازاخستان",
                            NameEn = "Kazakhstan"
                        },
                        new
                        {
                            Id = 54,
                            Code = "337",
                            ConcurrencyStamp = new Guid("aa7cc3cb-3b48-49f1-8399-0ff9077ead96"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "998",
                            IsActive = true,
                            Iso2 = "uz",
                            NameAr = "ازبكستان",
                            NameEn = "Uzbekistan"
                        },
                        new
                        {
                            Id = 55,
                            Code = "338",
                            ConcurrencyStamp = new Guid("8d339bd2-0db9-4184-867d-a4cfe6596fba"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "993",
                            IsActive = true,
                            Iso2 = "tm",
                            NameAr = "تركمانستان",
                            NameEn = "Turkmenistan"
                        },
                        new
                        {
                            Id = 56,
                            Code = "339",
                            ConcurrencyStamp = new Guid("ed358c29-4559-4376-a645-08d62d69fb78"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "992",
                            IsActive = true,
                            Iso2 = "tj",
                            NameAr = "طاجكستان",
                            NameEn = "Tajikistan"
                        },
                        new
                        {
                            Id = 57,
                            Code = "340",
                            ConcurrencyStamp = new Guid("8ea35cc0-770b-42da-8f2b-c506a33dcc91"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "996",
                            IsActive = false,
                            Iso2 = "kg",
                            NameAr = "قرغيزستان",
                            NameEn = "kyrgyzstan"
                        },
                        new
                        {
                            Id = 58,
                            Code = "343",
                            ConcurrencyStamp = new Guid("8ec6a2d6-77c9-4fc8-96a6-a6c86b40f3b9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "994",
                            IsActive = true,
                            Iso2 = "az",
                            NameAr = "اذربيجان",
                            NameEn = "Azerbaijan"
                        },
                        new
                        {
                            Id = 59,
                            Code = "344",
                            ConcurrencyStamp = new Guid("884060a7-88dc-4111-a850-ac0e9f1c0fd1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "الشاشان",
                            NameEn = "Chechnya"
                        },
                        new
                        {
                            Id = 60,
                            Code = "345",
                            ConcurrencyStamp = new Guid("66450b5a-e2a7-4d79-9901-1445aeacc402"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "872",
                            IsActive = false,
                            Iso2 = "da",
                            NameAr = "داغستان",
                            NameEn = "Dagestan"
                        },
                        new
                        {
                            Id = 61,
                            Code = "346",
                            ConcurrencyStamp = new Guid("78d0cd53-d5f6-4ae2-9f2b-346f52ce3a4b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "انقوش",
                            NameEn = "Anquosh"
                        },
                        new
                        {
                            Id = 62,
                            Code = "347",
                            ConcurrencyStamp = new Guid("0080a343-2bef-4c80-a682-6395b0982a88"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "7",
                            IsActive = false,
                            Iso2 = "ta",
                            NameAr = "تتارستان",
                            NameEn = "Tatarstan"
                        },
                        new
                        {
                            Id = 63,
                            Code = "349",
                            ConcurrencyStamp = new Guid("1d2e1efa-704f-430b-9e94-3b4852c0b7d7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "670",
                            IsActive = false,
                            Iso2 = "tp",
                            NameAr = "تيمور الشرقية",
                            NameEn = "East Timor"
                        },
                        new
                        {
                            Id = 64,
                            Code = "401",
                            ConcurrencyStamp = new Guid("8d9d3f96-d216-41c5-95b8-ddf8add2f719"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "251",
                            IsActive = true,
                            Iso2 = "et",
                            NameAr = "اثيوبيا",
                            NameEn = "Ethiopia"
                        },
                        new
                        {
                            Id = 65,
                            Code = "402",
                            ConcurrencyStamp = new Guid("db097d20-a37c-4261-98ee-05426be5c320"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "256",
                            IsActive = true,
                            Iso2 = "ug",
                            NameAr = "اوغندة",
                            NameEn = "Uganda"
                        },
                        new
                        {
                            Id = 66,
                            Code = "403",
                            ConcurrencyStamp = new Guid("4109644a-5b2f-4a90-8bfc-37aa994b8509"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "267",
                            IsActive = true,
                            Iso2 = "bw",
                            NameAr = "بوتسوانا",
                            NameEn = "Botswana"
                        },
                        new
                        {
                            Id = 67,
                            Code = "404",
                            ConcurrencyStamp = new Guid("3f9be182-1d51-4803-9d41-c92810dffe90"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "257",
                            IsActive = true,
                            Iso2 = "bi",
                            NameAr = "بورندي",
                            NameEn = "Burundi"
                        },
                        new
                        {
                            Id = 68,
                            Code = "405",
                            ConcurrencyStamp = new Guid("32409c0a-2860-4a15-9dd8-1b7425b0af54"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "235",
                            IsActive = true,
                            Iso2 = "td",
                            NameAr = "تشاد",
                            NameEn = "Chad"
                        },
                        new
                        {
                            Id = 69,
                            Code = "406",
                            ConcurrencyStamp = new Guid("80f99635-d2ad-4e12-8e77-753afb2740e3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "255",
                            IsActive = true,
                            Iso2 = "tz",
                            NameAr = "تنزانيا",
                            NameEn = "Tanzania"
                        },
                        new
                        {
                            Id = 70,
                            Code = "407",
                            ConcurrencyStamp = new Guid("76193702-f0a2-48fc-b316-f0d02a9bfffe"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "228",
                            IsActive = true,
                            Iso2 = "tg",
                            NameAr = "توجو",
                            NameEn = "Togo"
                        },
                        new
                        {
                            Id = 71,
                            Code = "408",
                            ConcurrencyStamp = new Guid("fd0ad3fc-2f15-4bdb-9461-dfbd78de6fe3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "241",
                            IsActive = true,
                            Iso2 = "ga",
                            NameAr = "جابون",
                            NameEn = "Answer"
                        },
                        new
                        {
                            Id = 72,
                            Code = "409",
                            ConcurrencyStamp = new Guid("abd5d08e-76b5-4022-a239-92e08de9ded4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "220",
                            IsActive = true,
                            Iso2 = "gm",
                            NameAr = "غامبيا",
                            NameEn = "Gambia"
                        },
                        new
                        {
                            Id = 73,
                            Code = "410",
                            ConcurrencyStamp = new Guid("63dfe91a-dae5-46ed-9998-917e4f40184f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "269",
                            IsActive = true,
                            Iso2 = "km",
                            NameAr = "جزر القمر",
                            NameEn = "Comoros"
                        },
                        new
                        {
                            Id = 74,
                            Code = "411",
                            ConcurrencyStamp = new Guid("f3b8386c-daf7-4181-926b-d56938b22df4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "27",
                            IsActive = true,
                            Iso2 = "za",
                            NameAr = "جنوب افريقيا",
                            NameEn = "South Africa"
                        },
                        new
                        {
                            Id = 75,
                            Code = "412",
                            ConcurrencyStamp = new Guid("e91d2ead-552f-4103-b75a-7f0677bf4288"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "264",
                            IsActive = true,
                            Iso2 = "na",
                            NameAr = "ناميبيا",
                            NameEn = "Namibia"
                        },
                        new
                        {
                            Id = 76,
                            Code = "413",
                            ConcurrencyStamp = new Guid("c8be83c9-f6ff-4780-b71a-e93c3b41df4b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "229",
                            IsActive = true,
                            Iso2 = "bj",
                            NameAr = "بنين",
                            NameEn = "Benin"
                        },
                        new
                        {
                            Id = 77,
                            Code = "414",
                            ConcurrencyStamp = new Guid("598b1028-1cd6-40ee-b838-6d13e6bdc8de"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "250",
                            IsActive = true,
                            Iso2 = "rw",
                            NameAr = "رواندا",
                            NameEn = "Rwanda"
                        },
                        new
                        {
                            Id = 78,
                            Code = "415",
                            ConcurrencyStamp = new Guid("1922ac95-28e3-42aa-bb07-e7c90441a012"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "263",
                            IsActive = true,
                            Iso2 = "zw",
                            NameAr = "زمبابوي",
                            NameEn = "Zimbabwe"
                        },
                        new
                        {
                            Id = 79,
                            Code = "416",
                            ConcurrencyStamp = new Guid("1eedc7fd-6e34-415e-aada-10a55bfd4dbb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "243",
                            IsActive = false,
                            Iso2 = "zr",
                            NameAr = "زائير",
                            NameEn = "Zaire"
                        },
                        new
                        {
                            Id = 80,
                            Code = "417",
                            ConcurrencyStamp = new Guid("6cf4f354-5635-4e37-b882-ce1508f3ef03"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "260",
                            IsActive = true,
                            Iso2 = "zm",
                            NameAr = "زامبيا",
                            NameEn = "Zambia"
                        },
                        new
                        {
                            Id = 81,
                            Code = "418",
                            ConcurrencyStamp = new Guid("e8c4ae52-724a-41b9-9483-f912fb14de2c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "225",
                            IsActive = false,
                            Iso2 = "ci",
                            NameAr = "ساحل العاج",
                            NameEn = "Ivory Coast"
                        },
                        new
                        {
                            Id = 82,
                            Code = "419",
                            ConcurrencyStamp = new Guid("92a6e916-88e1-4613-ba32-35a1d2afbf79"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Iso2 = "sn  221",
                            NameAr = "السنغال",
                            NameEn = "Senegal"
                        },
                        new
                        {
                            Id = 83,
                            Code = "420",
                            ConcurrencyStamp = new Guid("447f281a-1504-4963-9098-42600f13ca9a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "232",
                            IsActive = true,
                            Iso2 = "sl",
                            NameAr = "سيراليون",
                            NameEn = "Sierra Leone"
                        },
                        new
                        {
                            Id = 84,
                            Code = "421",
                            ConcurrencyStamp = new Guid("63f2f988-b659-4f9b-a221-26d0242f10c9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "233",
                            IsActive = true,
                            Iso2 = "gh",
                            NameAr = "غانا",
                            NameEn = "Ghana"
                        },
                        new
                        {
                            Id = 85,
                            Code = "422",
                            ConcurrencyStamp = new Guid("b6e26684-2bf3-4915-ad6d-ed2ac8dfb204"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "224",
                            IsActive = true,
                            Iso2 = "gn",
                            NameAr = "غينيا",
                            NameEn = "Guinea"
                        },
                        new
                        {
                            Id = 86,
                            Code = "423",
                            ConcurrencyStamp = new Guid("ec5b5801-e562-4d9f-aa97-25487935d82f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "245",
                            IsActive = true,
                            Iso2 = "gw",
                            NameAr = "غينيابيساو",
                            NameEn = "Guinea Bissau"
                        },
                        new
                        {
                            Id = 87,
                            Code = "424",
                            ConcurrencyStamp = new Guid("0f3846bc-3c76-4f54-86d9-0ab1dc28906d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "226",
                            IsActive = true,
                            Iso2 = "bf",
                            NameAr = "بوركينافاسو",
                            NameEn = "Burkina Faso"
                        },
                        new
                        {
                            Id = 88,
                            Code = "425",
                            ConcurrencyStamp = new Guid("e7007ded-f2ce-4a28-aebf-b350d160f482"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "237",
                            IsActive = true,
                            Iso2 = "cm",
                            NameAr = "الكاميرون",
                            NameEn = "Cameroon"
                        },
                        new
                        {
                            Id = 89,
                            Code = "426",
                            ConcurrencyStamp = new Guid("53c25b51-8cde-4bdf-8119-515306e82759"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "243",
                            IsActive = true,
                            Iso2 = "cd",
                            NameAr = "جمهورية الكونغو الديمقراطية",
                            NameEn = "Congo(DRC)"
                        },
                        new
                        {
                            Id = 90,
                            Code = "427",
                            ConcurrencyStamp = new Guid("20e6c741-0554-4579-9781-ac8d93c5b771"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "254",
                            IsActive = true,
                            Iso2 = "ke",
                            NameAr = "كينيا",
                            NameEn = "Kenya"
                        },
                        new
                        {
                            Id = 91,
                            Code = "428",
                            ConcurrencyStamp = new Guid("60607d1b-1564-4d11-b50e-ab78bfbada11"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "266",
                            IsActive = true,
                            Iso2 = "ls",
                            NameAr = "ليسوتو",
                            NameEn = "Lesotho"
                        },
                        new
                        {
                            Id = 92,
                            Code = "429",
                            ConcurrencyStamp = new Guid("c74a7d66-8885-4c8e-8116-94582469dc35"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "231",
                            IsActive = true,
                            Iso2 = "lr",
                            NameAr = "ليبيريا",
                            NameEn = "Liberia"
                        },
                        new
                        {
                            Id = 93,
                            Code = "430",
                            ConcurrencyStamp = new Guid("37e25070-dd59-419d-b4ab-1b1821679054"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "223",
                            IsActive = true,
                            Iso2 = "ml",
                            NameAr = "مالي",
                            NameEn = "Mali"
                        },
                        new
                        {
                            Id = 94,
                            Code = "432",
                            ConcurrencyStamp = new Guid("b4912a2d-b5d2-4abd-a74e-16355226b25b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "265",
                            IsActive = true,
                            Iso2 = "mw",
                            NameAr = "ملاوي",
                            NameEn = "Malawi"
                        },
                        new
                        {
                            Id = 95,
                            Code = "433",
                            ConcurrencyStamp = new Guid("fb0df254-a9bd-4033-ae2c-c615f6f3afb2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "230",
                            IsActive = true,
                            Iso2 = "mu",
                            NameAr = "موريشيوس",
                            NameEn = "Mauritius"
                        },
                        new
                        {
                            Id = 96,
                            Code = "434",
                            ConcurrencyStamp = new Guid("770e5fc8-68c8-4dea-ab55-9860f0a1c137"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "258",
                            IsActive = true,
                            Iso2 = "mz",
                            NameAr = "موزمبيق",
                            NameEn = "Mozambique"
                        },
                        new
                        {
                            Id = 97,
                            Code = "435",
                            ConcurrencyStamp = new Guid("1eaf0615-cfac-419f-8fd9-f2602ac11e60"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "234",
                            IsActive = true,
                            Iso2 = "ng",
                            NameAr = "نيجيريا",
                            NameEn = "Nigeria"
                        },
                        new
                        {
                            Id = 98,
                            Code = "436",
                            ConcurrencyStamp = new Guid("904b69fb-4c5e-410e-87f0-983a29a865c4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "227",
                            IsActive = true,
                            Iso2 = "ne",
                            NameAr = "النيجر",
                            NameEn = "Niger"
                        },
                        new
                        {
                            Id = 99,
                            Code = "437",
                            ConcurrencyStamp = new Guid("4f864cca-4e75-4d1b-b5b8-e78724f0248f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "236",
                            IsActive = true,
                            Iso2 = "cf",
                            NameAr = "افريقيا الوسطى",
                            NameEn = "Central Africa"
                        },
                        new
                        {
                            Id = 100,
                            Code = "438",
                            ConcurrencyStamp = new Guid("a48e344b-365f-4d94-ad25-8efac99790e6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "244",
                            IsActive = true,
                            Iso2 = "ao",
                            NameAr = "انجولا",
                            NameEn = "Angola"
                        },
                        new
                        {
                            Id = 101,
                            Code = "439",
                            ConcurrencyStamp = new Guid("74187948-181b-43ff-852d-78661a42146f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "599",
                            IsActive = true,
                            Iso2 = "bq",
                            NameAr = "الجزر الكاريبية الهولندية",
                            NameEn = "Caribbean Netherlands"
                        },
                        new
                        {
                            Id = 102,
                            Code = "440",
                            ConcurrencyStamp = new Guid("ccee286f-9f85-4a4b-a04c-79de44134750"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "240",
                            IsActive = true,
                            Iso2 = "gq",
                            NameAr = "غينيا الاستوائية",
                            NameEn = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 103,
                            Code = "441",
                            ConcurrencyStamp = new Guid("9cd17b0d-1b4b-48d3-b9d1-9bdf29632bf9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "ملاجاسي",
                            NameEn = "Mlajasi"
                        },
                        new
                        {
                            Id = 104,
                            Code = "442",
                            ConcurrencyStamp = new Guid("a24a3f52-77b0-4b2d-97af-2baa1b5fc31b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "239",
                            IsActive = true,
                            Iso2 = "st",
                            NameAr = "ساوتومي/برنسبى",
                            NameEn = "S? o Tomé and Pr? ncipe"
                        },
                        new
                        {
                            Id = 105,
                            Code = "443",
                            ConcurrencyStamp = new Guid("e0552cca-0722-4bd8-9ee5-6f7a71cba29b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "248",
                            IsActive = true,
                            Iso2 = "sc",
                            NameAr = "جزر سيشل",
                            NameEn = "Seychelles Islands"
                        },
                        new
                        {
                            Id = 106,
                            Code = "444",
                            ConcurrencyStamp = new Guid("98a0c5d6-ceb1-4edd-85c5-59b0b08e09a1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "268",
                            IsActive = false,
                            Iso2 = "sz",
                            NameAr = "سوزيلاند",
                            NameEn = "Swaziland"
                        },
                        new
                        {
                            Id = 107,
                            Code = "449",
                            ConcurrencyStamp = new Guid("30e98e2c-0b18-46fd-9a60-f605073bf824"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "291",
                            IsActive = true,
                            Iso2 = "er",
                            NameAr = "ارتيريا",
                            NameEn = "Eritrea"
                        },
                        new
                        {
                            Id = 108,
                            Code = "453",
                            ConcurrencyStamp = new Guid("ba4b24ab-0656-4625-afe3-42978beca7d7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "211",
                            IsActive = false,
                            Iso2 = "ss",
                            NameAr = "جمهورية جنوب السودان",
                            NameEn = "Republic of South Sudan"
                        },
                        new
                        {
                            Id = 109,
                            Code = "454",
                            ConcurrencyStamp = new Guid("d46339e2-8ec5-43fb-9426-cd2a141ea4eb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "238",
                            IsActive = true,
                            Iso2 = "cv",
                            NameAr = "كاب فيرد(الراس الاخضر)",
                            NameEn = "Cape Verde"
                        },
                        new
                        {
                            Id = 110,
                            Code = "501",
                            ConcurrencyStamp = new Guid("fafd7430-b2ac-4788-b438-90c5d61d6a94"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "34",
                            IsActive = true,
                            Iso2 = "es",
                            NameAr = "اسبانيا",
                            NameEn = "Spain"
                        },
                        new
                        {
                            Id = 111,
                            Code = "502",
                            ConcurrencyStamp = new Guid("06891588-c230-4d3d-88b7-d36d98d94c5f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "355",
                            IsActive = true,
                            Iso2 = "al",
                            NameAr = "البانيا",
                            NameEn = "Albania"
                        },
                        new
                        {
                            Id = 112,
                            Code = "503",
                            ConcurrencyStamp = new Guid("c85e625f-5378-4158-8455-987d9a446b72"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "49",
                            IsActive = true,
                            Iso2 = "de",
                            NameAr = "المانيا",
                            NameEn = "Germany"
                        },
                        new
                        {
                            Id = 113,
                            Code = "504",
                            ConcurrencyStamp = new Guid("5cfda702-2b55-4d68-93a2-656a96f5c27e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "353",
                            IsActive = true,
                            Iso2 = "ie",
                            NameAr = "ايرلندا",
                            NameEn = "Ireland"
                        },
                        new
                        {
                            Id = 114,
                            Code = "505",
                            ConcurrencyStamp = new Guid("6f38b0f7-addf-4361-9e9c-164a43dc6d2f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "39",
                            IsActive = true,
                            Iso2 = "it",
                            NameAr = "ايطاليا",
                            NameEn = "Italy"
                        },
                        new
                        {
                            Id = 115,
                            Code = "506",
                            ConcurrencyStamp = new Guid("5164a766-6673-4740-8398-abb836173c05"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "44",
                            IsActive = true,
                            Iso2 = "gb",
                            NameAr = "المملكة المتحدة",
                            NameEn = "United Kingdom"
                        },
                        new
                        {
                            Id = 116,
                            Code = "507",
                            ConcurrencyStamp = new Guid("1846888c-8d1f-430c-a624-db2c77237cff"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "351",
                            IsActive = true,
                            Iso2 = "pt",
                            NameAr = "البرتغال",
                            NameEn = "Portugal"
                        },
                        new
                        {
                            Id = 117,
                            Code = "508",
                            ConcurrencyStamp = new Guid("515abcdb-1bcc-498c-b9b0-2c5d9e977734"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "359",
                            IsActive = true,
                            Iso2 = "bg",
                            NameAr = "بلغاريا",
                            NameEn = "Bulgaria"
                        },
                        new
                        {
                            Id = 118,
                            Code = "509",
                            ConcurrencyStamp = new Guid("2bd495da-6535-44e6-9c4f-10e95cc83465"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "32",
                            IsActive = true,
                            Iso2 = "be",
                            NameAr = "بلجيكا",
                            NameEn = "Belgium"
                        },
                        new
                        {
                            Id = 119,
                            Code = "510",
                            ConcurrencyStamp = new Guid("ade44158-08fe-4302-8e1c-c440862d43e9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "48",
                            IsActive = true,
                            Iso2 = "pl",
                            NameAr = "بولندا",
                            NameEn = "Poland"
                        },
                        new
                        {
                            Id = 120,
                            Code = "512",
                            ConcurrencyStamp = new Guid("20950a6e-9e77-4884-8add-8c9737f0a2d1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "45",
                            IsActive = true,
                            Iso2 = "dk",
                            NameAr = "الدانمارك",
                            NameEn = "Denmark"
                        },
                        new
                        {
                            Id = 121,
                            Code = "513",
                            ConcurrencyStamp = new Guid("c1ad2b01-7b53-4b30-8317-7557aa612562"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "40",
                            IsActive = true,
                            Iso2 = "ro",
                            NameAr = "رومانيا",
                            NameEn = "Romania"
                        },
                        new
                        {
                            Id = 122,
                            Code = "514",
                            ConcurrencyStamp = new Guid("87bb2fdc-ffaf-448e-8a93-bc20d606e438"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "46",
                            IsActive = true,
                            Iso2 = "se",
                            NameAr = "السويد",
                            NameEn = "Sweden"
                        },
                        new
                        {
                            Id = 123,
                            Code = "515",
                            ConcurrencyStamp = new Guid("4ef7a194-7dc5-4e07-92c5-02739e3f0b48"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "41",
                            IsActive = true,
                            Iso2 = "ch",
                            NameAr = "سويسرا",
                            NameEn = "Switzerland"
                        },
                        new
                        {
                            Id = 124,
                            Code = "516",
                            ConcurrencyStamp = new Guid("442c35f5-15b5-4214-abfa-2db79a63552e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "33",
                            IsActive = true,
                            Iso2 = "fr",
                            NameAr = "فرنسا",
                            NameEn = "France"
                        },
                        new
                        {
                            Id = 125,
                            Code = "517",
                            ConcurrencyStamp = new Guid("7d462380-15b6-4a9b-b31b-ecb5e1406b1b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "358",
                            IsActive = true,
                            Iso2 = "fi",
                            NameAr = "فنلندا",
                            NameEn = "Finland"
                        },
                        new
                        {
                            Id = 126,
                            Code = "518",
                            ConcurrencyStamp = new Guid("9aa237d0-6ad4-44a1-ad1f-306f8d45040b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "381",
                            IsActive = true,
                            Iso2 = "rs",
                            NameAr = "صربيا",
                            NameEn = "Serbia"
                        },
                        new
                        {
                            Id = 127,
                            Code = "519",
                            ConcurrencyStamp = new Guid("e67f725e-e9e3-498b-b591-a386cb75842c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "31",
                            IsActive = true,
                            Iso2 = "nl",
                            NameAr = "هولندا",
                            NameEn = "Netherlands"
                        },
                        new
                        {
                            Id = 128,
                            Code = "521",
                            ConcurrencyStamp = new Guid("835db626-717a-4f73-8427-dad5915ea4d6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "30",
                            IsActive = true,
                            Iso2 = "gr",
                            NameAr = "اليونان",
                            NameEn = "Greece"
                        },
                        new
                        {
                            Id = 129,
                            Code = "522",
                            ConcurrencyStamp = new Guid("1ef6419e-fa1b-41d6-9c30-0b551ad99d73"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "376",
                            IsActive = true,
                            Iso2 = "ad",
                            NameAr = "اندورا",
                            NameEn = "Andorra"
                        },
                        new
                        {
                            Id = 130,
                            Code = "523",
                            ConcurrencyStamp = new Guid("38c341dc-3f67-4b4a-93af-5ec575a8024a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "43",
                            IsActive = true,
                            Iso2 = "at",
                            NameAr = "النمسا",
                            NameEn = "Austria"
                        },
                        new
                        {
                            Id = 131,
                            Code = "524",
                            ConcurrencyStamp = new Guid("6afe3a3d-06a9-47c1-83cb-323929c0f33c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "382",
                            IsActive = true,
                            Iso2 = "me",
                            NameAr = "الجبل الأ سود",
                            NameEn = "Montenegro"
                        },
                        new
                        {
                            Id = 132,
                            Code = "525",
                            ConcurrencyStamp = new Guid("e2227fe4-31d4-4c19-8109-3203fa29da8b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "36",
                            IsActive = true,
                            Iso2 = "hu",
                            NameAr = "هنغاريا",
                            NameEn = "Hungary"
                        },
                        new
                        {
                            Id = 133,
                            Code = "526",
                            ConcurrencyStamp = new Guid("36ef6999-cb20-4201-a86a-5a6cf11dc7b4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "354",
                            IsActive = true,
                            Iso2 = "is",
                            NameAr = "ايسلندا",
                            NameEn = "Iceland"
                        },
                        new
                        {
                            Id = 134,
                            Code = "527",
                            ConcurrencyStamp = new Guid("27482e05-b320-4173-8024-308cf44db6cb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "423",
                            IsActive = true,
                            Iso2 = "li",
                            NameAr = "ليختنشتين",
                            NameEn = "Liechtenstein"
                        },
                        new
                        {
                            Id = 135,
                            Code = "528",
                            ConcurrencyStamp = new Guid("70736c51-284c-4493-8cab-ff763b39b6bb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "352",
                            IsActive = true,
                            Iso2 = "lu",
                            NameAr = "لوكسمبورغ",
                            NameEn = "Luxembourg"
                        },
                        new
                        {
                            Id = 136,
                            Code = "529",
                            ConcurrencyStamp = new Guid("8678d35c-2a54-46b4-9448-5435a233bf8d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "356",
                            IsActive = true,
                            Iso2 = "mt",
                            NameAr = "مالطا",
                            NameEn = "Malta"
                        },
                        new
                        {
                            Id = 137,
                            Code = "530",
                            ConcurrencyStamp = new Guid("56bd01d6-b6f1-4549-9a01-b9038851eda0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "377",
                            IsActive = true,
                            Iso2 = "mc",
                            NameAr = "موناكو",
                            NameEn = "Monaco"
                        },
                        new
                        {
                            Id = 138,
                            Code = "531",
                            ConcurrencyStamp = new Guid("4cbfd219-cfa0-47ec-b6a8-9b0993ab8148"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "47",
                            IsActive = true,
                            Iso2 = "no",
                            NameAr = "النرويج",
                            NameEn = "Norway"
                        },
                        new
                        {
                            Id = 139,
                            Code = "532",
                            ConcurrencyStamp = new Guid("7d85a0aa-9eaf-4295-9a84-16dc52c9019c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "378",
                            IsActive = true,
                            Iso2 = "sm",
                            NameAr = "سان مارينو",
                            NameEn = "San Marino"
                        },
                        new
                        {
                            Id = 140,
                            Code = "533",
                            ConcurrencyStamp = new Guid("bf3e6a86-1103-4a1c-a957-1a99e71231bd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "39",
                            IsActive = true,
                            Iso2 = "va",
                            NameAr = "مدينة الفاتيكان",
                            NameEn = "Vatican City"
                        },
                        new
                        {
                            Id = 141,
                            Code = "534",
                            ConcurrencyStamp = new Guid("7716dffa-daf6-4e9b-9995-6f08f5cad089"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "350",
                            IsActive = true,
                            Iso2 = "gi",
                            NameAr = "جبل طارق",
                            NameEn = "Gibraltar"
                        },
                        new
                        {
                            Id = 142,
                            Code = "536",
                            ConcurrencyStamp = new Guid("28d4bbd9-f92d-44ee-be3a-4431a92c7685"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "380",
                            IsActive = true,
                            Iso2 = "ua",
                            NameAr = "اوكرانيا",
                            NameEn = "Ukraine"
                        },
                        new
                        {
                            Id = 143,
                            Code = "537",
                            ConcurrencyStamp = new Guid("d7896a81-8eb7-41e7-b04d-614d200462cb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "روسيا البيضاء",
                            NameEn = "Byelorussia"
                        },
                        new
                        {
                            Id = 144,
                            Code = "539",
                            ConcurrencyStamp = new Guid("cddb04d1-e2de-4726-8528-305d5f848214"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "374",
                            IsActive = true,
                            Iso2 = "am",
                            NameAr = "ارمينيا",
                            NameEn = "Armenia"
                        },
                        new
                        {
                            Id = 145,
                            Code = "540",
                            ConcurrencyStamp = new Guid("5c59e701-c987-4b6c-a19e-e557ed57641f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "373",
                            IsActive = true,
                            Iso2 = "md",
                            NameAr = "مولدافيا",
                            NameEn = "Moldova"
                        },
                        new
                        {
                            Id = 146,
                            Code = "541",
                            ConcurrencyStamp = new Guid("198d6410-e606-48d9-96d5-079e37daaa6c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "995",
                            IsActive = true,
                            Iso2 = "ge",
                            NameAr = "جورجيا",
                            NameEn = "Georgia"
                        },
                        new
                        {
                            Id = 147,
                            Code = "542",
                            ConcurrencyStamp = new Guid("e0fa835d-1602-4550-ad29-3130cb6f595a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "370",
                            IsActive = true,
                            Iso2 = "lt",
                            NameAr = "ليتوانيا",
                            NameEn = "Lithuania"
                        },
                        new
                        {
                            Id = 148,
                            Code = "543",
                            ConcurrencyStamp = new Guid("b9f7b088-f361-4fec-88a8-43ab93c026ee"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "372",
                            IsActive = true,
                            Iso2 = "ee",
                            NameAr = "استونيا",
                            NameEn = "Estonia"
                        },
                        new
                        {
                            Id = 149,
                            Code = "544",
                            ConcurrencyStamp = new Guid("76ffe7a0-3134-4033-b10f-99cdb240fd27"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "371",
                            IsActive = true,
                            Iso2 = "lv",
                            NameAr = "لاتفيا",
                            NameEn = "Latvia"
                        },
                        new
                        {
                            Id = 150,
                            Code = "545",
                            ConcurrencyStamp = new Guid("1428464f-733d-4232-b9b6-191e4491755a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "387",
                            IsActive = true,
                            Iso2 = "ba",
                            NameAr = "البوسنة والهرسك",
                            NameEn = "Bosnia / Herzegovina"
                        },
                        new
                        {
                            Id = 151,
                            Code = "546",
                            ConcurrencyStamp = new Guid("4b275059-cb9f-4071-9f64-76374e513228"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "385",
                            IsActive = true,
                            Iso2 = "hr",
                            NameAr = "كرواتيا",
                            NameEn = "Croatia"
                        },
                        new
                        {
                            Id = 152,
                            Code = "547",
                            ConcurrencyStamp = new Guid("f0d4331e-b829-4cf4-a8b4-4ec893516771"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "386",
                            IsActive = true,
                            Iso2 = "si",
                            NameAr = "سلوفينيا",
                            NameEn = "Slovenia"
                        },
                        new
                        {
                            Id = 153,
                            Code = "549",
                            ConcurrencyStamp = new Guid("bc1ca9ca-92fe-4fde-96ab-0285cc477409"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "389",
                            IsActive = true,
                            Iso2 = "mk",
                            NameAr = "مقدونيا",
                            NameEn = "Macedonia"
                        },
                        new
                        {
                            Id = 154,
                            Code = "552",
                            ConcurrencyStamp = new Guid("027c3ccc-d5fe-4ac7-85f3-05822929c3f8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "420",
                            IsActive = true,
                            Iso2 = "cz",
                            NameAr = "تشيك",
                            NameEn = "Czech Republic"
                        },
                        new
                        {
                            Id = 155,
                            Code = "553",
                            ConcurrencyStamp = new Guid("1cb5360c-eb4b-4089-aa95-e67d1e954742"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "421",
                            IsActive = true,
                            Iso2 = "sk",
                            NameAr = "سلوفاكيا",
                            NameEn = "Slovakia"
                        },
                        new
                        {
                            Id = 156,
                            Code = "554",
                            ConcurrencyStamp = new Guid("0a96fe22-33f0-4ef3-83f1-cc3f78b7dddb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "298",
                            IsActive = true,
                            Iso2 = "fo",
                            NameAr = "جزر فيرو",
                            NameEn = "Faroe Islands"
                        },
                        new
                        {
                            Id = 157,
                            Code = "555",
                            ConcurrencyStamp = new Guid("9fda286b-cf4f-48c5-9de6-9892e5600331"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "33",
                            IsActive = false,
                            Iso2 = "fx",
                            NameAr = "ميتروبوليتان فرنسية",
                            NameEn = "France Metropolitan"
                        },
                        new
                        {
                            Id = 158,
                            Code = "601",
                            ConcurrencyStamp = new Guid("93af67ae-59df-4db7-9a43-2281145d9d48"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "us",
                            NameAr = "الولايات المتحدة",
                            NameEn = "United States"
                        },
                        new
                        {
                            Id = 159,
                            Code = "602",
                            ConcurrencyStamp = new Guid("667081f2-6620-49c6-ad2c-3f3d1bd17f0e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "54",
                            IsActive = true,
                            Iso2 = "ar",
                            NameAr = "الارجنتين",
                            NameEn = "Argentina"
                        },
                        new
                        {
                            Id = 160,
                            Code = "603",
                            ConcurrencyStamp = new Guid("04e44ede-776e-4e5d-9412-0c3d48be4e03"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "bb",
                            NameAr = "بربادوس",
                            NameEn = "Barbados"
                        },
                        new
                        {
                            Id = 161,
                            Code = "604",
                            ConcurrencyStamp = new Guid("b57bd3aa-7373-496c-a4da-eedd8ab519fd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "55",
                            IsActive = true,
                            Iso2 = "br",
                            NameAr = "البرازيل",
                            NameEn = "Brazil"
                        },
                        new
                        {
                            Id = 162,
                            Code = "605",
                            ConcurrencyStamp = new Guid("0d4777ce-3999-4398-8299-b7e5cdfd4369"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "507",
                            IsActive = true,
                            Iso2 = "pa",
                            NameAr = "بنما",
                            NameEn = "Panama"
                        },
                        new
                        {
                            Id = 163,
                            Code = "606",
                            ConcurrencyStamp = new Guid("918d8bd8-8fdc-426f-b650-02b884bfb9d0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "tt",
                            NameAr = "ترينداد وتوباجو",
                            NameEn = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 164,
                            Code = "607",
                            ConcurrencyStamp = new Guid("fb922e76-04df-4b60-9c63-038b5f5a229c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "jm",
                            NameAr = "جامايكا",
                            NameEn = "Jamaica"
                        },
                        new
                        {
                            Id = 165,
                            Code = "608",
                            ConcurrencyStamp = new Guid("1484a702-86ae-4396-87ca-1283fb01c4fc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "جوانا",
                            NameEn = "Joanna"
                        },
                        new
                        {
                            Id = 166,
                            Code = "609",
                            ConcurrencyStamp = new Guid("21662e88-9299-4e63-88d5-240a2da89ea2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "58",
                            IsActive = true,
                            Iso2 = "ve",
                            NameAr = "فنزويلا",
                            NameEn = "Venezuela"
                        },
                        new
                        {
                            Id = 167,
                            Code = "610",
                            ConcurrencyStamp = new Guid("4b7e3770-b596-4a3f-b0e6-5822ffaa141f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "ca",
                            NameAr = "كندا",
                            NameEn = "Canada"
                        },
                        new
                        {
                            Id = 168,
                            Code = "611",
                            ConcurrencyStamp = new Guid("3ea8991d-8a7a-4ff4-878c-e8768f98c1d6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "57",
                            IsActive = true,
                            Iso2 = "co",
                            NameAr = "كولمبيا",
                            NameEn = "Columbia"
                        },
                        new
                        {
                            Id = 169,
                            Code = "612",
                            ConcurrencyStamp = new Guid("3f5489c7-f276-440c-81ca-52e15254bc29"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "bs",
                            NameAr = "جزر البهاما",
                            NameEn = "Bahamas"
                        },
                        new
                        {
                            Id = 170,
                            Code = "613",
                            ConcurrencyStamp = new Guid("93edb02d-91a2-4a7c-9d8f-c136ceb305d7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "506",
                            IsActive = true,
                            Iso2 = "cr",
                            NameAr = "كوستاريكا",
                            NameEn = "Costa Rica"
                        },
                        new
                        {
                            Id = 171,
                            Code = "614",
                            ConcurrencyStamp = new Guid("f45b797d-a47c-418a-a753-76312cb1cdfc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "53",
                            IsActive = true,
                            Iso2 = "cu",
                            NameAr = "كوبا",
                            NameEn = "Cuba"
                        },
                        new
                        {
                            Id = 172,
                            Code = "615",
                            ConcurrencyStamp = new Guid("581e222c-d781-47e3-86d0-7df4f4827d4a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "dm",
                            NameAr = "دومينيكا",
                            NameEn = "Dominica"
                        },
                        new
                        {
                            Id = 173,
                            Code = "616",
                            ConcurrencyStamp = new Guid("5348c972-6272-42a5-85ee-6cb1f8ca4bb1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "do",
                            NameAr = "جمهورية دمينكان",
                            NameEn = "Republic Dominica"
                        },
                        new
                        {
                            Id = 174,
                            Code = "617",
                            ConcurrencyStamp = new Guid("36918f8f-3358-4df5-aa10-21d68e4d32fd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "503",
                            IsActive = true,
                            Iso2 = "sv",
                            NameAr = "السلفادور",
                            NameEn = "El Salvador"
                        },
                        new
                        {
                            Id = 175,
                            Code = "618",
                            ConcurrencyStamp = new Guid("c02c75be-ee54-4070-bcfa-fcaec969835f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "gd",
                            NameAr = "جرانادا",
                            NameEn = "Granada"
                        },
                        new
                        {
                            Id = 176,
                            Code = "619",
                            ConcurrencyStamp = new Guid("314caf65-5893-4862-bcdf-8d4f2f869c2c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "502",
                            IsActive = true,
                            Iso2 = "gt",
                            NameAr = "جواتيمالا",
                            NameEn = "Guatemala"
                        },
                        new
                        {
                            Id = 177,
                            Code = "620",
                            ConcurrencyStamp = new Guid("8fa9fe37-8a90-435e-bcb6-85ba59f0075d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "509",
                            IsActive = true,
                            Iso2 = "ht",
                            NameAr = "هايتي",
                            NameEn = "Haiti"
                        },
                        new
                        {
                            Id = 178,
                            Code = "621",
                            ConcurrencyStamp = new Guid("d92c3736-a29e-4538-9f51-28f0c73317eb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "504",
                            IsActive = true,
                            Iso2 = "hn",
                            NameAr = "هوندوراس",
                            NameEn = "Honduras"
                        },
                        new
                        {
                            Id = 179,
                            Code = "622",
                            ConcurrencyStamp = new Guid("5caee840-1450-4138-8dec-cb54a2fdf85d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "52",
                            IsActive = true,
                            Iso2 = "mx",
                            NameAr = "المكسيك",
                            NameEn = "Mexico"
                        },
                        new
                        {
                            Id = 180,
                            Code = "623",
                            ConcurrencyStamp = new Guid("d01893d1-cabd-43cf-b921-6d18528457da"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "505",
                            IsActive = true,
                            Iso2 = "ni",
                            NameAr = "نيكاراجوا",
                            NameEn = "Nicaragua"
                        },
                        new
                        {
                            Id = 181,
                            Code = "624",
                            ConcurrencyStamp = new Guid("69a6eb02-ff8b-49a5-98ae-736250fa01d0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "lc",
                            NameAr = "سانت لوسيا",
                            NameEn = "Saint Lucia"
                        },
                        new
                        {
                            Id = 182,
                            Code = "625",
                            ConcurrencyStamp = new Guid("8db8de38-94b4-4df5-aca7-3b76d04c6581"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "1",
                            IsActive = true,
                            Iso2 = "vc",
                            NameAr = "سان فينسنت",
                            NameEn = "Saint Vincent"
                        },
                        new
                        {
                            Id = 183,
                            Code = "626",
                            ConcurrencyStamp = new Guid("a44000ad-7a95-4c60-adac-1b23cda3878b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "591",
                            IsActive = true,
                            Iso2 = "bo",
                            NameAr = "بوليفيا",
                            NameEn = "Bolivia"
                        },
                        new
                        {
                            Id = 184,
                            Code = "627",
                            ConcurrencyStamp = new Guid("404589eb-2b5e-424e-aac0-2448d8ceaa3b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "56",
                            IsActive = true,
                            Iso2 = "cl",
                            NameAr = "شيلي",
                            NameEn = "Chile"
                        },
                        new
                        {
                            Id = 185,
                            Code = "628",
                            ConcurrencyStamp = new Guid("cc5ed407-eb74-492f-842f-93c896b056e4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "593",
                            IsActive = true,
                            Iso2 = "ec",
                            NameAr = "اكوادور",
                            NameEn = "Ecuador"
                        },
                        new
                        {
                            Id = 186,
                            Code = "629",
                            ConcurrencyStamp = new Guid("90750472-72c3-4973-94b3-1072e30596df"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "595",
                            IsActive = true,
                            Iso2 = "py",
                            NameAr = "باراجواي",
                            NameEn = "Paraguay"
                        },
                        new
                        {
                            Id = 187,
                            Code = "630",
                            ConcurrencyStamp = new Guid("62a4cd06-76cc-40eb-8ad9-69e879deddef"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "51",
                            IsActive = true,
                            Iso2 = "pe",
                            NameAr = "بيرو",
                            NameEn = "Peru"
                        },
                        new
                        {
                            Id = 188,
                            Code = "701",
                            ConcurrencyStamp = new Guid("e591a1b7-21a5-4e30-86b1-ab2e9ddda3cf"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "61",
                            IsActive = true,
                            Iso2 = "au",
                            NameAr = "استراليا",
                            NameEn = "Australia"
                        },
                        new
                        {
                            Id = 189,
                            Code = "702",
                            ConcurrencyStamp = new Guid("db83e1a8-e7fa-4566-b01b-f3c885aa91f4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "64",
                            IsActive = true,
                            Iso2 = "nz",
                            NameAr = "نيوزيلندا",
                            NameEn = "New Zealand"
                        },
                        new
                        {
                            Id = 190,
                            Code = "703",
                            ConcurrencyStamp = new Guid("78efd2b4-6dfe-433d-b0e9-76644ec275cd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DialCode = "598",
                            IsActive = true,
                            Iso2 = "yu",
                            NameAr = "أوروغواي",
                            NameEn = "Uruguay"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArabic")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NewsCategueryId")
                        .HasColumnType("int");

                    b.Property<string>("NewsOrigin")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("NewsTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("OpenComments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("NewsCategueryId");

                    b.ToTable("News", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsCateguery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("NewsCategueries", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("8cfa9f5e-d9fe-4520-91c1-a6baf886764e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "غير مصنف",
                            NameEn = "Not Categuerized"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("ab9b7f3f-9d4b-43a1-ba72-b2902c4ac5fc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أخبار الأمير",
                            NameEn = "Prince News"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("cd546fb1-6f85-479e-b38f-89bd2bc16626"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أخبار النائب",
                            NameEn = "Deputy News"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("621aedbb-0b45-4c84-812c-9250d3e17776"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "أخبار الإمارة",
                            NameEn = "Emirate News"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("CommentStageId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentStageId");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsComments", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataCateguery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OpenDataSubCategueryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("OpenDataSubCategueryId");

                    b.ToTable("OpenDataCategueries", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("5e24d8b1-bc89-4c4d-8654-fa38aa5f1c01"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تقارير الخدمات الإلكترونية",
                            NameEn = "E-Services Reports",
                            OpenDataSubCategueryId = 2
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("85789913-a001-49aa-a04d-f703f53ee1d6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تقارير المعاملات",
                            NameEn = "Transaction Reports",
                            OpenDataSubCategueryId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("38f52694-f156-4c29-b452-d79afa0d0a51"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "المعاملات لصفة صاحب المعاملة",
                            NameEn = "Transactions for the owner of the transaction",
                            OpenDataSubCategueryId = 2
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("4fcf2d4d-c940-4fb6-a2f2-501f2ccf0da8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "الحصر",
                            NameEn = "Limitation",
                            OpenDataSubCategueryId = 1
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OpenDataCategueryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("OpenDataCategueryId");

                    b.ToTable("OpenDataReports", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsReplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("OpenDataRequests", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataSubCateguery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("OpenDataSubCategueries", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("b58a1da0-c048-44b3-90f7-c5c2e42b06c4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سنوي",
                            NameEn = "Annual"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("95110136-426b-41d8-a89a-ffa660cf2a01"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "نصف سنوي",
                            NameEn = "Semi-annual"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("c1e3f345-f71f-4223-a32f-c8630a03553f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "ربع سنوي",
                            NameEn = "Quarterly"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("e9b481dc-4e1a-40ce-9bb8-f34e0a0092bf"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شهري",
                            NameEn = "Monthly"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.PageContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PageContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PageContent", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("7f30a72a-a672-4740-83fb-5c02070af0f1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "عن الاماره",
                            DescriptionEn = "About us",
                            PageContentType = "AboutUs"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("f41fcbb2-a163-4baa-901d-2111020b1178"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "القسم النسوي",
                            DescriptionEn = "Woman sections",
                            PageContentType = "WomanSection"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Poster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Posters", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("9b7998be-e225-4c26-be34-4ca30a337902"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageName = "slider.png",
                            IsActive = true,
                            Order = 1,
                            TitleAr = "يوم بدينا",
                            TitleEn = "Day We Start"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Prison", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Prisons", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("31aa1693-31c9-4f8b-aa8b-5a12085d670f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن الحاير",
                            NameEn = "Al-Ha'ir Prison"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("ea9dbf99-a93d-4f00-88cf-a9a7cc8441f9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن الملز",
                            NameEn = "Al-Malaz Prison"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("7c4e5bb9-f171-4680-8504-fa0d4775f978"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن النساء",
                            NameEn = "Women Prison"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("a222473b-b88a-4661-9ca4-be769e95957f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة المجمعة",
                            NameEn = "Majma'ah Governorate Prison"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("c26d6420-be56-4f32-8a9b-18ee062c01b6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة الزلفي",
                            NameEn = "Az Zulfi Governorate Prison"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("4a65774c-95d7-459b-bcb1-bdbc64ae6726"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة الدوادمي",
                            NameEn = "Dawadmi Governorate Prison"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("34f3dea5-7425-4603-a340-3f477147df09"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة عفيف",
                            NameEn = "Afif Governorate Prison"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("512a84bf-b393-4be6-9e0d-306a8a5c0198"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة القويعية",
                            NameEn = "Al Quwaiiyah Governorate Prison"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("ff70a8ef-d1d4-45ab-acf3-69a23348b8ae"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة الخرج",
                            NameEn = "Al-Kharj Governorate Prison"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = new Guid("4a3079e9-4341-43b2-9517-fc445d9fbc45"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة حوطة بني تميم",
                            NameEn = "Howtat Bani Tamim Governorate Prison"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = new Guid("5a5135e4-892b-4f7a-b256-e4e68bacae1a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة الأفلاج",
                            NameEn = "Al-Aflaj Governorate Prison"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = new Guid("e5c73ffe-949e-4383-b44b-5bb1364066d0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة وادي الدواسر",
                            NameEn = "Wadi ad-Dawasir Governorate Prison"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = new Guid("92c1961d-f789-4444-964d-1979f34323cb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة شقراء",
                            NameEn = "Shaqra Governorate Prison"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = new Guid("83c40713-7709-4fd8-89eb-21b8b01d3840"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سجن محافظة الوافدين",
                            NameEn = "Al Wafedien Governorate Prison"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyStamp = new Guid("e10d971d-d1c3-44b3-a35a-daa024999848"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "اصلاحية الرياض",
                            NameEn = "Riyadh Reformatory"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Religions", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("631918d2-0a40-42e0-be87-392b821568be"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مسلم",
                            NameEn = "Muslem"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StageId");

                    b.ToTable("Requests", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestAttachmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtentionAllowed")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxFileSize")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("RequestAttachmentTypes", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestElectronicBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestContent")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RequestTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestElectronicBoards", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestElectronicSummon", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestContent")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RequestTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestElectronicSummons", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestForeignersRealtyOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("BuildingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingTypeId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("ReligionId");

                    b.ToTable("RequestForeignersRealtyOwners", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestJudgmentExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DefendantTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LawsuitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LawsuitNumber")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RequesterName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RequesterNationalId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("RequesterType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefendantTypeId");

                    b.ToTable("RequestJudgmentExecutions", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestLandsInfringement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EstimatedSpace")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("InfringerDescription")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("InfringerName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestLandsInfringements", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestMarriageCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChildrenCount")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeSide")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("JobOccupation")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestMarriageCertificates", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestNumberSequence", b =>
                {
                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.ToSqlQuery("SELECT NEXT VALUE FOR Request.RequestNumberSequence AS [Value]");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestPrisonersService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PrisonId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("PrisonId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestPrisonersServices", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestPrisonerTempRelease", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PrisonId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("PrisonId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestPrisonerTempReleases", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestStageLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("RequestId");

                    b.HasIndex("StageId");

                    b.ToTable("RequestStageLogs", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestTreatmentRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PatientNationalId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("PatientType")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestTreatmentRecommendations", "Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("RequestTypes", "Request");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("4b8f2df9-cd9e-4ea3-a40c-8e5d6fca9243"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "حضور زواج",
                            NameEn = "حضور زواج",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("047656e6-ad43-48da-955f-571db6a065c8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زيارة الوالدين والأهل",
                            NameEn = "زيارة الوالدين والأهل",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("b074ad49-2e55-44dc-bb75-669ed60f7d5f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زيارة مريض",
                            NameEn = "زيارة مريض",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("d960c8eb-7ae9-4f79-b2c9-5ba08af049ff"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تسجيل في الجامعة",
                            NameEn = "تسجيل في الجامعة",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("bc11c444-1692-42cc-b8be-bc978a1912dd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "عزاء",
                            NameEn = "عزاء",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("6eda820b-74a6-4592-8e0f-a93d2944eca0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "العلاج والتنويم",
                            NameEn = "العلاج والتنويم",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("d12c8b50-63c9-4d2f-a089-2f92521d6f79"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إبعاد سجين لبلادة",
                            NameEn = "إبعاد سجين لبلادة",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("003dc5ae-bf1a-4012-ba57-1ba196c07da5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إعفاء من الإبعاد",
                            NameEn = "إعفاء من الإبعاد",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("7e887418-b4a0-4dec-8b7b-a9efaa1d871a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إعفاء من باقي المحكومية لسجين",
                            NameEn = "إعفاء من باقي المحكومية لسجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = new Guid("e270120c-7d5e-4303-9f52-824d986254c9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إفراج صحي لسجين",
                            NameEn = "إفراج صحي لسجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = new Guid("08adae25-4919-40d5-81cd-090d575b186d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "إنهاء قضايا الأحداث الاجانب",
                            NameEn = "إنهاء قضايا الأحداث الاجانب",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = new Guid("c669ac19-c04b-4bb0-bfca-9e1746ee5078"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تثبيت سجين في سجنه",
                            NameEn = "تثبيت سجين في سجنه",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = new Guid("789f7a7c-ee33-422c-ab76-976424370dde"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "ترحيل سجين",
                            NameEn = "ترحيل سجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = new Guid("a3309a03-0212-4fb8-b235-6e56d9d31a80"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زيارة خاصة لسجين",
                            NameEn = "زيارة خاصة لسجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyStamp = new Guid("ffe34e4a-46d3-4a92-b443-8d1651aa903e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زيارة خاصة مكتبية لسجين",
                            NameEn = "زيارة خاصة مكتبية لسجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyStamp = new Guid("b57b46af-ebe9-4542-9af3-5ec51a2348ba"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "طلب نقل سجين",
                            NameEn = "طلب نقل سجين",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyStamp = new Guid("1bc36205-5dcf-403f-8d82-d54c9bbc1c4f"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "اقتراح",
                            NameEn = "اقتراح",
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyStamp = new Guid("10b3cd76-789f-4592-870c-624462970760"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شكوى",
                            NameEn = "شكوى",
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyStamp = new Guid("3bd7c2b8-e006-41b3-900f-34bcff0d1a8d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "طلب",
                            NameEn = "طلب",
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyStamp = new Guid("f8580390-f725-43c2-9ef2-cc57b950bee6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زراعي",
                            NameEn = "زراعي",
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyStamp = new Guid("51c51a8c-a4b9-43ed-94b2-98d8b23d493c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "سكني",
                            NameEn = "سكني",
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyStamp = new Guid("5b4332d9-20e5-4460-b077-6d2a1021ece6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تجاري",
                            NameEn = "تجاري",
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 23,
                            ConcurrencyStamp = new Guid("75d1d41c-dcbd-40f1-a16f-a1a250161785"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "اقتراح",
                            NameEn = "اقتراح",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 24,
                            ConcurrencyStamp = new Guid("ae1f2dad-b878-41c3-a880-eb86b368f8cb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "شكوى",
                            NameEn = "شكوى",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 25,
                            ConcurrencyStamp = new Guid("9908e226-62e5-455f-8b11-4f477bd923c7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "طلب",
                            NameEn = "طلب",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 26,
                            ConcurrencyStamp = new Guid("3c936116-6a2d-4cec-aaf3-b706d2a695d2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودية من أجنبي",
                            NameEn = "زواج السعودية من أجنبي",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 27,
                            ConcurrencyStamp = new Guid("aa27f4c3-9420-4c3a-b8c9-d0c44a84649a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودي من دولة المغرب",
                            NameEn = "زواج السعودي من دولة المغرب",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 28,
                            ConcurrencyStamp = new Guid("839f03a0-0bf7-4e2a-8986-e7d1167609e3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودي من غير سعودية مقيمة بالمملكة",
                            NameEn = "زواج السعودي من غير سعودية مقيمة بالمملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 29,
                            ConcurrencyStamp = new Guid("4da4ad83-a019-4baf-9aae-48dd8fb25c27"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودي من غير سعودية مولودة بالمملكة",
                            NameEn = "زواج السعودي من غير سعودية مولودة بالمملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 30,
                            ConcurrencyStamp = new Guid("ebcda14e-f2e6-49d9-a520-5407c4c2c5a7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودية من غير سعودي مقيم بالمملكة",
                            NameEn = "زواج السعودية من غير سعودي مقيم بالمملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 31,
                            ConcurrencyStamp = new Guid("826941ff-f42e-4edd-8786-396301c17484"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودية من غير سعودي مولود بالمملكة",
                            NameEn = "زواج السعودية من غير سعودي مولود بالمملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 32,
                            ConcurrencyStamp = new Guid("873832de-f175-4706-aa8c-00651cdfb2ab"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "زواج السعودي من غير سعودية من خارج المملكة",
                            NameEn = "زواج السعودي من غير سعودية من خارج المملكة",
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 33,
                            ConcurrencyStamp = new Guid("da0e9406-feb5-4812-b6f0-3f53c4364c6c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "العلاج النفسي",
                            NameEn = "العلاج النفسي",
                            ServiceId = 9
                        },
                        new
                        {
                            Id = 34,
                            ConcurrencyStamp = new Guid("a7ab3180-1199-4f55-9993-68567b0de173"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "علاج الإدمان",
                            NameEn = "علاج الإدمان",
                            ServiceId = 9
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Roles", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("719c6108-9bd1-455c-a156-7863bb82ed40"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameAr = "مدير عام النظام",
                            NameEn = "Super System Admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("66883b17-6c35-4512-b2fe-d79329631e60"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مدير النظام",
                            NameEn = "System Admin"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("1bd5e4e1-2781-494b-b1d1-fb777ab24a83"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "صلاحيات الأخبار",
                            NameEn = "News Permission"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("e042e3f1-16c5-478c-82c9-f3f8db062cd3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "صلاحيات الاعدادات",
                            NameEn = "Setting Permission"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("585843a6-4f7f-46ec-8c6f-a612de486b1d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "صلاحيات المستخدمين",
                            NameEn = "Users Permission"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("efc2ada5-5f51-4298-acfe-ee81c4b451a0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مراجعة الطلبات",
                            NameEn = "Request Review"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("6f9b5c6d-849d-4805-9da5-0670e2be85f0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مراجعة طلبات شامل",
                            NameEn = "Shamel Request Review"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RequestLink")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SectorAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SectorEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WorkDays")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Services", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("3fd7fcbf-a2e5-40b3-a6d5-9de40ea7a9eb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "المجلس الالكتروني",
                            DescriptionEn = "المجلس الالكتروني",
                            ImageName = "e-council.png",
                            IsActive = true,
                            IsExternal = true,
                            NameAr = "المجلس الالكتروني",
                            NameEn = "Electronic Board",
                            RequestLink = "/home/grm",
                            SectorAr = "المجلس الالكتروني",
                            SectorEn = "المجلس الالكتروني",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("436b0fcf-078f-4241-bd10-44f602cd24ff"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "الخروج المؤقت لسجين",
                            DescriptionEn = "الخروج المؤقت لسجين",
                            ImageName = "prisoner.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "الخروج المؤقت لسجين",
                            NameEn = "Prisoner Temp Release",
                            RequestLink = "/eservice/prisoner-temp-release",
                            SectorAr = "الخروج المؤقت لسجين",
                            SectorEn = "الخروج المؤقت لسجين",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("b3891d22-055c-475a-be0c-13f1453c5d94"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "خدمات السجناء",
                            DescriptionEn = "خدمات السجناء",
                            ImageName = "prisoner.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "خدمات السجناء",
                            NameEn = "Prisoners Services",
                            RequestLink = "/eservice/prisoners-services",
                            SectorAr = "خدمات السجناء",
                            SectorEn = "خدمات السجناء",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("add59cc2-eee1-4405-befb-30d9f43d308b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "الاستدعاء الإلكتروني",
                            DescriptionEn = "الاستدعاء الإلكتروني",
                            ImageName = "contract.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "الاستدعاء الإلكتروني",
                            NameEn = "Electronic Summon",
                            RequestLink = "/eservice/electronic-summon",
                            SectorAr = "الاستدعاء الإلكتروني",
                            SectorEn = "الاستدعاء الإلكتروني",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("5fdc31de-da10-40d6-8fad-2aac826183fb"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "التعديات على الأراضي الحكومية",
                            DescriptionEn = "التعديات على الأراضي الحكومية",
                            ImageName = "contract.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "التعديات على الأراضي الحكومية",
                            NameEn = "Infringements On Government Land",
                            RequestLink = "/eservice/lands-infringement",
                            SectorAr = "التعديات على الأراضي الحكومية",
                            SectorEn = "التعديات على الأراضي الحكومية",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("d8d80f17-e671-4013-bacc-f87c3955ef23"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "انفاذ الحكم الشرعي",
                            DescriptionEn = "انفاذ الحكم الشرعي",
                            ImageName = "magnifying-glass.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "انفاذ الحكم الشرعي",
                            NameEn = "Judgment Execution",
                            RequestLink = "/eservice/judgment-execution",
                            SectorAr = "انفاذ الحكم الشرعي",
                            SectorEn = "انفاذ الحكم الشرعي",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = new Guid("afccf00c-944e-4c31-9d66-0a36f682f418"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "توثيق زواج",
                            DescriptionEn = "توثيق زواج",
                            ImageName = "couple.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "توثيق زواج",
                            NameEn = "Marriage Certificate",
                            RequestLink = "/eservice/marriage-certificate",
                            SectorAr = "توثيق زواج",
                            SectorEn = "توثيق زواج",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = new Guid("ccc90356-7156-417d-82fd-9f744b9f2449"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "تملك عقار للأجانب",
                            DescriptionEn = "تملك عقار للأجانب",
                            ImageName = "magnifying-glass.svg",
                            IsActive = false,
                            IsExternal = false,
                            NameAr = "تملك عقار للأجانب",
                            NameEn = "Realty Ownership For Foreigners",
                            RequestLink = "/eservice/foreigners-realty-owner",
                            SectorAr = "تملك عقار للأجانب",
                            SectorEn = "تملك عقار للأجانب",
                            WorkDays = "10"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = new Guid("859dd8c6-04bf-47aa-88bd-0f5aba2d0cc7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionAr = "طلب علاج",
                            DescriptionEn = "طلب علاج",
                            ImageName = "magnifying-glass.svg",
                            IsActive = true,
                            IsExternal = false,
                            NameAr = "طلب علاج",
                            NameEn = "Treatment Recommendation",
                            RequestLink = "/eservice/treatment-recommendation",
                            SectorAr = "طلب علاج",
                            SectorEn = "طلب علاج",
                            WorkDays = "10"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceAudience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AudienceId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AudienceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceAudiences", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsBenefit")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceBenefits", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceConditions", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StarsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("ServiceRates", "DataManagement");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdminUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequesterUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StageId");

                    b.ToTable("ServiceStages", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("ccc3037e-49ac-4327-b553-bec99b9c7181"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release",
                            ServiceId = 2,
                            StageId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-preview-step",
                            ConcurrencyStamp = new Guid("09754650-8b30-46bf-bd9d-3ea9a1ff1175"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 2
                        },
                        new
                        {
                            Id = 3,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("989b6bd1-8417-4d95-801d-55fc185e7033"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release",
                            ServiceId = 2,
                            StageId = 3
                        },
                        new
                        {
                            Id = 4,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("8d2013bf-d692-4101-9d53-153547ecc1e0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 4
                        },
                        new
                        {
                            Id = 5,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("f01bd3ca-0188-403f-9714-3a17d5dea7a4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 5
                        },
                        new
                        {
                            Id = 6,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("d56d478a-3ab5-45c0-aef3-9f4042787df3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 6
                        },
                        new
                        {
                            Id = 7,
                            AdminUrl = "/admin/eservice-admin/prisoner-temp-release-admin-view",
                            ConcurrencyStamp = new Guid("364f5f07-ae0d-46aa-9a68-8c20a35a61b6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoner-temp-release-view",
                            ServiceId = 2,
                            StageId = 7
                        },
                        new
                        {
                            Id = 8,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("1f22d3a6-1169-401a-b746-4580dc1f1ca2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services",
                            ServiceId = 3,
                            StageId = 1
                        },
                        new
                        {
                            Id = 9,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-preview-step",
                            ConcurrencyStamp = new Guid("d7a7eab6-0590-459b-9913-a2e6870ac1cc"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 2
                        },
                        new
                        {
                            Id = 10,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("e799bfe2-737b-4185-8d35-c4c0fa730751"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services",
                            ServiceId = 3,
                            StageId = 3
                        },
                        new
                        {
                            Id = 11,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("6783e29c-d04d-4f2b-8df6-e1c321c18219"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 4
                        },
                        new
                        {
                            Id = 12,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("5263692b-e04f-430b-85a9-54fffaff40e2"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 5
                        },
                        new
                        {
                            Id = 13,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("926824f6-65a5-4bef-b503-1065a148d1d5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 6
                        },
                        new
                        {
                            Id = 14,
                            AdminUrl = "/admin/eservice-admin/prisoners-services-admin-view",
                            ConcurrencyStamp = new Guid("a69595d5-4c77-4324-a03d-4e453af0b412"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/prisoners-services-view",
                            ServiceId = 3,
                            StageId = 7
                        },
                        new
                        {
                            Id = 15,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("a21c71e2-913a-4f9e-ad1a-8f6b663a31c0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning",
                            ServiceId = 3,
                            StageId = 1
                        },
                        new
                        {
                            Id = 16,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-preview-step",
                            ConcurrencyStamp = new Guid("360f40d9-c979-4873-a752-fcfa5e3df287"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 2
                        },
                        new
                        {
                            Id = 17,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("d95beebb-3149-4e31-9d5e-ba3b2cc6dd73"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning",
                            ServiceId = 3,
                            StageId = 3
                        },
                        new
                        {
                            Id = 18,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("94fb272b-aa9f-45f1-8a36-8828c5bd1d6e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 4
                        },
                        new
                        {
                            Id = 19,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("1b9a8507-caaa-4300-9608-5768f9fc98b4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 5
                        },
                        new
                        {
                            Id = 20,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("fe093421-9a53-4453-b172-96f5f6598779"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 6
                        },
                        new
                        {
                            Id = 21,
                            AdminUrl = "/admin/eservice-admin/electronic-summoning-admin-view",
                            ConcurrencyStamp = new Guid("595ff426-5894-43bc-9d05-539aa707d8a8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summoning-view",
                            ServiceId = 3,
                            StageId = 7
                        },
                        new
                        {
                            Id = 22,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("2188dd53-05a5-42fa-bf8d-a1710897c9df"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon",
                            ServiceId = 4,
                            StageId = 1
                        },
                        new
                        {
                            Id = 23,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-preview-step",
                            ConcurrencyStamp = new Guid("a7f38339-88ee-4b97-8d9b-dd6223d05d5a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 2
                        },
                        new
                        {
                            Id = 24,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("c70e5090-aeb7-4c5f-8484-790d5165d5f7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon",
                            ServiceId = 4,
                            StageId = 3
                        },
                        new
                        {
                            Id = 25,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("70950cb9-bfc7-45e7-9b04-a52391634943"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 4
                        },
                        new
                        {
                            Id = 26,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("bb365434-9883-477f-816e-f20c48dbafca"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 5
                        },
                        new
                        {
                            Id = 27,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("664803ca-2873-4a4b-a515-3d59597203fa"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 6
                        },
                        new
                        {
                            Id = 28,
                            AdminUrl = "/admin/eservice-admin/electronic-summon-admin-view",
                            ConcurrencyStamp = new Guid("f4dab756-50f3-4a73-b3b3-1744b86a9751"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-summon-view",
                            ServiceId = 4,
                            StageId = 7
                        },
                        new
                        {
                            Id = 29,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("6df63fae-8a5a-468d-87b3-e2f5812b88db"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement",
                            ServiceId = 5,
                            StageId = 1
                        },
                        new
                        {
                            Id = 30,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-preview-step",
                            ConcurrencyStamp = new Guid("63e7a572-bd62-4843-99c4-8b0fd8232849"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 2
                        },
                        new
                        {
                            Id = 31,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("179cebd7-68ee-4ffc-9d28-01ca9968b72a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement",
                            ServiceId = 5,
                            StageId = 3
                        },
                        new
                        {
                            Id = 32,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("f0d771fe-d8a4-422d-be09-a0f82f844121"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 4
                        },
                        new
                        {
                            Id = 33,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("ed266a09-34b1-4920-b3a2-eb0732187959"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 5
                        },
                        new
                        {
                            Id = 34,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("5821891e-f41d-4e34-bac5-0813ba09d3ab"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 6
                        },
                        new
                        {
                            Id = 35,
                            AdminUrl = "/admin/eservice-admin/lands-infringement-admin-view",
                            ConcurrencyStamp = new Guid("2a3d1551-4b86-41b1-81ff-f131e3455504"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/lands-infringement-view",
                            ServiceId = 5,
                            StageId = 7
                        },
                        new
                        {
                            Id = 36,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("cc7f79b1-09a7-4be9-947e-f868c06ff683"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution",
                            ServiceId = 6,
                            StageId = 1
                        },
                        new
                        {
                            Id = 37,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-preview-step",
                            ConcurrencyStamp = new Guid("f3a5f4b5-fe14-44ce-a43a-f700f1ceaa66"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 2
                        },
                        new
                        {
                            Id = 38,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("3990b2cb-d1f1-433f-8407-52950d3c36db"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution",
                            ServiceId = 6,
                            StageId = 3
                        },
                        new
                        {
                            Id = 39,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("bd6af289-116a-4bb0-9df2-4477c436ced0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 4
                        },
                        new
                        {
                            Id = 40,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("548fd500-df6b-483f-bc74-49a3e070e92b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 5
                        },
                        new
                        {
                            Id = 41,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("13bb5183-2c50-47d2-9fa4-972f232fa5c3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 6
                        },
                        new
                        {
                            Id = 42,
                            AdminUrl = "/admin/eservice-admin/judgment-execution-admin-view",
                            ConcurrencyStamp = new Guid("79b08a84-1c43-4e52-ae2a-339228462f4c"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/judgment-execution-view",
                            ServiceId = 6,
                            StageId = 7
                        },
                        new
                        {
                            Id = 43,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("70af2e6f-5245-41d4-8ce0-24b39b7442c6"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate",
                            ServiceId = 7,
                            StageId = 1
                        },
                        new
                        {
                            Id = 44,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-preview-step",
                            ConcurrencyStamp = new Guid("7168660a-7541-411e-aeb2-55bf55898304"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 2
                        },
                        new
                        {
                            Id = 45,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("e6af66af-a5f6-4ada-b067-af2bc7815040"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate",
                            ServiceId = 7,
                            StageId = 3
                        },
                        new
                        {
                            Id = 46,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("863cf9b3-6d26-4238-b24b-9a27a481e339"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 4
                        },
                        new
                        {
                            Id = 47,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("73052e0f-f634-44da-b7b8-90935d23587d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 5
                        },
                        new
                        {
                            Id = 48,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("98a85cb7-6ef5-4c8a-989b-ca34fdc5b720"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 6
                        },
                        new
                        {
                            Id = 49,
                            AdminUrl = "/admin/eservice-admin/marriage-certificate-admin-view",
                            ConcurrencyStamp = new Guid("d3656506-af5e-4ae3-b9f4-aeeea41df202"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/marriage-certificate-view",
                            ServiceId = 7,
                            StageId = 7
                        },
                        new
                        {
                            Id = 50,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("8fa125c3-945b-48ad-aa1c-780bf510da28"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner",
                            ServiceId = 8,
                            StageId = 1
                        },
                        new
                        {
                            Id = 51,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-preview-step",
                            ConcurrencyStamp = new Guid("3086e38d-ea8e-4e5a-a438-c99227d86497"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 2
                        },
                        new
                        {
                            Id = 52,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("a70620f4-c0ee-4e64-b77d-58c32d2526ad"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner",
                            ServiceId = 8,
                            StageId = 3
                        },
                        new
                        {
                            Id = 53,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("beabbd11-285c-487c-a2eb-88714f58a1c5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 4
                        },
                        new
                        {
                            Id = 54,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("dbd45067-6db2-40fc-8731-17929efef242"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 5
                        },
                        new
                        {
                            Id = 55,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("9a5f4932-5a4e-441f-b892-cf0f0cac0bec"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 6
                        },
                        new
                        {
                            Id = 56,
                            AdminUrl = "/admin/eservice-admin/foreigners-realty-owner-admin-view",
                            ConcurrencyStamp = new Guid("7fe0dd3f-ef57-49ad-b3bd-62ce6e2d8cef"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/foreigners-realty-owner-view",
                            ServiceId = 8,
                            StageId = 7
                        },
                        new
                        {
                            Id = 57,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("a57297ad-eb96-478b-b6c1-77b282ec2d1b"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation",
                            ServiceId = 9,
                            StageId = 1
                        },
                        new
                        {
                            Id = 58,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-preview-step",
                            ConcurrencyStamp = new Guid("5133c693-e493-4920-a6d1-1bbc1617dd71"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 2
                        },
                        new
                        {
                            Id = 59,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("14aa355c-da4b-4fff-8ca6-7915bfdf1a7d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation",
                            ServiceId = 9,
                            StageId = 3
                        },
                        new
                        {
                            Id = 60,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("2c6d17d5-538f-4f1a-8eea-0dff541ba394"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 4
                        },
                        new
                        {
                            Id = 61,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("91db6ea8-0e52-451c-a4c0-d72bae58b7c8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 5
                        },
                        new
                        {
                            Id = 62,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("45003c74-5e97-4a00-986b-e3d10657f435"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 6
                        },
                        new
                        {
                            Id = 63,
                            AdminUrl = "/admin/eservice-admin/treatment-recommendation-admin-view",
                            ConcurrencyStamp = new Guid("00500aa2-e8ff-4369-91fd-e20f441d1062"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/treatment-recommendation-view",
                            ServiceId = 9,
                            StageId = 7
                        },
                        new
                        {
                            Id = 64,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("1586f0b1-0c07-4cef-8fc6-c81ca3399b74"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-council",
                            ServiceId = 1,
                            StageId = 1
                        },
                        new
                        {
                            Id = 65,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-preview-step",
                            ConcurrencyStamp = new Guid("f4ea90f3-9445-4f9c-a504-b47b4e7b325a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-council-view",
                            ServiceId = 1,
                            StageId = 2
                        },
                        new
                        {
                            Id = 66,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("2625fcd2-688e-41c6-9c7e-b9d7738edad3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-council",
                            ServiceId = 1,
                            StageId = 3
                        },
                        new
                        {
                            Id = 67,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("b162bf05-4604-478e-9699-721f1274a52a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-council-view",
                            ServiceId = 1,
                            StageId = 4
                        },
                        new
                        {
                            Id = 68,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("29fff591-0c59-473c-8158-915a2480b7e7"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-council-view",
                            ServiceId = 1,
                            StageId = 5
                        },
                        new
                        {
                            Id = 69,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("acd92d26-d5ad-43d4-9dda-9bdbee1fa183"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-council-view",
                            ServiceId = 1,
                            StageId = 6
                        },
                        new
                        {
                            Id = 70,
                            AdminUrl = "/admin/eservice-admin/electronic-council-admin-view",
                            ConcurrencyStamp = new Guid("735b8dd4-3c55-499e-8068-388631fcb932"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequesterUrl = "/eservice/electronic-council-view",
                            ServiceId = 1,
                            StageId = 7
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServieNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSMS")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StageId");

                    b.ToTable("ServieNotifications", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("e0cb7079-e17f-4959-aa7e-9e78d9d6ddb4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = false,
                            IsSMS = true,
                            StageId = 2
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("7ada01df-4b3c-4c49-bb1d-17ff70e36ad9"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = false,
                            IsSMS = true,
                            StageId = 3
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("359dc9f3-6fc9-4a05-b85b-168a5cbc69b5"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = false,
                            IsSMS = true,
                            StageId = 5
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("8ca51f2b-0d46-4048-b5f3-208f9b6ad7ce"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = true,
                            IsSMS = false,
                            StageId = 2
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("ab37a270-ec95-43c3-9967-72cebcbeabc3"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = true,
                            IsSMS = false,
                            StageId = 3
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("8275a3c0-ea06-441f-b959-3784c3b811ba"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDefault = true,
                            IsEmail = true,
                            IsSMS = false,
                            StageId = 5
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServieNotificationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServieNotificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ServieNotificationId");

                    b.ToTable("ServieNotificationLogs", "DataManagement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("7ccd5f61-b5b4-4fb2-b7f6-77344a945264"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بتقديم طلبكم رقم(رقم الطلب) بنجاح وسيتم اشعاركم في حالة الرد على الطلب.",
                            ServieNotificationId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("b34328ed-a2af-4168-a64a-5b1e069f8b5a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بارجاع طلبكم رقم (رقم الطلب) فضلا مراجعة الملاحظات واعادة ارسال الطلب.",
                            ServieNotificationId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = new Guid("4ff81694-8498-467a-861b-a3d4cfc4528a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بأنه تم رفض طلبكم رقم (رقم الطلب) ويمكنكم الاطلاع على سبب الرفض من شاشة طلباتي.",
                            ServieNotificationId = 3
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = new Guid("4b85db14-b40f-4a5f-ad92-00e336d04fbd"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بتقديم طلبكم رقم(رقم الطلب) بنجاح وسيتم اشعاركم في حالة الرد على الطلب.",
                            ServieNotificationId = 4
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = new Guid("333ec185-98ba-40ce-92da-935e76a5565a"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بارجاع طلبكم رقم (رقم الطلب) فضلا مراجعة الملاحظات واعادة ارسال الطلب.",
                            ServieNotificationId = 5
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = new Guid("a66fe78e-a56e-48da-9d50-c8e8688cb11e"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "عزيزي المستفيد نفيدكم بأنه تم رفض طلبكم رقم (رقم الطلب) ويمكنكم الاطلاع على سبب الرفض من شاشة طلباتي.",
                            ServieNotificationId = 6
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CanAddNew")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("SendNotification")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Stages", "Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanAddNew = false,
                            CanEdit = true,
                            ConcurrencyStamp = new Guid("ddd94d8b-522a-443a-84b3-7ccb797d65d0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "مسودة",
                            NameEn = "Draft",
                            SendNotification = false
                        },
                        new
                        {
                            Id = 2,
                            CanAddNew = false,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("3433c609-b2b8-4b9e-a6f8-ab5d00956eb8"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "طلب جديد",
                            NameEn = "New Request",
                            SendNotification = true
                        },
                        new
                        {
                            Id = 3,
                            CanAddNew = false,
                            CanEdit = true,
                            ConcurrencyStamp = new Guid("9fc14839-c1e4-431c-9939-6c1a14e77aa4"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "استكمال البيانات من مقدم الطلب",
                            NameEn = "Complete Data From Requester",
                            SendNotification = true
                        },
                        new
                        {
                            Id = 4,
                            CanAddNew = true,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("5148d69c-e05e-4ac8-923a-5baa654608bf"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "تحت الإجراء",
                            NameEn = "Under Processing",
                            SendNotification = false
                        },
                        new
                        {
                            Id = 5,
                            CanAddNew = true,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("e743dd41-3d1d-486a-b658-ffb312090a3d"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "الطلب مرفوض من مدير النظام",
                            NameEn = "Request Rejected From Admin",
                            SendNotification = true
                        },
                        new
                        {
                            Id = 6,
                            CanAddNew = true,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("3a1cb5af-832f-4bb8-8718-7f1d85ca4ff1"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "الطلب مرفوض",
                            NameEn = "Request Rejected",
                            SendNotification = false
                        },
                        new
                        {
                            Id = 7,
                            CanAddNew = true,
                            CanEdit = false,
                            ConcurrencyStamp = new Guid("5c236697-72db-4521-ba19-f362eb6366e0"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameAr = "الطلب معتمد",
                            NameEn = "Request Approved",
                            SendNotification = false
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.UploadedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("EntityName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Extention")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SubEntityName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("UploadedFiles", "FileManager");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FirstNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FirstNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("IdentityExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDataComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LastNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SecondNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SecondNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ThirdNameAr")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ThirdNameEn")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("NationalityId");

                    b.ToTable("Users", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "superadmin@gmail.com",
                            FirstNameAr = "مدير",
                            FirstNameEn = "Super",
                            IsActive = true,
                            IsDataComplete = true,
                            IsEmployee = true,
                            IsMale = true,
                            LastNameAr = "النظام",
                            LastNameEn = "Admin",
                            PasswordHash = new byte[] { 74, 137, 95, 1, 68, 95, 71, 82, 35, 27, 189, 3, 23, 219, 218, 161, 8, 71, 11, 98, 53, 178, 83, 125, 253, 136, 172, 149, 172, 107, 190, 23, 119, 130, 173, 163, 246, 254, 51, 153, 22, 140, 1, 25, 168, 164, 49, 235, 179, 124, 12, 255, 245, 145, 97, 249, 129, 49, 203, 30, 40, 240, 115, 80 },
                            PasswordSalt = new byte[] { 154, 14, 63, 250, 205, 174, 25, 186, 251, 87, 216, 196, 14, 206, 67, 244, 50, 136, 186, 138, 211, 77, 179, 12, 61, 76, 160, 119, 27, 58, 32, 17, 95, 243, 49, 123, 190, 114, 222, 246, 190, 169, 231, 146, 63, 229, 105, 245, 204, 170, 112, 75, 91, 219, 123, 152, 42, 97, 29, 33, 146, 88, 45, 236, 136, 164, 223, 153, 156, 98, 174, 117, 17, 179, 252, 149, 187, 34, 178, 78, 124, 182, 202, 46, 92, 103, 138, 71, 167, 170, 59, 171, 237, 72, 234, 171, 100, 35, 182, 91, 6, 233, 201, 166, 127, 58, 216, 17, 98, 105, 252, 148, 81, 177, 6, 15, 238, 74, 84, 17, 48, 52, 40, 198, 28, 185, 6, 104 },
                            PhoneNumber = "0500000000",
                            SecondNameAr = "عام",
                            SecondNameEn = "System",
                            ThirdNameAr = "النظام",
                            ThirdNameEn = "Admin",
                            UserName = "superadmin"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1989, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@yahoo.com",
                            FirstNameAr = "مدير",
                            FirstNameEn = "System",
                            IsActive = true,
                            IsDataComplete = true,
                            IsEmployee = false,
                            IsMale = true,
                            LastNameAr = "النظام",
                            LastNameEn = "Admin",
                            PasswordHash = new byte[] { 74, 137, 95, 1, 68, 95, 71, 82, 35, 27, 189, 3, 23, 219, 218, 161, 8, 71, 11, 98, 53, 178, 83, 125, 253, 136, 172, 149, 172, 107, 190, 23, 119, 130, 173, 163, 246, 254, 51, 153, 22, 140, 1, 25, 168, 164, 49, 235, 179, 124, 12, 255, 245, 145, 97, 249, 129, 49, 203, 30, 40, 240, 115, 80 },
                            PasswordSalt = new byte[] { 154, 14, 63, 250, 205, 174, 25, 186, 251, 87, 216, 196, 14, 206, 67, 244, 50, 136, 186, 138, 211, 77, 179, 12, 61, 76, 160, 119, 27, 58, 32, 17, 95, 243, 49, 123, 190, 114, 222, 246, 190, 169, 231, 146, 63, 229, 105, 245, 204, 170, 112, 75, 91, 219, 123, 152, 42, 97, 29, 33, 146, 88, 45, 236, 136, 164, 223, 153, 156, 98, 174, 117, 17, 179, 252, 149, 187, 34, 178, 78, 124, 182, 202, 46, 92, 103, 138, 71, 167, 170, 59, 171, 237, 72, 234, 171, 100, 35, 182, 91, 6, 233, 201, 166, 127, 58, 216, 17, 98, 105, 252, 148, 81, 177, 6, 15, 238, 74, 84, 17, 48, 52, 40, 198, 28, 185, 6, 104 },
                            PhoneNumber = "0500000001",
                            SecondNameAr = "النظام",
                            SecondNameEn = "Admin",
                            ThirdNameAr = "النظام",
                            ThirdNameEn = "Admin",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = new Guid("04cdfce6-1880-410e-bf62-bb360b203605"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = new Guid("b7b56532-2209-40f7-be44-0ae697758028"),
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Auction", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedAuctions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedAuctions")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Audience", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedAudiences")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedAudiences")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.BuildingType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedBuildingTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedBuildingTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CaseType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedCaseTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedCaseTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CommentStage", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedCommentStages")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedCommentStages")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ContactUsMessage", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.ContactUsMessageType", "ContactUsMessageType")
                        .WithMany("ContactUsMessages")
                        .HasForeignKey("ContactUsMessageTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedContactUsMessages")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ContactUsMessageType");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.DefendantType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedDefendantTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedDefendantTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.EmiratesPrince", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedEmiratesPrinces")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedEmiratesPrinces")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Governorate", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedGovernorates")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedGovernorates")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MainPagePoints", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.PageContent", "PageContent")
                        .WithMany("MainPagePoints")
                        .HasForeignKey("PageContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PageContent");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MaritalStatus", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedMaritalStatuses")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedMaritalStatuses")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Nationality", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedNationalities")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedNationalities")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.News", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedNews")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedNews")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.NewsCateguery", "NewsCateguery")
                        .WithMany("News")
                        .HasForeignKey("NewsCategueryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("NewsCateguery");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsCateguery", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedNewsCategueries")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedNewsCategueries")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsComment", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.CommentStage", "CommentStage")
                        .WithMany("NewsComments")
                        .HasForeignKey("CommentStageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedNewsComments")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.News", "News")
                        .WithMany("NewsComments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CommentStage");

                    b.Navigation("ModifiedUser");

                    b.Navigation("News");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataCateguery", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedOpenDataCategueries")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedOpenDataCategueries")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.OpenDataSubCateguery", "OpenDataSubCateguery")
                        .WithMany("OpenDataCategueries")
                        .HasForeignKey("OpenDataSubCategueryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("OpenDataSubCateguery");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataReport", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedOpenDataReports")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedOpenDataReports")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.OpenDataCateguery", "OpenDataCateguery")
                        .WithMany("OpenDataReports")
                        .HasForeignKey("OpenDataCategueryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("OpenDataCateguery");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataRequest", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedOpenDataRequests")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataSubCateguery", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedOpenDataSubCategueries")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedOpenDataSubCategueries")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Poster", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedPosters")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedPosters")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Prison", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedPrisons")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedPrisons")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Religion", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedReligions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedReligions")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Request", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRequests")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRequests")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Stage", "Stage")
                        .WithMany("Requests")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestAttachmentType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRequestAttachmentTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRequestAttachmentTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("RequestAttachmentTypes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestElectronicBoard", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestElectronicBoard")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestElectronicBoard", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestElectronicBoards")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestElectronicSummon", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestElectronicSummon")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestElectronicSummon", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestElectronicSummons")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestForeignersRealtyOwner", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.BuildingType", "BuildingType")
                        .WithMany("RequestForeignersRealtyOwners")
                        .HasForeignKey("BuildingTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Governorate", "Governorate")
                        .WithMany("RequestForeignersRealtyOwners")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestForeignersRealtyOwner")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestForeignersRealtyOwner", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Religion", "Religion")
                        .WithMany("RequestForeignersRealtyOwners")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BuildingType");

                    b.Navigation("Governorate");

                    b.Navigation("Religion");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestJudgmentExecution", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.DefendantType", "DefendantType")
                        .WithMany("RequestJudgmentExecutions")
                        .HasForeignKey("DefendantTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestJudgmentExecution")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestJudgmentExecution", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DefendantType");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestLandsInfringement", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Governorate", "Governorate")
                        .WithMany("RequestLandsInfringements")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestLandsInfringement")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestLandsInfringement", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestLandsInfringements")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestMarriageCertificate", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestMarriageCertificate")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestMarriageCertificate", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.MaritalStatus", "MaritalStatus")
                        .WithMany("RequestMarriageCertificates")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestMarriageCertificates")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MaritalStatus");

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestPrisonersService", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.CaseType", "CaseType")
                        .WithMany("RequestPrisonersServices")
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestPrisonersService")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestPrisonersService", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Prison", "Prison")
                        .WithMany("RequestPrisonersServices")
                        .HasForeignKey("PrisonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestPrisonersServices")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CaseType");

                    b.Navigation("Prison");

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestPrisonerTempRelease", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.CaseType", "CaseType")
                        .WithMany("RequestPrisonerTempReleases")
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestPrisonerTempRelease")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestPrisonerTempRelease", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Prison", "Prison")
                        .WithMany("RequestPrisonerTempReleases")
                        .HasForeignKey("PrisonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestPrisonerTempReleases")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CaseType");

                    b.Navigation("Prison");

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestStageLog", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRequestStageLogs")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRequestStageLogs")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithMany("RequestStageLogs")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Stage", "Stage")
                        .WithMany("RequestStageLogs")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Request");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestTreatmentRecommendation", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Request", "Request")
                        .WithOne("RequestTreatmentRecommendation")
                        .HasForeignKey("Emirates.Core.Domain.Entities.RequestTreatmentRecommendation", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.RequestType", "RequestType")
                        .WithMany("RequestTreatmentRecommendations")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestType", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRequestTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRequestTypes")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("RequestTypes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Role", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedRoles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedRoles")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Service", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServices")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedServices")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceAudience", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Audience", "Audience")
                        .WithMany("ServiceAudiences")
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServiceAudiences")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServiceAudiences")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("CreatedUser");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceBenefit", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServiceBenefits")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceCondition", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServiceConditions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedServiceConditions")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServiceConditions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceRate", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServiceRates")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServiceStage", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServiceStages")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedServiceStages")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServiceStages")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.Stage", "Stage")
                        .WithMany("ServiceStages")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServieNotification", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServieNotifications")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedServieNotifications")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServieNotifications")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Stage", "Stage")
                        .WithMany("ServieNotifications")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Service");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServieNotificationLog", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedServieNotificationLogs")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedServieNotificationLogs")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.ServieNotification", "ServieNotification")
                        .WithMany("ServieNotificationLogs")
                        .HasForeignKey("ServieNotificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("ServieNotification");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Stage", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedStages")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedStages")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.UploadedFile", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedUploadedFiles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedUploadedFiles")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.User", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.Governorate", "Governorate")
                        .WithMany("Users")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Nationality", "Nationality")
                        .WithMany("Users")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Governorate");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Emirates.Core.Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedUserRoles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedUserRoles")
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Emirates.Core.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emirates.Core.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Audience", b =>
                {
                    b.Navigation("ServiceAudiences");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.BuildingType", b =>
                {
                    b.Navigation("RequestForeignersRealtyOwners");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CaseType", b =>
                {
                    b.Navigation("RequestPrisonerTempReleases");

                    b.Navigation("RequestPrisonersServices");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.CommentStage", b =>
                {
                    b.Navigation("NewsComments");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ContactUsMessageType", b =>
                {
                    b.Navigation("ContactUsMessages");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.DefendantType", b =>
                {
                    b.Navigation("RequestJudgmentExecutions");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Governorate", b =>
                {
                    b.Navigation("RequestForeignersRealtyOwners");

                    b.Navigation("RequestLandsInfringements");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.MaritalStatus", b =>
                {
                    b.Navigation("RequestMarriageCertificates");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Nationality", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsComments");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.NewsCateguery", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataCateguery", b =>
                {
                    b.Navigation("OpenDataReports");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.OpenDataSubCateguery", b =>
                {
                    b.Navigation("OpenDataCategueries");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.PageContent", b =>
                {
                    b.Navigation("MainPagePoints");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Prison", b =>
                {
                    b.Navigation("RequestPrisonerTempReleases");

                    b.Navigation("RequestPrisonersServices");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Religion", b =>
                {
                    b.Navigation("RequestForeignersRealtyOwners");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Request", b =>
                {
                    b.Navigation("RequestElectronicBoard");

                    b.Navigation("RequestElectronicSummon");

                    b.Navigation("RequestForeignersRealtyOwner");

                    b.Navigation("RequestJudgmentExecution");

                    b.Navigation("RequestLandsInfringement");

                    b.Navigation("RequestMarriageCertificate");

                    b.Navigation("RequestPrisonerTempRelease");

                    b.Navigation("RequestPrisonersService");

                    b.Navigation("RequestStageLogs");

                    b.Navigation("RequestTreatmentRecommendation");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.RequestType", b =>
                {
                    b.Navigation("RequestElectronicBoards");

                    b.Navigation("RequestElectronicSummons");

                    b.Navigation("RequestLandsInfringements");

                    b.Navigation("RequestMarriageCertificates");

                    b.Navigation("RequestPrisonerTempReleases");

                    b.Navigation("RequestPrisonersServices");

                    b.Navigation("RequestTreatmentRecommendations");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Service", b =>
                {
                    b.Navigation("RequestAttachmentTypes");

                    b.Navigation("RequestTypes");

                    b.Navigation("Requests");

                    b.Navigation("ServiceAudiences");

                    b.Navigation("ServiceBenefits");

                    b.Navigation("ServiceConditions");

                    b.Navigation("ServiceStages");

                    b.Navigation("ServieNotifications");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.ServieNotification", b =>
                {
                    b.Navigation("ServieNotificationLogs");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.Stage", b =>
                {
                    b.Navigation("RequestStageLogs");

                    b.Navigation("Requests");

                    b.Navigation("ServiceStages");

                    b.Navigation("ServieNotifications");
                });

            modelBuilder.Entity("Emirates.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedAuctions");

                    b.Navigation("CreatedAudiences");

                    b.Navigation("CreatedBuildingTypes");

                    b.Navigation("CreatedCaseTypes");

                    b.Navigation("CreatedCommentStages");

                    b.Navigation("CreatedDefendantTypes");

                    b.Navigation("CreatedEmiratesPrinces");

                    b.Navigation("CreatedGovernorates");

                    b.Navigation("CreatedMaritalStatuses");

                    b.Navigation("CreatedNationalities");

                    b.Navigation("CreatedNews");

                    b.Navigation("CreatedNewsCategueries");

                    b.Navigation("CreatedOpenDataCategueries");

                    b.Navigation("CreatedOpenDataReports");

                    b.Navigation("CreatedOpenDataSubCategueries");

                    b.Navigation("CreatedPosters");

                    b.Navigation("CreatedPrisons");

                    b.Navigation("CreatedReligions");

                    b.Navigation("CreatedRequestAttachmentTypes");

                    b.Navigation("CreatedRequestStageLogs");

                    b.Navigation("CreatedRequestTypes");

                    b.Navigation("CreatedRequests");

                    b.Navigation("CreatedRoles");

                    b.Navigation("CreatedServiceAudiences");

                    b.Navigation("CreatedServiceConditions");

                    b.Navigation("CreatedServiceRates");

                    b.Navigation("CreatedServiceStages");

                    b.Navigation("CreatedServices");

                    b.Navigation("CreatedServieNotificationLogs");

                    b.Navigation("CreatedServieNotifications");

                    b.Navigation("CreatedStages");

                    b.Navigation("CreatedUploadedFiles");

                    b.Navigation("CreatedUserRoles");

                    b.Navigation("ModifiedAuctions");

                    b.Navigation("ModifiedAudiences");

                    b.Navigation("ModifiedBuildingTypes");

                    b.Navigation("ModifiedCaseTypes");

                    b.Navigation("ModifiedCommentStages");

                    b.Navigation("ModifiedContactUsMessages");

                    b.Navigation("ModifiedDefendantTypes");

                    b.Navigation("ModifiedEmiratesPrinces");

                    b.Navigation("ModifiedGovernorates");

                    b.Navigation("ModifiedMaritalStatuses");

                    b.Navigation("ModifiedNationalities");

                    b.Navigation("ModifiedNews");

                    b.Navigation("ModifiedNewsCategueries");

                    b.Navigation("ModifiedNewsComments");

                    b.Navigation("ModifiedOpenDataCategueries");

                    b.Navigation("ModifiedOpenDataReports");

                    b.Navigation("ModifiedOpenDataRequests");

                    b.Navigation("ModifiedOpenDataSubCategueries");

                    b.Navigation("ModifiedPosters");

                    b.Navigation("ModifiedPrisons");

                    b.Navigation("ModifiedReligions");

                    b.Navigation("ModifiedRequestAttachmentTypes");

                    b.Navigation("ModifiedRequestStageLogs");

                    b.Navigation("ModifiedRequestTypes");

                    b.Navigation("ModifiedRequests");

                    b.Navigation("ModifiedRoles");

                    b.Navigation("ModifiedServiceConditions");

                    b.Navigation("ModifiedServiceStages");

                    b.Navigation("ModifiedServices");

                    b.Navigation("ModifiedServieNotificationLogs");

                    b.Navigation("ModifiedServieNotifications");

                    b.Navigation("ModifiedStages");

                    b.Navigation("ModifiedUploadedFiles");

                    b.Navigation("ModifiedUserRoles");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
